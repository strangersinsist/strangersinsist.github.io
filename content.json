{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/12/13/hello-world/"},{"title":"Unity2D小游戏","text":"演示视频","link":"/2024/07/19/Unity2D/"},{"title":"基于Springboot+Vue的WebApp开发实验报告","text":"Java与面向对象设计的大作业，实验报告docx用pandoc转成了md。 【实验目的】 掌握Java与面向对象基本原理和概念。 掌握Java与面向对象编程思想和主流技术或框架。 掌握基于Java开发完整软件Demo，并能演示。 【实验装备】 个人笔记本，idea，JDK环境，mysql，navicat, vue，git等。 【实验内容】 基于所选择的主题方向，调研、分析和设计3-5个核心场景（模块）作为研究对象，根据掌握的Java和相关知识，实现相对完整的WebApp应用。以Java为基础，可以自由选择搭配其它技术和框架，输出详细的设计文档、项目源代码和可运行的Demo视频。 【实验要求】 按实验内容输出详细设计、实现、运行关键截图，要求行文整洁、紧凑、顺畅。 代码以团队gitee形式提交，视频以百度网盘形式提交，可限时公开访问。 团队Gitee: JavaGroup (gitee.com) 本项目代码: JavaGroup/project(gitee.com) 视频百度网盘：链接提取码：2s45 实验报告需要交代团队成员分工，以及自己承担的任务（要求任务量合理，鼓励交叉参与）；个人报告要求完整，团队成果部分精炼描述，侧重个人为主部分加以详细描述。 【实验分析】 输出实验分析总结和心得体会。 【参考资料】 参考教程：带你从0搭建一个Springboot+vue前后端分离项目，真的很简单！_哔哩哔哩_bilibili 参考资料： 1. 一个 Vue 3 UI 框架 | Element Plus(element-plus.org) 2. Vue.js 教程 | Vue.js 中文文档(cn.vuejs.org) 3. SpringBoot+Vue个人健康管理系统Java毕业设计_哔哩哔哩_bilibili(主要参考要实现什么功能) 这个源代码上传至：JavaGroup/health_management(gitee.com) 【目录】 一.背景分析 经过了解和学习，为实现健康管理系统，我们采取了一种现代化的前后端分离架构，以下是我们选用的关键技术和工具： 1.前端技术 Vue.js：作为一个渐进式JavaScript框架，Vue.js被用于创建高效、灵活的用户界面。它的组件化架构让我们能够重用代码并加快开发速度。 Element-Plus：基于Vue3的桌面端组件库，提供了一套丰富的UI组件，帮助我们在保持界面美观的同时，减少了开发和设计的工作量。 2.后端技术 SpringBoot：简化了基于Spring的应用开发过程，使得我们能够快速搭建和部署微服务。SpringBoot自动配置的特性大幅度减轻了配置工作，让我们能够专注于业务逻辑的实现。 MyBatis：它是一个支持定制SQL、存储过程以及高级映射的持久层框架。MyBatis消除了几乎所有的JDBC代码，并手动设置参数以及获取结果集。通过简单的XML或注解，我们能够将接口映射成数据库中的记录。 Lombok：一个Java库，通过使用注解，能够自动化生成模板代码，如getters、setters、constructors等。Lombok极大地简化了我们的Java代码，使得它更加简洁易读。 3.数据库管理 MySQL：我们选择MySQL作为后端数据库，借助其强大和广泛支持的特性来存储应用数据。 Navicat：作为一款强大的数据库管理工具，Navicat让数据库的管理变得轻松便捷。它不仅支持MySQL，还支持大量其它数据库，提供直观的GUI方便进行数据管理、开发和维护。 二.需求分析 我们计划实现3-5个主核心功能，参考健康管理系统|拾果健康(sghealth.cn)及网上找到一些健康管理系统找到大概想实现的功能。在写好vue+springboot基本框架，搭建好跨域配置，写好依赖，写好基本的响应码，数据库配置，引入数据库表格写好mapper,controller,entity等等后，决定按功能分工，各自实现负责的功能的前端+后端。虽然前后端分离，但是功能一个人同时写，不断加功能完善项目，同时锻炼写前端和后端的能力。 三.系统设计 下面是我们当时设计的方案： 系统：管理员、用户 登录界面参考： 首页 健康信息上传 商品推荐 运动知识 评估与建议 随后进行抽签，选择各自要实现的功能。抽签决定好后先写好头部和侧边栏，新建不同的.vue和路由，之后每个人写自己的.vue并根据需要补充后端.java即可。 四.系统实现 团队成果： 采用前端部分使用Vue.js和Element-Plus来构建用户界面，后端使用SpringBoot和MyBatis进行业务逻辑的处理和数据持久化，同时使用Navicat来管理MySQL数据库，并借助Lombok简化Java代码的开发。 个人报告： 我的任务：准备阶段学习git，gitee的使用和navicat，idea的配置并创建gitee团队；正式写项目时负责4个小功能，分别是登录、注册、设置、健康问答。并简单改动一下其他部分的细节。最后整理项目时导出sql文件，写项目README。 我的gitee：Zhuyuehan (strangersinsist) -Gitee 1).准备阶段： 参照JavaGroup/health_management(gitee.com)学会怎么运行前端后端数据库,git的一些操作。 2).正式项目： 1.登录前端Login.vue，并在health_manage_vue\\src\\router\\index.js设置路由，点击按钮触发js,通过post与后端进行交互。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;script&gt;import request from &quot;@/utils/request&quot;;export default { name: &quot;Login&quot;, components: {User,Lock}, data(){ return { form:{}, rules:{ username:[ {required:true,message:&quot;请输入用户名&quot;,trigger:'blur'}, ], password:[ {required:true,message:&quot;请输入密码&quot;,trigger:'blur'}, ], } } }, methods:{ login(){ request.post(&quot;/api/user/login&quot;,this.form).then(res =&gt;{ console.log(res); if(res.code == '200'){ this.$message({ type: &quot;success&quot;, message:&quot;登录成功&quot; }) //改一下试图存缓存 sessionStorage.setItem(&quot;user&quot;, JSON.stringify(res.data)); this.$router.push(&quot;/&quot;) }else{ this.$message({ type:&quot;error&quot;, message:&quot;用户名或密码错误&quot; }) } }) } }}import { User,Lock,} from '@element-plus/icons-vue'&lt;/script&gt;&lt;template&gt; &lt;div class=&quot;login-container&quot;&gt; &lt;div class=&quot;login-card&quot;&gt; &lt;h1 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h1&gt; &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; class=&quot;login-form&quot; ref=&quot;loginForm&quot; size=&quot;large&quot;&gt; &lt;el-form-item prop=&quot;username&quot; class=&quot;form-item&quot;&gt; &lt;el-icon class=&quot;icon&quot;&gt;&lt;User /&gt;&lt;/el-icon&gt; &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名：&quot; class=&quot;input-field&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item prop=&quot;password&quot; class=&quot;form-item&quot;&gt; &lt;el-icon class=&quot;icon&quot;&gt;&lt;Lock /&gt;&lt;/el-icon&gt; &lt;el-input type=&quot;password&quot; v-model=&quot;form.password&quot; placeholder=&quot;密码：&quot; class=&quot;input-field&quot; show-password&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;div class=&quot;form-actions&quot;&gt; &lt;el-button class=&quot;action-button&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt; &lt;el-button class=&quot;action-button&quot; @click=&quot;this.$router.push('/register')&quot;&gt;注册&lt;/el-button&gt; &lt;/div&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;//这部分为了优化界面写的比较多，省略，详细看gitee代码&lt;/style&gt; 后端和队友共用的Result.java，User.java，UserMapper.java和UserController.java，用于获取数据库信息及返回数据给前端，我在队友写的代码基础上增加了需要的部分UserController.java: 12345678910111213141516171819202122232425262728package com.example.demo.controller;import …@RestController@RequestMapping(&quot;/user&quot;)public class UserController { @Resource UserMapper userMapper; @PostMapping(&quot;/login&quot;) public Result&lt;?&gt; login(@RequestBody User user){ User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername()).eq(User::getPassword,user.getPassword())); if(res ==null){ return Result.fail(&quot;用户名或密码错误&quot;); } return Result.success(res); } @PostMapping(&quot;/register&quot;) public Result&lt;?&gt; register(@RequestBody User user){ User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername())); if(res !=null){ return Result.fail(&quot;用户名重复&quot;); } if(user.getPassword()==null){ user.setPassword(&quot;123456&quot;); } userMapper.insert(user); return Result.success(user); } 最初是这样： 经过美化： 2.注册 与登录基本类似，前端Register.vue，并在index.js设置路由。详细代码可以看gitee。(这个后面和登录用了同样的方式美化了一下) 3.设置 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273&lt;script&gt;import request from &quot;@/utils/request&quot;;export default { name: &quot;Setting&quot;, components: { }, data(){ return{ form:{}, input:&quot;&quot; } }, created(){ let str=sessionStorage.getItem(&quot;user&quot;)||&quot;{}&quot; this.form=JSON.parse(str) }, methods:{ handleClose(){ this.$router.push('/home'); }, update(){ request.put(&quot;api/user&quot;,this.form).then(res =&gt;{ console.log(res); if(res.code == '200'){ this.$message({ type: &quot;success&quot;, message:&quot;更新成功&quot; }) sessionStorage.setItem(&quot;user&quot;,JSON.stringify(this.form)) this.$router.push('/home'); }else{ this.$message({ type:&quot;error&quot;, message:&quot;更新失败&quot; }) } }) } }}&lt;/script&gt;&lt;template&gt; &lt;div&gt; &lt;el-dialog v-model=&quot;form&quot; title=&quot;个人信息编辑&quot; width=&quot;500&quot; @close=&quot;handleClose&quot;&gt; &lt;el-form :model=&quot;form&quot;&gt; &lt;el-form-item label=&quot;用户名&quot; :label-width=&quot;formLabelWidth&quot;&gt; &lt;el-input v-model=&quot;form.username&quot; disabled&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; :label-width=&quot;formLabelWidth&quot;&gt; &lt;el-input v-model=&quot;form.password&quot; show-password&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;手机号&quot; :label-width=&quot;formLabelWidth&quot;&gt; &lt;el-input v-model=&quot;form.number&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;邮箱&quot; :label-width=&quot;formLabelWidth&quot;&gt; &lt;el-input v-model=&quot;form.email&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;div class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;this.$router.push('/home')&quot;&gt;取消&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt; 确认 &lt;/el-button&gt; &lt;/div&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt; 这个是header.vue部分的设置，写这部分是新增了vue和路由实现的。这部分不难，是在element plus中找了表单，再写好script部分，获取的user信息就好了。后来优化这部分时补充handleClose方法点击叉号跳转/home页面，使操作更加流畅。 4.健康问答 前端实现：HomeView.vue: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;template&gt;&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;chatbox&quot;&gt; &lt;h2 class=&quot;title&quot;&gt;健康问答&lt;/h2&gt; &lt;div class=&quot;messages&quot; ref=&quot;messageBox&quot;&gt; &lt;div v-for=&quot;(message, index) in messages&quot; :key=&quot;index&quot; :class=&quot;{'message-container': true, 'user-message': message.sender === 'User', 'bot-message': message.sender !== 'User'}&quot; &gt; &lt;el-avatar class=&quot;message-avatar&quot; style=&quot;background-color: cornflowerblue;color: black&quot;&gt;{{message.sender === 'User' ? 'User' : 'Bot'}}&lt;/el-avatar&gt; &lt;div class=&quot;message-content&quot;&gt;{{message.text}}&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;input-section&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;userinput&quot; v-model=&quot;userInput&quot; @keyup.enter=&quot;sendMessage&quot; placeholder=&quot;输入：&quot; /&gt; &lt;button class=&quot;send&quot; @click=&quot;sendMessage&quot; &gt; 发送 &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import axios from 'axios'export default { name: 'HomeView', components: { }, data(){ return{ userInput: '', messages: [], } }, methods:{ async callAPIMethod(input) { try { const response = await axios.post('http://localhost:9091/reply', { message: input }); return response.data; } catch (error) { console.error(error); } }, async sendMessage() { this.messages.push({ sender: 'User', text: this.userInput, }); console.log(&quot;Ready to send message: &quot; + this.userInput); const response = await this.callAPIMethod(this.userInput); console.log(&quot;Received message: &quot; + response); if(response) { this.messages.push({ sender: 'Bot', text: response, }); } this.$refs.messageBox.scrollTop = this.$refs.messageBox.scrollHeight; this.userInput = ''; }, },}&lt;/script&gt;&lt;style scoped&gt;//这部分太长了省略，详细看gitee代码&lt;/style&gt; 后端实现：MessageController.java 1234567891011121314151617181920212223242526272829package com.example.demo.controller;import …class Message { private String message; // getter // setter}@CrossOrigin(origins = &quot;http://localhost:8080&quot;)@RestControllerpublic class MessageController { @PostMapping(&quot;/reply&quot;) public String reply(@RequestBody Message message) { Random rand = new Random(); String[] responses = {&quot;保持健康~&quot;, &quot;锻炼身体！&quot;, &quot;饮食规律~&quot;}; if (&quot;你好&quot;.equals(message.getMessage())) { return &quot;你好&quot;; } else if (&quot;什么是亚健康管理系统&quot;.equals(message.getMessage())) { return &quot;这个亚健康管理系统是人工智能学院java小组开发的。包括主页，运动知识，健康购物，评估与建议，健康信息上传的功能&quot;; } //省略一些else if else { return responses[rand.nextInt(responses.length)]; } }} 这部分本来我想连一个大语言模型的api，但是后来找不到适合的免费api，并且觉得如果是健康管理系统的话可能直接连一个大模型不太合适，要手动个性化设置一下，遂写了一些回复语代替，比较简洁，仅供演示。如果问”你好”和”什么是亚健康管理系统&quot;等会回复特定的话，问其他就在&quot;保持健康~&quot;,&quot;锻炼身体！&quot;, &quot;饮食规律~&quot;中随机回复一个。 最初是下面左图所示，右图是后来美化了一下。 5.一些其他的小细节 1）头部username显示 最初： 改动后： 显示具体的用户名 123&lt;template #title&gt; &lt;el-avatar style=&quot;background-color: cornflowerblue;color: black&quot;&gt;{{ user.username }}&lt;/el-avatar&gt; &lt;/template&gt; 2）管理员和普通用户权限，管理员可以看到用户管理的页面，这里是在数据库增加了role(int类型，1表示管理员0表示普通用户), 在Aside.vue： 1234 &lt;el-menu-item index=&quot;7&quot; v-if=&quot;user.role===1&quot; @click=&quot;this.$router.push('/user_manage')&quot;&gt; &lt;el-icon&gt;&lt;List /&gt;&lt;/el-icon&gt; &lt;span&gt;用户管理&lt;/span&gt;&lt;/el-menu-item&gt; v-if=&quot;user.role===1&quot; 这样实现的 在User_manage.vue: 123456&lt;el-table-column label=&quot;角色&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;span v-if=&quot;scope.row.role===1&quot;&gt;管理员&lt;/span&gt; &lt;span v-if=&quot;scope.row.role===0&quot;&gt;普通用户&lt;/span&gt; &lt;/template&gt;&lt;/el-table-column&gt; 实现两者的显示。 3）未登录状况下强制跳转登录（这里是对我负责的登录功能的优化） 在index.js: 123456789101112// 添加一个 beforeEach 路由守卫,这里用于实现未登录情况下强制跳转/loginrouter.beforeEach((to, from, next) =&gt; { // 检查 sessionStorage 中是否已经有 user let user = sessionStorage.getItem('user'); // 如果没有 user 且访问的不是登录界面，那么强制跳转至登录页面 if (!user &amp;&amp; to.path !== '/login'&amp;&amp; to.path !== '/register') { return next({ path: '/login' }); } // 否则就继续进行本次路由 next();}); 6.sql文件的整理上传，详见giteehealth_management.sql 7.README，详见giteeREADME.md 五.总结展望 这次作业前期准备断断续续用了快一个月，后面写项目差不多两周左右。使用多一点框架会在正式开发中快很多，但是想要知道怎么用还是要学不少知识的。我们每个人都写了前端后端，如果你看源码会发现4个人不同的代码风格。总的来说，这次大作业还是学到了很多东西，见证了项目一点点搭建起来，培养团队合作能力，也真的加强了自信”我们可以自己写原创项目”。 展望的话，我们以后可以实现更完整一点的项目，比如文件上传，更丰富的管理员功能，验证码，服务器部署等等。","link":"/2024/06/18/web%E5%BC%80%E5%8F%91/"},{"title":"W4terCTF2024 writeup","text":"纯小白，做出的题很少 图片很糊但就先这样吧 放个友链Lst4r-max.github.io Spam 2024先找垃圾邮件，搜了很多东西后找到spammimic - encoded，然后第一步解码： 159,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a,01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2,0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22 前后是ACSII，中间是emoji的unicode。 123456789101112def hex_to_ascii(hex_string): bytes_object = bytes.fromhex(hex_string) ascii_string = bytes_object.decode(&quot;ASCII&quot;) return ascii_stringhex_string1 = &quot;59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a&quot;hex_string1 = hex_string1.replace(',', '')print(hex_to_ascii(hex_string1)) hex_string2 = &quot;0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22&quot;hex_string2 = hex_string2.replace(',', '')print(hex_to_ascii(hex_string2)) 1234unicode_string =&quot;01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2&quot;unicode_list = unicode_string.split(',')emoji_string = ''.join(chr(int('0x' + uni, 16)) for uni in unicode_list)print(emoji_string) 12You like emojis, don't you?Btw, the key is &quot;KEY&quot; 1🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😆🚰📂🌪☺🛩🌏📂🕹🦓🐅🍵🎈😀🔄🚫🎤🦓✅📮🎤🎅🍎🙃🌉🎃🍍🍴👣🚹🤣🐘🏹☺👣💧👣🦓🌿⌨🌪🌏🙃🍵❓☂🌉😆🏹🍵💧🎅👉🌊🚹🚪🍴😎🎃🌪🙃👁🥋👑💧🐘🎤🥋🐘🛩🤣🌉🛩⏩😍❓🐘😡☀😍🙃😁😀😁🚫📂✅☃🚫😎🔪👑😀🕹🚫😍🌪📂👌🍍👌🦓🖐🤣😎🏎🍍🏹🍌🍍🎤☀🏹🎈🚰💧☀✉🏹🍍🦓🎅🍴☂⏩🚪🐍☺🐘😇😡🍵🌏🦓🍵🛩📂👌🏹🗒🗒 找到下面的工具：emoji-aes 发现密钥的问题，试了KEY的unicode, ascii,等等，🔑的unicode，用KEY生成垃圾邮件，都失败了。找到正确的密钥🔑。解密结果是： 10x???? ⊕ dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0= 这个字符串应该是被异或操作过的结果，找到正确的16进制数与其进行异或就能得到原始信息。下面是暴力破解来找出可能的结果。异或运算的一个特点是自反的，就是用同一个键进行两次异或操作就可以恢复原始信息。 1234567import base64cipher_text = base64.b64decode('dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=')for xor_key in range(0x10000): # 试验所有 0x0000 到 0xffff 的可能key plain_text = ''.join(chr(b ^ (xor_key &amp; 0xff)) for b in cipher_text) print(f'0x{xor_key:04x}: {plain_text}') 第一次的代码有点问题，遍历输出只发现了一个很像的数据。分析了下奇数位和偶数位异或的值是不一样的，0x？？？？看得出来是个四位十六进制，这个奇数位看起来基本是对的。改一下代码，然后一样遍历枚举，就找到flag了。 12345678import base64cipher_text = base64.b64decode('dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=')xor_key_even = 0xfe20for xor_key_odd in range(0x10000): plain_text = &quot;&quot;.join(chr(cipher_text[i] ^ ((xor_key_odd if i % 2 else xor_key_even) &amp; 0xff)) for i in range(len(cipher_text))) print(f'key_odd: 0x{xor_key_odd:04x}, deciphered message: {plain_text}') GZ GPTnc：乱码解决方案：乱码恢复 手动改乱码比较慢，就使用python的pwn库，并导入codecs模块（基础编解码功能）进行无限交互直至远程服务器终止。 1234567891011from pwn import *import codecsconn = remote('127.0.0.1', 50338)while True: data = conn.recv().decode('utf-8') gbk_data = data.encode('gbk') print(f&quot;接收到的数据：{data}&quot;) conn.interactive() conn.close() 看提示，应该是每次返回的有隐藏数据（想到去年的shadow，感觉这次输出光标也有奇怪的闪动）。确定了下每次输出后都有隐藏信息，这题是考隐写的。把终端输出复制过来看到vscode的提示： 然后去查一下锁定类型：零宽度字符隐写，并找到工具Unicode Steganography with Zero-Width Characters。用笨蛋方法一句句复制粘贴上去解码的，把每次的Hidden Text粘贴上去就得到完整的flag了。 broken.mp4解压后一个视频是完好的，打开看看，很明显的提示了，明显是在微信打开的嘛，去微信上搜搜标题，很好找到这篇文章链接然后去下载公众号上说的那个软件恢复一下就OK了 Sign In四道签到题的最后一个（晚上公选课无聊乱翻榜单看到的） Remember It 0第一次做pwn题，随便试试，签到题的话一般跟着做就行（主要是懒得想其他方法了）看源码，笨蛋方法没问题，就一步步敲的然后cat flag Shuffle Puts签到题，嗯，打开IDA直接看strings 总结小白第一次玩CTF还是挺开心的，感觉算是入了门。（一周前容器实例还不会开netcat还不会用的）。如果这周事情不那么多就好了，这周太忙了有效做题时间不多，很多方向都没学，基本上就是在做Misc了。","link":"/2024/05/03/writeup/"},{"title":"打卡贴","text":"这里是我的21天打卡计划。 算法初级算法 - LeetBook - 力扣（LeetCode） 数组 删除排序数组中的重复项给你一个非严格递增排列的数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 nums 中唯一元素的个数。 考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过： 更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。返回 k 。 双指针解题 12345678910111213141516171819class Solution{public:int removeDuplicates(vector&lt;int&gt;&amp; nums){ int n=nums.size(); if(n=0){ return 0; } int fast=1,slow=1; while(fast&lt;n){ if(nums[fast]!=nums[fast-1]){ nums[slow]=nums[fast]; ++slow; } ++fast; } return slow;}}; 买卖股票的最佳时机 II给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。 在每一天，你可以决定是否购买和/或出售股票。你在任何时候最多只能持有一股股票。你也可以先购买，然后在同一天出售。 返回你能获得的最大利润。 12345678910111213class Solution{public: int maxProfit(vector&lt;int&gt;&amp;prices){ int n=prices.size(); int tot=0; for(int i=1;i&lt;n;i++){ if(prices[i]&gt;price[i-1]){ tot+=price[i]-price[i-1]; } } return tot; }}; 旋转数组 给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。 使用一个新的数组 123456789101112131415161718class Solution{public: void rotate(vector&lt;int&gt;&amp;nums,int k){ int len=nums.size(); k=k%len; vector&lt;int&gt;res(len); //将后k个元素移到前面 for(int i=0;i&lt;k;i++){ res[i]=nums[len-k+i]; } //将前len-k个元素移到后面 for(int i=0;i&lt;len-k;i++){ res[k+i]=nums[i]; } //将结果复制回nums nums=res; }};也可以这样 1234567891011class Solution{public: void rotate(vector&lt;int&gt;&amp;nums,int k){ int n=nums.size(); vector&lt;int&gt;newArr(n); for(int i=0;i&lt;n;i++){ newArr[(i+k)%n]=nums[i]; } nums.assign(newArr.begin(),newArr.end()); }}; 存在重复元素给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。题解：考虑排序，排序后数组的重复元素一定出现在相邻位置中 12345678910111213class Solution {public: bool containsDuplicate(vector&lt;int&gt;&amp; nums) { sort(nums.begin(),nums.end()); int n=nums.size(); for(int i=0;i&lt;n-1;i++){ if(nums[i]==nums[i+1]){ return true; } } return false;}; 只出现一次的数字 给你一个非空整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。 第一次的解法（没有考虑线性时间复杂度）这么写是因为收到前面思路的影响 1234567891011121314151617181920212223242526272829303132class Solution {public: int singleNumber(vector&lt;int&gt;&amp; nums) { sort(nums.begin(), nums.end()); int n = nums.size(); // 如果数组只有一个元素，直接返回 if (n == 1) { return nums[0]; } // 检查第一个元素是否是唯一的 if (nums[0] != nums[1]) { return nums[0]; } // 检查最后一个元素是否是唯一的 if (nums[n - 1] != nums[n - 2]) { return nums[n - 1]; } // 从第二个元素到倒数第二个元素进行检查 for (int i = 1; i &lt; n - 1; i++) { if (nums[i] != nums[i - 1] &amp;&amp; nums[i] != nums[i + 1]) { return nums[i]; } } return -1; }}; 如果要考虑线性时间复杂度 O (n): 12345678910111213141516171819class Solution {public: int singleNumber(vector&lt;int&gt;&amp; nums) { int result = 0; for (int num : nums) { result ^= num; } return result; }}; 这个异或解法的时间复杂度是 O(n)，空间复杂度是 O(1)考虑线性时间复杂度和常量空间复杂度：异或运算异或运算有以下性质： a ^ a = 0（任何数与自己异或的结果是0） a ^ 0 = a（任何数与0异或的结果是这个数本身） 异或运算满足交换律和结合律。 因此，如果数组中除了一个数以外其他数都出现两次，那么将所有数进行异或运算，结果就是那个只出现一次的数。 ps: 复习位运算的规律：（相同为０不同为１）1^1=0;1^0=1;0^1=1;0^0=0;6. 两个数组的交集Ⅱ 给你两个整数数组 nums 1 和 nums 2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。法一：哈希表遍历第一个数组，在哈希表中记录第一个数组中每个数字以及出现的次数，然后遍历第二个数组，如果哈希表中存在这个数字，将这个数字添加到答案，并减少哈希表中该数字出现的次数。 123456789101112131415161718192021222324class Solution{public: vector&lt;int&gt;intersect(vector&lt;int&gt;&amp;nums1,vector&lt;int&gt;&amp;nums2){ if(nums1.size()&gt;nums2.size()){ return intersect(nums2,nums1); } unordered_map&lt;int,int&gt;m; for(int num:nums1){ ++m[num]; } vector&lt;int&gt;intersection; for(int num:nums2){ if(m.count(num)){ intersection.push_back(num); --m[num]; if(m[num]==0){ m.erase(num); } } } return intersection; }} 前端后端其他STL时间复杂度","link":"/2024/09/14/%E6%89%93%E5%8D%A1%E8%B4%B4/"}],"tags":[{"name":"unity","slug":"unity","link":"/tags/unity/"},{"name":"c#","slug":"c","link":"/tags/c/"},{"name":"springboot","slug":"springboot","link":"/tags/springboot/"},{"name":"web","slug":"web","link":"/tags/web/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"ctf","slug":"ctf","link":"/tags/ctf/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"后端","slug":"后端","link":"/tags/%E5%90%8E%E7%AB%AF/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"}],"categories":[{"name":"游戏开发","slug":"游戏开发","link":"/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"},{"name":"web开发","slug":"web开发","link":"/categories/web%E5%BC%80%E5%8F%91/"},{"name":"CTF","slug":"CTF","link":"/categories/CTF/"},{"name":"打卡","slug":"打卡","link":"/categories/%E6%89%93%E5%8D%A1/"}],"pages":[{"title":"about","text":"关于我：人工智能专业大二在读。正在努力学东西。","link":"/about/index.html"}]}