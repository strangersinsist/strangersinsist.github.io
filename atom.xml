<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyh&#39;s blog</title>
  
  
  <link href="https://strangersinsist.github.io/atom.xml" rel="self"/>
  
  <link href="https://strangersinsist.github.io/"/>
  <updated>2024-07-19T16:17:00.631Z</updated>
  <id>https://strangersinsist.github.io/</id>
  
  <author>
    <name>zyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Unity2D小游戏</title>
    <link href="https://strangersinsist.github.io/2024/07/19/Unity2D/"/>
    <id>https://strangersinsist.github.io/2024/07/19/Unity2D/</id>
    <published>2024-07-19T15:03:05.491Z</published>
    <updated>2024-07-19T16:17:00.631Z</updated>
    
    <content type="html"><![CDATA[<video width="800" height="500" controls>  <source src="https://github.com/strangersinsist/strangersinsist.github.io/raw/master/source/7.19/1.mp4" type="video/mp4"></video>]]></content>
    
    
      
      
    <summary type="html">&lt;video width=&quot;800&quot; height=&quot;500&quot; controls&gt;
  &lt;source src=&quot;https://github.com/strangersinsist/strangersinsist.github.io/raw/master/source/7.19</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>亚健康管理系统</title>
    <link href="https://strangersinsist.github.io/2024/06/18/%E4%BA%9A%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://strangersinsist.github.io/2024/06/18/%E4%BA%9A%E5%81%A5%E5%BA%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-06-18T13:55:32.940Z</published>
    <updated>2024-07-16T12:02:29.582Z</updated>
    
    <content type="html"><![CDATA[<p>  java专选的大作业，实验报告docx用pandoc转成了md。</p><p><strong>【实验目的】</strong></p><ol><li><p>掌握Java与面向对象基本原理和概念。</p></li><li><p>掌握Java与面向对象编程思想和主流技术或框架。</p></li><li><p>掌握基于Java开发完整软件Demo，并能演示。</p></li></ol><p><strong>【实验装备】</strong></p><p>个人笔记本，idea，JDK环境，mysql，navicat, vue，git等。</p><p><strong>【实验内容】</strong></p><p>基于所选择的主题方向，调研、分析和设计3-5个核心场景（模块）作为研究对象，根据掌握的Java和相关知识，实现相对完整的WebApp应用。以Java为基础，可以自由选择搭配其它技术和框架，输出详细的设计文档、项目源代码和可运行的Demo视频。</p><p><strong>【实验要求】</strong></p><ol><li><p>按实验内容输出详细设计、实现、运行关键截图，要求行文整洁、紧凑、顺畅。</p></li><li><p>代码以团队gitee形式提交，视频以百度网盘形式提交，可限时公开访问。</p></li></ol><blockquote><p>团队Gitee: <a href="https://gitee.com/AIJavaGroup">JavaGroup (gitee.com)</a></p><p>本项目代码: <a href="https://gitee.com/AIJavaGroup/project">JavaGroup&#x2F;project<br>(gitee.com)</a></p><p>视频百度网盘：<a href="https://pan.baidu.com/s/1H2LPdaarlfgZMcD_KRa6jg?pwd=2s45">链接</a><br>提取码：2s45</p></blockquote><ol start="3"><li>实验报告需要交代团队成员分工，以及自己承担的任务（要求任务量合理，鼓励交叉参与）；个人报告要求完整，团队成果部分精炼描述，侧重个人为主部分加以详细描述。</li></ol><p><strong>【实验分析】</strong></p><p>输出实验分析总结和心得体会。</p><p><strong>【参考资料】</strong></p><p>参考教程：<a href="https://www.bilibili.com/video/BV14y4y1M7Nc/?vd_source=270ace08b7863e0889a5cb86e5e103ac">带你从0搭建一个Springboot+vue前后端分离项目，真的很简单！_哔哩哔哩_bilibili</a></p><p>参考资料：</p><p>1. <a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus(element-plus.org)</a></p><p>2. <a href="https://cn.vuejs.org/">Vue.js 教程 | Vue.js 中文文档(cn.vuejs.org)</a></p><p>3. <a href="https://www.bilibili.com/video/BV1Xx421Q7df/?vd_source=270ace08b7863e0889a5cb86e5e103ac">SpringBoot+Vue个人健康管理系统Java毕业设计_哔哩哔哩_bilibili</a>(主要参考要实现什么功能)</p><p>这个源代码上传至：<a href="https://gitee.com/AIJavaGroup/health_management">JavaGroup&#x2F;health_management(gitee.com)</a></p><p><strong>【目录】</strong></p><p><strong>一.背景分析</strong></p><p>经过了解和学习，为实现健康管理系统，我们采取了一种现代化的前后端分离架构，以下是我们选用的关键技术和工具：</p><p>1.前端技术</p><p>Vue.js：作为一个渐进式JavaScript框架，Vue.js被用于创建高效、灵活的用户界面。它的组件化架构让我们能够重用代码并加快开发速度。</p><p>Element-Plus：基于Vue3的桌面端组件库，提供了一套丰富的UI组件，帮助我们在保持界面美观的同时，减少了开发和设计的工作量。</p><p>2.后端技术</p><p>SpringBoot：简化了基于Spring的应用开发过程，使得我们能够快速搭建和部署微服务。SpringBoot自动配置的特性大幅度减轻了配置工作，让我们能够专注于业务逻辑的实现。</p><p>MyBatis：它是一个支持定制SQL、存储过程以及高级映射的持久层框架。MyBatis消除了几乎所有的JDBC代码，并手动设置参数以及获取结果集。通过简单的XML或注解，我们能够将接口映射成数据库中的记录。</p><p>Lombok：一个Java库，通过使用注解，能够自动化生成模板代码，如getters、setters、constructors等。Lombok极大地简化了我们的Java代码，使得它更加简洁易读。</p><p>3.数据库管理</p><p>MySQL：我们选择MySQL作为后端数据库，借助其强大和广泛支持的特性来存储应用数据。</p><p>Navicat：作为一款强大的数据库管理工具，Navicat让数据库的管理变得轻松便捷。它不仅支持MySQL，还支持大量其它数据库，提供直观的GUI方便进行数据管理、开发和维护。</p><p><strong>二.需求分析</strong></p><p>我们计划实现3-5个主核心功能，参考<a href="https://www.sghealth.cn/health">健康管理系统|拾果健康(sghealth.cn)</a>及网上找到一些健康管理系统找到大概想实现的功能。在写好vue+springboot基本框架，搭建好跨域配置，写好依赖，写好基本的响应码，数据库配置，引入数据库表格写好mapper,controller,entity等等后，决定按功能分工，各自实现负责的功能的前端+后端。虽然前后端分离，但是功能一个人同时写，不断加功能完善项目，同时锻炼写前端和后端的能力。</p><p><strong>三.系统设计</strong></p><p>下面是我们当时设计的方案：</p><ol><li>系统：管理员、用户</li></ol><p>登录界面参考：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/1.jpg?raw=true"></p><ol start="2"><li>首页</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/2.jpg?raw=true"></p><ol start="3"><li>健康信息上传</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/3.jpg?raw=true"></p><ol start="4"><li>商品推荐</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/4.png?raw=true"></p><ol start="5"><li>运动知识</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/5.png?raw=true"></p><ol start="6"><li>评估与建议</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/6.png?raw=true"></p><p>随后进行抽签，选择各自要实现的功能。抽签决定好后先写好头部和侧边栏，新建不同的.vue和路由，之后每个人写自己的.vue并根据需要补充后端.java即可。</p><p><strong>四.系统实现</strong></p><p><strong>团队成果：</strong></p><p>采用前端部分使用Vue.js和Element-Plus来构建用户界面，后端使用SpringBoot和MyBatis进行业务逻辑的处理和数据持久化，同时使用Navicat来管理MySQL数据库，并借助Lombok简化Java代码的开发。</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/7.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/8.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/9.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/10.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/11.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/12.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/13.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/14.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/15.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/16.png?raw=true"></p><p><strong>个人报告：</strong></p><p>我的任务：准备阶段学习git，gitee的使用和navicat，idea的配置并创建gitee团队；正式写项目时负责4个小功能，分别是登录、注册、设置、健康问答。并简单改动一下其他部分的细节。最后整理项目时导出sql文件，写项目README。</p><p>我的gitee：<a href="https://gitee.com/strangersinsist">Zhuyuehan (strangersinsist) -Gitee</a></p><p>1).准备阶段：</p><p>参照<a href="https://gitee.com/AIJavaGroup/health_management">JavaGroup&#x2F;health_management(gitee.com)</a>学会怎么运行前端后端数据库,git的一些操作。</p><!-- ![](https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/17.png?raw=true) --><p>2).正式项目：</p><p>1.登录<br>前端<code>Login.vue</code>，并在health_manage_vue\src\router\index.js设置路由，点击按钮触发js,通过post与后端进行交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import request from &quot;@/utils/request&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  components: &#123;User,Lock&#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form:&#123;&#125;,</span><br><span class="line">      rules:&#123;</span><br><span class="line">        username:[</span><br><span class="line">          &#123;required:true,message:&quot;请输入用户名&quot;,trigger:&#x27;blur&#x27;&#125;,</span><br><span class="line">        ],</span><br><span class="line">        password:[</span><br><span class="line">          &#123;required:true,message:&quot;请输入密码&quot;,trigger:&#x27;blur&#x27;&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">      request.post(&quot;/api/user/login&quot;,this.form).then(res =&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        if(res.code == &#x27;200&#x27;)&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;success&quot;,</span><br><span class="line">            message:&quot;登录成功&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          //改一下试图存缓存</span><br><span class="line">          sessionStorage.setItem(&quot;user&quot;, JSON.stringify(res.data));</span><br><span class="line"></span><br><span class="line">          this.$router.push(&quot;/&quot;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type:&quot;error&quot;,</span><br><span class="line">            message:&quot;用户名或密码错误&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">import &#123;</span><br><span class="line">  User,Lock,</span><br><span class="line">&#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;login-card&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h1&gt;</span><br><span class="line">      &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; class=&quot;login-form&quot; ref=&quot;loginForm&quot; size=&quot;large&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot; class=&quot;form-item&quot;&gt;</span><br><span class="line">          &lt;el-icon class=&quot;icon&quot;&gt;&lt;User /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名：&quot; class=&quot;input-field&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot; class=&quot;form-item&quot;&gt;</span><br><span class="line">          &lt;el-icon class=&quot;icon&quot;&gt;&lt;Lock /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;el-input type=&quot;password&quot; v-model=&quot;form.password&quot; placeholder=&quot;密码：&quot; class=&quot;input-field&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;div class=&quot;form-actions&quot;&gt;</span><br><span class="line">          &lt;el-button class=&quot;action-button&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button class=&quot;action-button&quot; @click=&quot;this.$router.push(&#x27;/register&#x27;)&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">//这部分为了优化界面写的比较多，省略，详细看gitee代码</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后端和队友共用的Result.java，User.java，UserMapper.java和UserController.java，用于获取数据库信息及返回数据给前端，我在队友写的代码基础上增加了需要的部分<br><code>UserController.java:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.controller;</span><br><span class="line">import …</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result&lt;?&gt; login(@RequestBody User user)&#123;</span><br><span class="line">        User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername()).eq(User::getPassword,user.getPassword()));</span><br><span class="line">        if(res ==null)&#123;</span><br><span class="line">            return Result.fail(&quot;用户名或密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return Result.success(res);</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(&quot;/register&quot;)</span><br><span class="line">    public Result&lt;?&gt; register(@RequestBody User user)&#123;</span><br><span class="line">        User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername()));</span><br><span class="line">        if(res !=null)&#123;</span><br><span class="line">            return Result.fail(&quot;用户名重复&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(user.getPassword()==null)&#123;</span><br><span class="line">            user.setPassword(&quot;123456&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        return Result.success(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最初是这样：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/20.png?raw=true"></p><p>经过美化：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/21.png?raw=true"></p><p>2.注册</p><p>与登录基本类似，前端Register.vue，并在index.js设置路由。详细代码可以看gitee。(这个后面和登录用了同样的方式美化了一下)</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/22.png?raw=true"><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/23.png?raw=true"></p><p>3.设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import request from &quot;@/utils/request&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Setting&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      form:&#123;&#125;,</span><br><span class="line">      input:&quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    let str=sessionStorage.getItem(&quot;user&quot;)||&quot;&#123;&#125;&quot;</span><br><span class="line">    this.form=JSON.parse(str)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClose()&#123;</span><br><span class="line">      this.$router.push(&#x27;/home&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    update()&#123;</span><br><span class="line">      request.put(&quot;api/user&quot;,this.form).then(res =&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        if(res.code == &#x27;200&#x27;)&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;success&quot;,</span><br><span class="line">            message:&quot;更新成功&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          sessionStorage.setItem(&quot;user&quot;,JSON.stringify(this.form))</span><br><span class="line">          this.$router.push(&#x27;/home&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type:&quot;error&quot;,</span><br><span class="line">            message:&quot;更新失败&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog v-model=&quot;form&quot; title=&quot;个人信息编辑&quot; width=&quot;500&quot; @close=&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户名&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.username&quot; disabled&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;密码&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.password&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;手机号&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.number&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;邮箱&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.email&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;this.$router.push(&#x27;/home&#x27;)&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;</span><br><span class="line">          确认</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这个是header.vue部分的设置，写这部分是新增了vue和路由实现的。这部分不难，是在element plus中找了表单，再写好script部分，获取的user信息就好了。后来优化这部分时补充handleClose方法点击叉号跳转&#x2F;home页面，使操作更加流畅。</p><p>4.健康问答</p><p>前端实现：<code>HomeView.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;chatbox&quot;&gt;</span><br><span class="line">      &lt;h2 class=&quot;title&quot;&gt;健康问答&lt;/h2&gt;</span><br><span class="line">      &lt;div class=&quot;messages&quot; ref=&quot;messageBox&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">            v-for=&quot;(message, index) in messages&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">            :class=&quot;&#123;&#x27;message-container&#x27;: true, &#x27;user-message&#x27;: message.sender === &#x27;User&#x27;, &#x27;bot-message&#x27;: message.sender !== &#x27;User&#x27;&#125;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-avatar class=&quot;message-avatar&quot; style=&quot;background-color: cornflowerblue;color: black&quot;&gt;&#123;&#123;message.sender === &#x27;User&#x27; ? &#x27;User&#x27; : &#x27;Bot&#x27;&#125;&#125;&lt;/el-avatar&gt;</span><br><span class="line">          &lt;div class=&quot;message-content&quot;&gt;&#123;&#123;message.text&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;input-section&quot;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            class=&quot;userinput&quot;</span><br><span class="line">            v-model=&quot;userInput&quot;</span><br><span class="line">            @keyup.enter=&quot;sendMessage&quot;</span><br><span class="line">            placeholder=&quot;输入：&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button</span><br><span class="line">            class=&quot;send&quot;</span><br><span class="line">            @click=&quot;sendMessage&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          发送</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      userInput: &#x27;&#x27;,</span><br><span class="line">      messages: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    async callAPIMethod(input) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const response = await axios.post(&#x27;http://localhost:9091/reply&#x27;, &#123; message: input &#125;);</span><br><span class="line">        return response.data;</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.error(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    async sendMessage() &#123;</span><br><span class="line">      this.messages.push(&#123;</span><br><span class="line">        sender: &#x27;User&#x27;,</span><br><span class="line">        text: this.userInput,</span><br><span class="line">      &#125;);</span><br><span class="line">      console.log(&quot;Ready to send message: &quot; + this.userInput);</span><br><span class="line">      const response = await this.callAPIMethod(this.userInput);</span><br><span class="line">      console.log(&quot;Received message: &quot; + response);</span><br><span class="line">      if(response) &#123;</span><br><span class="line">        this.messages.push(&#123;</span><br><span class="line">          sender: &#x27;Bot&#x27;,</span><br><span class="line">          text: response,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      this.$refs.messageBox.scrollTop = this.$refs.messageBox.scrollHeight;</span><br><span class="line"></span><br><span class="line">      this.userInput = &#x27;&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">//这部分太长了省略，详细看gitee代码</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>后端实现：<code>MessageController.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.example.demo.controller;</span><br><span class="line">import …</span><br><span class="line"></span><br><span class="line">class Message &#123;</span><br><span class="line">    private String message;</span><br><span class="line">    // getter</span><br><span class="line">    // setter</span><br><span class="line">&#125;</span><br><span class="line">@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</span><br><span class="line">@RestController</span><br><span class="line">public class MessageController &#123;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/reply&quot;)</span><br><span class="line">    public String reply(@RequestBody Message message) &#123;</span><br><span class="line">        Random rand = new Random();</span><br><span class="line">        String[] responses = &#123;&quot;保持健康~&quot;, &quot;锻炼身体！&quot;, &quot;饮食规律~&quot;&#125;;</span><br><span class="line">        if (&quot;你好&quot;.equals(message.getMessage())) &#123;</span><br><span class="line">            return &quot;你好&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (&quot;什么是亚健康管理系统&quot;.equals(message.getMessage())) &#123;</span><br><span class="line">            return &quot;这个亚健康管理系统是人工智能学院java小组开发的。包括主页，运动知识，健康购物，评估与建议，健康信息上传的功能&quot;;</span><br><span class="line">        &#125; </span><br><span class="line">//省略一些else if</span><br><span class="line">else &#123;</span><br><span class="line">            return responses[rand.nextInt(responses.length)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分本来我想连一个大语言模型的api，但是后来找不到适合的免费api，并且觉得如果是健康管理系统的话可能直接连一个大模型不太合适，要手动个性化设置一下，遂写了一些回复语代替，比较简洁，仅供演示。如果问”你好”和”什么是亚健康管理系统&quot;等会回复特定的话，问其他就在&quot;保持健康~&quot;,&quot;锻炼身体！&quot;, &quot;饮食规律~&quot;中随机回复一个。</p><p>最初是下面左图所示，右图是后来美化了一下。</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/24.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/25.png?raw=true"></p><p>5.一些其他的小细节</p><p>1）头部username显示</p><p>最初：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/26.png?raw=true"></p><p>改动后：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/27.png?raw=true"><br>显示具体的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #title&gt;</span><br><span class="line">    &lt;el-avatar style=&quot;background-color: cornflowerblue;color: black&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/el-avatar&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2）管理员和普通用户权限，管理员可以看到用户管理的页面，这里是在数据库增加了role(int类型，1表示管理员0表示普通用户),</p><p>在<code>Aside.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-menu-item index=&quot;7&quot; v-if=&quot;user.role===1&quot; @click=&quot;this.$router.push(&#x27;/user_manage&#x27;)&quot;&gt;</span><br><span class="line">  &lt;el-icon&gt;&lt;List /&gt;&lt;/el-icon&gt;</span><br><span class="line">  &lt;span&gt;用户管理&lt;/span&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br></pre></td></tr></table></figure><p><code>v-if=&quot;user.role===1&quot; </code>这样实现的</p><p>在<code>User_manage.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;角色&quot;&gt;</span><br><span class="line">    &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span v-if=&quot;scope.row.role===1&quot;&gt;管理员&lt;/span&gt;</span><br><span class="line">      &lt;span v-if=&quot;scope.row.role===0&quot;&gt;普通用户&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><p>实现两者的显示。</p><p>3）未登录状况下强制跳转登录（这里是对我负责的登录功能的优化）</p><p>在<code>index.js</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个 beforeEach 路由守卫,这里用于实现未登录情况下强制跳转/login</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // 检查 sessionStorage 中是否已经有 user</span><br><span class="line">  let user = sessionStorage.getItem(&#x27;user&#x27;);</span><br><span class="line"></span><br><span class="line">  // 如果没有 user 且访问的不是登录界面，那么强制跳转至登录页面</span><br><span class="line">  if (!user &amp;&amp; to.path !== &#x27;/login&#x27;&amp;&amp; to.path !== &#x27;/register&#x27;) &#123;</span><br><span class="line">    return next(&#123; path: &#x27;/login&#x27; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 否则就继续进行本次路由</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.sql文件的整理上传，详见gitee<br><a href="https://gitee.com/AIJavaGroup/project/blob/master/health_management.sql">health_management.sql</a></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/28.png?raw=true"></p><p>7.README，详见gitee<br><a href="https://gitee.com/AIJavaGroup/project/blob/master/README.md">README.md</a></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/29.png?raw=true"></p><p><strong>五.总结展望</strong></p><!-- 访问[Activity -Gitee](https://gitee.com/organizations/AIJavaGroup/events)可以看到我们自从创建组织后的各种活动（创建仓库，不断试错，一次次更新修复）。git clone https://gitee.com/AIJavaGroup/project.git后可以在本地IDE上看到更新记录及详细的文件变动信息。![](https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/30.png?raw=true)点击每个文件的git提交人可以看到每行代码的提交人及提交时间。![](https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/6.18/31.png?raw=true) --><p>这次作业前期准备断断续续用了快一个月，后面写项目差不多两周左右。使用多一点框架会在正式开发中快很多，但是想要知道怎么用还是要学不少知识的。我们每个人都写了前端后端，如果你看源码会发现4个人不同的代码风格。总的来说，这次大作业还是学到了很多东西，见证了项目一点点搭建起来，培养团队合作能力，也真的加强了自信”我们可以自己写原创项目”。</p><p>展望的话，我们以后可以实现更完整一点的项目，比如文件上传，更丰富的管理员功能，验证码，服务器部署等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  java专选的大作业，实验报告docx用pandoc转成了md。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【实验目的】&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;掌握Java与面向对象基本原理和概念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;掌握Java与面向对象编程思想和主流</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>W4terCTF2024 writeup</title>
    <link href="https://strangersinsist.github.io/2024/05/03/writeup/"/>
    <id>https://strangersinsist.github.io/2024/05/03/writeup/</id>
    <published>2024-05-03T06:39:16.405Z</published>
    <updated>2024-07-16T11:56:45.568Z</updated>
    
    <content type="html"><![CDATA[<p>纯小白，做出的题很少，只写一下非签到题的题解留个纪念 <del>以后可能觉得太傻会删掉</del><br><del>我知道图片很糊但就先这样吧</del></p><h5 id="Spam-2024"><a href="#Spam-2024" class="headerlink" title="Spam 2024"></a>Spam 2024</h5><p>先找垃圾邮件，搜了很多东西后找到<a href="https://www.spammimic.com/encode.cgi">spammimic - encoded</a>的链接（后面才发现去年的题解里面有这个链接，哭)，然后第一步解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a,01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2,0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22</span><br></pre></td></tr></table></figure><p>把数据扔给GPT，帮我分析前后是ACSII，中间是emoji的unicode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_ascii</span>(<span class="params">hex_string</span>):</span><br><span class="line">    bytes_object = <span class="built_in">bytes</span>.fromhex(hex_string)</span><br><span class="line">    ascii_string = bytes_object.decode(<span class="string">&quot;ASCII&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ascii_string</span><br><span class="line"></span><br><span class="line">hex_string1 = <span class="string">&quot;59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a&quot;</span></span><br><span class="line">hex_string1 = hex_string1.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string1)) </span><br><span class="line"></span><br><span class="line">hex_string2 = <span class="string">&quot;0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22&quot;</span></span><br><span class="line">hex_string2 = hex_string2.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string2)) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unicode_string =<span class="string">&quot;01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2&quot;</span></span><br><span class="line">unicode_list = unicode_string.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">emoji_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + uni, <span class="number">16</span>)) <span class="keyword">for</span> uni <span class="keyword">in</span> unicode_list)</span><br><span class="line"><span class="built_in">print</span>(emoji_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You like emojis, don&#x27;t you?</span><br><span class="line">Btw, the key is &quot;KEY&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😆🚰📂🌪☺🛩🌏📂🕹🦓🐅🍵🎈😀🔄🚫🎤🦓✅📮🎤🎅🍎🙃🌉🎃🍍🍴👣🚹🤣🐘🏹☺👣💧👣🦓🌿⌨🌪🌏🙃🍵❓☂🌉😆🏹🍵💧🎅👉🌊🚹🚪🍴😎🎃🌪🙃👁🥋👑💧🐘🎤🥋🐘🛩🤣🌉🛩⏩😍❓🐘😡☀😍🙃😁😀😁🚫📂✅☃🚫😎🔪👑😀🕹🚫😍🌪📂👌🍍👌🦓🖐🤣😎🏎🍍🏹🍌🍍🎤☀🏹🎈🚰💧☀✉🏹🍍🦓🎅🍴☂⏩🚪🐍☺🐘😇😡🍵🌏🦓🍵🛩📂👌🏹🗒🗒</span><br></pre></td></tr></table></figure><p>找到下面的工具：<br><a href="https://aghorler.github.io/emoji-aes/#decrypt">emoji-aes</a><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-3.png?raw=true" alt="alt text"><br>发现密钥的问题，试了KEY的unicode, ascii,等等，🔑的unicode，用KEY生成垃圾邮件，都失败了。<br>找到正确的密钥🔑。<br>解密结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x???? ⊕ dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=</span><br></pre></td></tr></table></figure><p>这个字符串应该是被异或操作过的结果，找到正确的16进制数与其进行异或就能得到原始信息。下面是暴力破解来找出可能的结果。<br>异或运算的一个特点是自反的，就是用同一个键进行两次异或操作就可以恢复原始信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):  <span class="comment"># 试验所有 0x0000 到 0xffff 的可能key</span></span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b ^ (xor_key &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;0x<span class="subst">&#123;xor_key:04x&#125;</span>: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>) </span><br></pre></td></tr></table></figure><p>第一次的代码有点问题，遍历输出只发现了一个很像的数据。<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-5.png?raw=true" alt="alt text"><br>分析了下奇数位和偶数位异或的值是不一样的，0x？？？？看得出来是个四位十六进制，这个奇数位看起来基本是对的。<br>改一下代码，然后一样遍历枚举，就找到flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line">xor_key_even = <span class="number">0xfe20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key_odd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):    </span><br><span class="line">    plain_text = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(cipher_text[i] ^ ((xor_key_odd <span class="keyword">if</span> i % <span class="number">2</span> <span class="keyword">else</span> xor_key_even) &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_text)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;key_odd: 0x<span class="subst">&#123;xor_key_odd:04x&#125;</span>, deciphered message: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-6.png?raw=true" alt="alt text"></p><h5 id="GZ-GPT"><a href="#GZ-GPT" class="headerlink" title="GZ GPT"></a>GZ GPT</h5><p>nc：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-7.png?raw=true" alt="alt text"><br>乱码解决方案：<a href="http://www.mytju.com/classcode/tools/messyCodeRecover.asp">乱码恢复</a><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-8.png?raw=true" alt="alt text"><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-9.png?raw=true" alt="alt text"><br>刚开始是一个个复制粘贴的，<del>后来发现只会BOT只会阿巴阿巴</del>，上pwntools</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">50338</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = conn.recv().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    gbk_data = data.encode(<span class="string">&#x27;gbk&#x27;</span>)   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的数据：&#123;data&#125;&quot;</span>)</span><br><span class="line">    conn.interactive()    </span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-10.png?raw=true" alt="alt text"><br>可恶，BOT只会阿巴阿巴。<br>看提示，应该是每次返回的有隐藏数据（想到去年的shadow，感觉这次输出光标也有奇怪的闪动）。<br>确定了下每次输出后都有隐藏信息，这题是考隐写的。<br>把终端输出复制过来看到vscode的提示：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/picture/5.3/image-12.png?raw=true" alt="alt text"></p><p>然后去查一下锁定类型：零宽度字符隐写，并找到工具<a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a>。<br>用笨蛋方法一句句复制粘贴上去解码的，把每次的Hidden Text粘贴上去就得到完整的flag了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;纯小白，做出的题很少，只写一下非签到题的题解留个纪念 &lt;del&gt;以后可能觉得太傻会删掉&lt;/del&gt;&lt;br&gt;&lt;del&gt;我知道图片很糊但就先这样吧&lt;/del&gt;&lt;/p&gt;
&lt;h5 id=&quot;Spam-2024&quot;&gt;&lt;a href=&quot;#Spam-2024&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://strangersinsist.github.io/2023/12/13/hello-world/"/>
    <id>https://strangersinsist.github.io/2023/12/13/hello-world/</id>
    <published>2023-12-13T14:04:00.148Z</published>
    <updated>2023-12-13T14:04:00.148Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
