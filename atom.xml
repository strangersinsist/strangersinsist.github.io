<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyh&#39;s blog</title>
  
  
  <link href="https://strangersinsist.github.io/atom.xml" rel="self"/>
  
  <link href="https://strangersinsist.github.io/"/>
  <updated>2024-05-03T07:23:01.580Z</updated>
  <id>https://strangersinsist.github.io/</id>
  
  <author>
    <name>zyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>W4terCTF2024 writeup</title>
    <link href="https://strangersinsist.github.io/2024/05/03/writeup/"/>
    <id>https://strangersinsist.github.io/2024/05/03/writeup/</id>
    <published>2024-05-03T06:39:16.405Z</published>
    <updated>2024-05-03T07:23:01.580Z</updated>
    
    <content type="html"><![CDATA[<p>纯小白，做出的题很少，只写一下非签到题的题解留个纪念 <del>以后可能觉得太傻会删掉</del><br><del>我知道图片很糊但就先这样吧</del></p><h5 id="Spam-2024"><a href="#Spam-2024" class="headerlink" title="Spam 2024"></a>Spam 2024</h5><p>先找垃圾邮件，搜了很多东西后找到<a href="https://www.spammimic.com/encode.cgi">spammimic - encoded</a>的链接（后面才发现去年的题解里面有这个链接，哭)，然后第一步解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a,01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2,0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22</span><br></pre></td></tr></table></figure><p>把数据扔给GPT，帮我分析前后是ACSII，中间是emoji的unicode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_ascii</span>(<span class="params">hex_string</span>):</span><br><span class="line">    bytes_object = <span class="built_in">bytes</span>.fromhex(hex_string)</span><br><span class="line">    ascii_string = bytes_object.decode(<span class="string">&quot;ASCII&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ascii_string</span><br><span class="line"></span><br><span class="line">hex_string1 = <span class="string">&quot;59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a&quot;</span></span><br><span class="line">hex_string1 = hex_string1.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string1)) </span><br><span class="line"></span><br><span class="line">hex_string2 = <span class="string">&quot;0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22&quot;</span></span><br><span class="line">hex_string2 = hex_string2.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string2)) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unicode_string =<span class="string">&quot;01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2&quot;</span></span><br><span class="line">unicode_list = unicode_string.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">emoji_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + uni, <span class="number">16</span>)) <span class="keyword">for</span> uni <span class="keyword">in</span> unicode_list)</span><br><span class="line"><span class="built_in">print</span>(emoji_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You like emojis, don&#x27;t you?</span><br><span class="line">Btw, the key is &quot;KEY&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😆🚰📂🌪☺🛩🌏📂🕹🦓🐅🍵🎈😀🔄🚫🎤🦓✅📮🎤🎅🍎🙃🌉🎃🍍🍴👣🚹🤣🐘🏹☺👣💧👣🦓🌿⌨🌪🌏🙃🍵❓☂🌉😆🏹🍵💧🎅👉🌊🚹🚪🍴😎🎃🌪🙃👁🥋👑💧🐘🎤🥋🐘🛩🤣🌉🛩⏩😍❓🐘😡☀😍🙃😁😀😁🚫📂✅☃🚫😎🔪👑😀🕹🚫😍🌪📂👌🍍👌🦓🖐🤣😎🏎🍍🏹🍌🍍🎤☀🏹🎈🚰💧☀✉🏹🍍🦓🎅🍴☂⏩🚪🐍☺🐘😇😡🍵🌏🦓🍵🛩📂👌🏹🗒🗒</span><br></pre></td></tr></table></figure><p>找到下面的工具：<br><a href="https://aghorler.github.io/emoji-aes/#decrypt">emoji-aes</a><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-3.png?raw=true" alt="alt text"><br>发现密钥的问题，试了KEY的unicode, ascii,等等，🔑的unicode，用KEY生成垃圾邮件，都失败了。<br>找到正确的密钥🔑。<br>解密结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x???? ⊕ dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=</span><br></pre></td></tr></table></figure><p>这个字符串应该是被异或操作过的结果，找到正确的16进制数与其进行异或就能得到原始信息。下面是暴力破解来找出可能的结果。<br>异或运算的一个特点是自反的，就是用同一个键进行两次异或操作就可以恢复原始信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):  <span class="comment"># 试验所有 0x0000 到 0xffff 的可能key</span></span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b ^ (xor_key &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;0x<span class="subst">&#123;xor_key:04x&#125;</span>: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>) </span><br></pre></td></tr></table></figure><p>第一次的代码有点问题，遍历输出只发现了一个很像的数据。<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-5.png?raw=true" alt="alt text"><br>分析了下奇数位和偶数位异或的值是不一样的，0x？？？？看得出来是个四位十六进制，这个奇数位看起来基本是对的。<br>改一下代码，然后一样遍历枚举，就找到flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line">xor_key_even = <span class="number">0xfe20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key_odd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):    </span><br><span class="line">    plain_text = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(cipher_text[i] ^ ((xor_key_odd <span class="keyword">if</span> i % <span class="number">2</span> <span class="keyword">else</span> xor_key_even) &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_text)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;key_odd: 0x<span class="subst">&#123;xor_key_odd:04x&#125;</span>, deciphered message: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-6.png?raw=true" alt="alt text"></p><h5 id="GZ-GPT"><a href="#GZ-GPT" class="headerlink" title="GZ GPT"></a>GZ GPT</h5><p>nc：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-7.png?raw=true" alt="alt text"><br>乱码解决方案：<a href="http://www.mytju.com/classcode/tools/messyCodeRecover.asp">乱码恢复</a><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-8.png?raw=true" alt="alt text"><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-9.png?raw=true" alt="alt text"><br>刚开始是一个个复制粘贴的，<del>后来发现只会BOT只会阿巴阿巴</del>，上pwntools</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">50338</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = conn.recv().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    gbk_data = data.encode(<span class="string">&#x27;gbk&#x27;</span>)   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;接收到的数据：&#123;data&#125;&quot;</span>)</span><br><span class="line">    conn.interactive()    </span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-10.png?raw=true" alt="alt text"><br>可恶，BOT只会阿巴阿巴。<br>看提示，应该是每次返回的有隐藏数据（想到去年的shadow，感觉这次输出光标也有奇怪的闪动）。<br>确定了下每次输出后都有隐藏信息，这题是考隐写的。<br>把终端输出复制过来看到vscode的提示：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/picture/image-12.png?raw=true" alt="alt text"></p><p>然后去查一下锁定类型：零宽度字符隐写，并找到工具<a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a>。<br>用笨蛋方法一句句复制粘贴上去解码的，把每次的Hidden Text粘贴上去就得到完整的flag了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;纯小白，做出的题很少，只写一下非签到题的题解留个纪念 &lt;del&gt;以后可能觉得太傻会删掉&lt;/del&gt;&lt;br&gt;&lt;del&gt;我知道图片很糊但就先这样吧&lt;/del&gt;&lt;/p&gt;
&lt;h5 id=&quot;Spam-2024&quot;&gt;&lt;a href=&quot;#Spam-2024&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://strangersinsist.github.io/2023/12/13/hello-world/"/>
    <id>https://strangersinsist.github.io/2023/12/13/hello-world/</id>
    <published>2023-12-13T14:04:00.148Z</published>
    <updated>2023-12-13T14:04:00.148Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
