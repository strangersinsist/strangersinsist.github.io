<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zyh&#39;s blog</title>
  
  
  <link href="https://strangersinsist.github.io/atom.xml" rel="self"/>
  
  <link href="https://strangersinsist.github.io/"/>
  <updated>2024-10-06T13:00:56.682Z</updated>
  <id>https://strangersinsist.github.io/</id>
  
  <author>
    <name>zyh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web开发知识储备</title>
    <link href="https://strangersinsist.github.io/2024/10/06/web%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%EF%BC%88%E5%B7%B2%E5%AE%8C%E6%88%90%EF%BC%89/"/>
    <id>https://strangersinsist.github.io/2024/10/06/web%E5%BC%80%E5%8F%91%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87%EF%BC%88%E5%B7%B2%E5%AE%8C%E6%88%90%EF%BC%89/</id>
    <published>2024-10-06T12:58:10.175Z</published>
    <updated>2024-10-06T13:00:56.682Z</updated>
    
    <content type="html"><![CDATA[<p>AI生成，很杂。</p><span id="more"></span><h1 id="前后端交互"><a href="#前后端交互" class="headerlink" title="前后端交互"></a>前后端交互</h1><p>前端和后端的交互是现代 Web 应用程序开发中的核心部分。通常，前端（用户界面）通过网络协议（如 HTTP&#x2F;HTTPS）向后端（服务器）发送请求，后端接收这些请求、处理数据并返回结果。这种交互可以通过多种方式实现，以下是常见的交互流程和技术：</p><h3 id="1-基本的前后端交互流程"><a href="#1-基本的前后端交互流程" class="headerlink" title="1. 基本的前后端交互流程"></a>1. 基本的前后端交互流程</h3><ol><li><strong>前端发起请求</strong>：用户在前端界面上执行操作（例如点击按钮、提交表单）。这些操作通常会通过 JavaScript 触发 HTTP 请求（GET、POST、PUT、DELETE 等）。</li><li><strong>后端处理请求</strong>：后端服务器收到请求后，会调用相应的控制器或服务逻辑来处理请求，进行数据库查询、业务逻辑处理等。</li><li><strong>后端返回响应</strong>：处理完请求后，后端将结果（通常是 JSON、XML 等格式的数据）作为 HTTP 响应返回给前端。</li><li><strong>前端处理响应</strong>：前端接收到后端返回的数据后，会更新用户界面（如展示数据、跳转页面、弹出提示信息等）。</li></ol><p><strong>Ajax</strong>（Asynchronous JavaScript and XML）和<strong>Fetch</strong>是 Web 开发中用于向服务器发送异步请求并接收数据的两种常见技术。它们允许网页在不刷新整个页面的情况下与服务器进行通信。这种异步通信方式提高了用户体验，并成为现代 Web 开发的关键技术之一。</p><h3 id="2-1-Ajax"><a href="#2-1-Ajax" class="headerlink" title="2.1.Ajax"></a>2.1.Ajax</h3><p><strong>Ajax</strong> 是一种在 JavaScript 中发起 HTTP 请求的技术。尽管名字中带有 XML，但实际上它可以使用任何格式进行数据传输（例如，JSON、HTML、纯文本等）。Ajax 的核心是 <code>XMLHttpRequest</code> 对象（XHR），这是一种原生的 JavaScript API。</p><h4 id="1-Ajax-的工作原理"><a href="#1-Ajax-的工作原理" class="headerlink" title="1. Ajax 的工作原理"></a>1. <strong>Ajax 的工作原理</strong></h4><p>Ajax 的基本工作流程如下：</p><ol><li><strong>浏览器事件触发</strong>：用户的某些操作（如按钮点击、表单提交等）会触发 JavaScript 代码。</li><li><strong>JavaScript 发起 HTTP 请求</strong>：使用 <code>XMLHttpRequest</code> 对象向服务器发送请求。</li><li><strong>服务器处理请求</strong>：服务器接收到请求后，执行相应的操作（如查询数据库、计算、返回数据等）。</li><li><strong>JavaScript 处理响应</strong>：当服务器返回数据后，JavaScript 会处理这个响应，更新页面的部分内容，而无需重新加载整个页面。</li></ol><h4 id="2-Ajax-请求示例"><a href="#2-Ajax-请求示例" class="headerlink" title="2. Ajax 请求示例"></a>2. <strong>Ajax 请求示例</strong></h4><p>以下是使用 <code>XMLHttpRequest</code> 发起 GET 请求并处理响应的一个简单例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建XMLHttpRequest对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化请求</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://api.example.com/data&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数，监听状态变化</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求成功，处理响应</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    <span class="comment">// 可以将JSON解析为对象</span></span><br><span class="line">    <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h4 id="3-Ajax-中常用的属性和方法"><a href="#3-Ajax-中常用的属性和方法" class="headerlink" title="3. Ajax 中常用的属性和方法"></a>3. <strong>Ajax 中常用的属性和方法</strong></h4><ul><li>**open (method, url, async)**：初始化请求。<code>method</code> 为 HTTP 方法（如 GET、POST），<code>url</code> 是请求的 URL，<code>async</code> 表示请求是否异步。</li><li>**send (data)**：发送请求。对于 GET 请求，<code>data</code> 通常为空；对于 POST 请求，<code>data</code> 可以是提交的数据。</li><li><strong>onreadystatechange</strong>：当 <code>readyState</code> 变化时触发的回调函数，<code>readyState</code> 表示请求的不同状态（例如，发送请求、接收响应等）。</li><li><strong>status</strong>：HTTP 状态码，<code>200</code> 表示请求成功。</li><li><strong>responseText</strong>：服务器返回的响应文本。</li></ul><h4 id="4-Ajax-中的状态码"><a href="#4-Ajax-中的状态码" class="headerlink" title="4. Ajax 中的状态码"></a>4. <strong>Ajax 中的状态码</strong></h4><ul><li><strong>readyState</strong>：表示 <code>XMLHttpRequest</code> 对象的状态。<ul><li><code>0</code>: 请求未初始化。</li><li><code>1</code>: 服务器连接已建立。</li><li><code>2</code>: 请求已接收。</li><li><code>3</code>: 请求处理中。</li><li><code>4</code>: 请求完成，且响应已准备好。</li></ul></li></ul><h4 id="5-Ajax-的优缺点"><a href="#5-Ajax-的优缺点" class="headerlink" title="5. Ajax 的优缺点"></a>5. <strong>Ajax 的优缺点</strong></h4><ul><li><strong>优点</strong>：<ul><li>页面无需刷新即可与服务器通信。</li><li>用户体验流畅、响应迅速。</li><li>灵活支持各种数据格式（JSON、XML、HTML、纯文本等）。</li></ul></li><li><strong>缺点</strong>：<ul><li>代码较为冗长，尤其是处理多个回调函数时，易出现嵌套和混乱。</li><li>异步处理逻辑可能导致“回调地狱”（Callback Hell）。</li></ul></li></ul><h3 id="2-2、Fetch"><a href="#2-2、Fetch" class="headerlink" title="2.2、Fetch"></a>2.2、Fetch</h3><p><strong>Fetch API</strong> 是现代 JavaScript 中的原生 API，用于发起 HTTP 请求，代替了传统的 <code>XMLHttpRequest</code>。相比于 Ajax，Fetch API 提供了更简单、灵活的语法，并基于 <code>Promise</code> 机制，简化了异步处理，避免了复杂的回调嵌套问题。</p><h4 id="1-Fetch-的工作原理"><a href="#1-Fetch-的工作原理" class="headerlink" title="1. Fetch 的工作原理"></a>1. <strong>Fetch 的工作原理</strong></h4><p>Fetch 的工作原理和 Ajax 类似，都是发起 HTTP 请求并处理服务器的响应。不过，Fetch API 使用 Promise，这意味着你可以轻松地链式处理异步操作并捕获错误。</p><h4 id="2-Fetch-请求示例"><a href="#2-Fetch-请求示例" class="headerlink" title="2. Fetch 请求示例"></a>2. <strong>Fetch 请求示例</strong></h4><p>以下是使用 <code>fetch</code> 发起 GET 请求的一个简单示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Network response was not ok&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>(); <span class="comment">// 将响应解析为JSON</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 处理成功的响应数据</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;There was a problem with the fetch operation:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="3-Fetch-API-的特点"><a href="#3-Fetch-API-的特点" class="headerlink" title="3. Fetch API 的特点"></a>3. <strong>Fetch API 的特点</strong></h4><ul><li><strong>Promise</strong>：<code>fetch</code> 基于 Promise，因此可以使用 <code>then()</code> 和 <code>catch()</code> 处理成功或失败的情况。这使得代码更简洁、易于阅读。</li><li><strong>响应处理</strong>：Fetch API 默认不直接返回响应数据，而是返回一个包含响应的 <code>Response</code> 对象。需要调用相应的解析方法（如 <code>json()</code>、<code>text()</code>、<code>blob()</code> 等）来提取数据。</li><li><strong>支持各种 HTTP 方法</strong>：可以通过 <code>fetch()</code> 的配置对象传递方法、请求头、主体数据等。</li></ul><h4 id="4-POST-请求示例"><a href="#4-POST-请求示例" class="headerlink" title="4. POST 请求示例"></a>4. <strong>POST 请求示例</strong></h4><p>发送 POST 请求时，可以通过 <code>fetch()</code> 的第二个参数配置请求方法和发送的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="5-常用属性和方法"><a href="#5-常用属性和方法" class="headerlink" title="5. 常用属性和方法"></a>5. <strong>常用属性和方法</strong></h4><ul><li>**fetch (url, [options])**：发起请求，<code>url</code> 为请求地址，<code>options</code> 为可选的配置对象（如 method、headers、body 等）。</li><li><strong>response. ok</strong>：布尔值，表示响应是否成功（状态码在 200-299 之间）。</li><li><strong>response. status</strong>：HTTP 状态码。</li><li>**response.json ()**：将响应体解析为 JSON 对象。</li><li>**response.text ()**：将响应体解析为纯文本。</li><li>**response.blob ()**：将响应体解析为二进制大对象（文件、图片等）。</li></ul><h4 id="6-Fetch-的优缺点"><a href="#6-Fetch-的优缺点" class="headerlink" title="6. Fetch 的优缺点"></a>6. <strong>Fetch 的优缺点</strong></h4><ul><li><strong>优点</strong>：<ul><li>更简洁的语法，基于 Promise，链式调用使代码更易读。</li><li>内置的错误处理机制，可以通过 <code>catch()</code> 轻松捕获错误。</li><li>默认支持 <code>CORS</code>（跨域资源共享）。</li></ul></li><li><strong>缺点</strong>：<ul><li>旧版浏览器不完全支持 Fetch，需要使用 Polyfill。</li><li><code>fetch</code> 不会在网络错误时自动抛出异常，比如 404 或 500 错误，开发者需要手动检查 <code>response.ok</code>。</li></ul></li></ul><h3 id="2-3、Ajax-和-Fetch"><a href="#2-3、Ajax-和-Fetch" class="headerlink" title="2.3、Ajax 和 Fetch"></a>2.3、Ajax 和 Fetch</h3><table><thead><tr><th>特性</th><th>Ajax (<code>XMLHttpRequest</code>)</th><th>Fetch</th></tr></thead><tbody><tr><td>请求方式</td><td>基于 <code>XMLHttpRequest</code> 对象</td><td>基于 <code>Promise</code></td></tr><tr><td>语法</td><td>相对复杂，回调较多</td><td>简洁、链式调用</td></tr><tr><td>支持的 HTTP 方法</td><td>GET, POST, PUT, DELETE 等</td><td>GET, POST, PUT, DELETE 等</td></tr><tr><td>数据格式支持</td><td>JSON, XML, HTML, 文本等</td><td>JSON, 文本, Blob 等</td></tr><tr><td>错误处理</td><td>状态码检查麻烦</td><td>使用 <code>catch()</code> 捕获错误</td></tr><tr><td>跨域支持</td><td>需要手动设置 CORS</td><td>默认支持 CORS</td></tr><tr><td>浏览器兼容性</td><td>兼容性好，几乎所有浏览器支持</td><td>部分老版本浏览器需要 Polyfill</td></tr></tbody></table><ul><li><strong>Ajax</strong> 是一种早期的异步请求方式，基于 <code>XMLHttpRequest</code>，可以灵活控制请求和响应，但代码复杂度较高，尤其在处理异步回调时容易陷入“回调地狱”。</li><li><strong>Fetch</strong> 是现代的替代方案，基于 Promise，提供了更加简洁的 API，使异步请求的处理更加直观和简化，广泛应用于现代 JavaScript 开发中。</li></ul><p>在新项目中，推荐使用 <code>Fetch</code> API 进行异步通信，因为它不仅语法更简洁，还具备更好的可读性和易维护性。</p><h3 id="3-跨域问题"><a href="#3-跨域问题" class="headerlink" title="3.跨域问题"></a>3.跨域问题</h3><p><strong>跨域问题</strong>是前后端分离架构中常见的一个问题。跨域（CORS，Cross-Origin Resource Sharing）是指浏览器出于安全性考虑，阻止网页从一个域（Origin）向另一个域发起请求。跨域请求的限制是浏览器的同源策略（Same-Origin Policy）导致的。为了确保用户信息的安全，浏览器默认会拦截不同源的 HTTP 请求，除非服务器明确允许跨域请求。</p><p>同源策略是 Web 浏览器的一个安全机制，要求页面的协议、域名、端口号都相同，才能相互访问资源。如果有任何一个不相同，就会被视为跨域。</p><p>同源策略具体限制的行为包括：</p><ul><li><strong>Cookie、LocalStorage 和 IndexedDB</strong> 不能被跨域访问。</li><li><strong>DOM</strong> 不能被跨域访问。</li><li><strong>AJAX 请求</strong> 不能发送或接收跨域资源。</li></ul><p>跨域问题出现的主要原因是浏览器的同源策略，当协议、域名或端口号不同的情况下，浏览器认为请求是跨域的，通常会拒绝执行。</p><p>例如，以下情况会被视为跨域请求：</p><ul><li><code>http://www.example.com</code> 向 <code>https://www.example.com</code> 发起请求（<strong>协议不同</strong>）。</li><li><code>http://www.example.com</code> 向 <code>http://api.example.com</code> 发起请求（<strong>域名不同</strong>）。</li><li><code>http://www.example.com:80</code> 向 <code>http://www.example.com:8080</code> 发起请求（<strong>端口不同</strong>）。</li></ul><p>跨域问题是前后端分离开发中常见的安全问题，浏览器出于安全考虑默认限制跨域请求。为了处理跨域问题，常见的解决方案包括：</p><ul><li><strong>CORS</strong>：标准的跨域解决方案，通过服务器设置 HTTP 头来允许跨域访问。</li><li><strong>JSONP</strong>：适用于 GET 请求的跨域方案，但存在一定安全隐患。</li><li><strong>服务器代理和 Nginx 反向代理</strong>：通过同源服务器转发请求，从而绕过浏览器的跨域限制。</li><li><strong>PostMessage</strong> 和 <strong>WebSocket</strong>：用于跨窗口通信和实时双向通信。</li></ul><p>在实际项目中，选择哪种跨域处理方式应根据具体场景和需求决定。对于大多数现代 Web 应用，CORS 是最常用且推荐的解决方案。</p><h4 id="1-CORS（跨域资源共享）"><a href="#1-CORS（跨域资源共享）" class="headerlink" title="1. CORS（跨域资源共享）"></a>1. <strong>CORS（跨域资源共享）</strong></h4><p>CORS 是解决跨域问题的标准方式。它允许服务器通过设置响应头来告诉浏览器，哪些域名可以访问资源。CORS 主要是通过在服务器端设置特殊的 HTTP 头来实现的。</p><h5 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h5><p>当浏览器发起跨域请求时，会在请求中携带一些特殊的 HTTP 头（如 <code>Origin</code>），服务器根据这些头信息决定是否允许该请求。如果服务器允许跨域访问，会在响应中设置相应的 CORS 头部信息，浏览器则根据这些信息决定是否允许前端代码访问资源。</p><h5 id="常见的-CORS-响应头："><a href="#常见的-CORS-响应头：" class="headerlink" title="常见的 CORS 响应头："></a>常见的 CORS 响应头：</h5><ul><li><strong>Access-Control-Allow-Origin</strong>：指定允许跨域请求的域名，例如 <code>*</code> 表示允许任何域名跨域请求，或者指定具体域名 <code>https://example.com</code>。</li><li><strong>Access-Control-Allow-Methods</strong>：指定允许的 HTTP 方法，如 <code>GET</code>、<code>POST</code>、<code>PUT</code> 等。</li><li><strong>Access-Control-Allow-Headers</strong>：指定允许的自定义请求头，如 <code>Content-Type</code>、<code>Authorization</code> 等。</li><li><strong>Access-Control-Allow-Credentials</strong>：表示是否允许发送凭据（如 Cookies、HTTP 认证信息）。</li></ul><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>https://example.com</span><br><span class="line"><span class="attribute">Access-Control-Allow-Methods</span><span class="punctuation">: </span>GET, POST</span><br><span class="line"><span class="attribute">Access-Control-Allow-Headers</span><span class="punctuation">: </span>Content-Type, Authorization</span><br><span class="line"><span class="attribute">Access-Control-Allow-Credentials</span><span class="punctuation">: </span>true</span><br></pre></td></tr></table></figure><p>在 Java 后端中，可以通过以下代码开启 CORS 支持：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Content-Type, Authorization&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Node. js 的 Express 中，可以通过 <code>cors</code> 中间件来启用跨域支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>(&#123;</span><br><span class="line">  <span class="attr">origin</span>: <span class="string">&#x27;https://example.com&#x27;</span>,  <span class="comment">// 允许指定的域名跨域</span></span><br><span class="line">  <span class="attr">methods</span>: [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>],  <span class="comment">// 允许的HTTP方法</span></span><br><span class="line">  <span class="attr">credentials</span>: <span class="literal">true</span>,  <span class="comment">// 允许携带cookie等凭据</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">json</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;Hello, world!&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h4 id="2-JSONP（JSON-with-Padding）"><a href="#2-JSONP（JSON-with-Padding）" class="headerlink" title="2. JSONP（JSON with Padding）"></a>2. <strong>JSONP（JSON with Padding）</strong></h4><p><strong>JSONP</strong> 是一种早期的跨域请求解决方案，主要用于 GET 请求。它通过在 HTML 中创建一个 <code>&lt;script&gt;</code> 标签来请求跨域资源，并使用回调函数处理返回的数据。因为 <code>&lt;script&gt;</code> 标签不受同源策略限制，所以可以用来跨域。</p><h5 id="JSONP-原理："><a href="#JSONP-原理：" class="headerlink" title="JSONP 原理："></a>JSONP 原理：</h5><ul><li>前端创建一个 <code>&lt;script&gt;</code> 标签，其 <code>src</code> 属性指向需要跨域的 URL，并附带一个回调函数的参数。</li><li>服务器将数据包裹在回调函数中，返回给浏览器，浏览器执行这段脚本，并调用回调函数处理数据。</li></ul><h5 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h5><p>前端代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleData</span>(<span class="params">response</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);  <span class="comment">// 处理跨域返回的数据</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  script.<span class="property">src</span> = <span class="string">&#x27;https://api.example.com/data?callback=handleData&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务器返回的数据格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleData</span>(&#123; <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span> &#125;);</span><br></pre></td></tr></table></figure><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>只能用于 GET 请求，无法处理 POST、PUT 等请求。</li><li>存在安全隐患，如果服务器返回了恶意代码，可能会对页面造成破坏。</li></ul><h4 id="3-服务器代理"><a href="#3-服务器代理" class="headerlink" title="3. 服务器代理"></a>3. <strong>服务器代理</strong></h4><p>使用<strong>服务器代理</strong>是一种常见的解决跨域请求的方法，尤其适用于开发环境。通过在同源服务器上创建一个代理，将前端的请求转发到目标服务器，这样在前端看来，所有请求都由同源服务器发起，避免了浏览器的跨域限制。</p><h5 id="工作原理：-1"><a href="#工作原理：-1" class="headerlink" title="工作原理："></a>工作原理：</h5><ul><li>前端向同源的代理服务器发起请求。</li><li>代理服务器将请求转发到目标服务器，并将响应结果返回给前端。</li><li>前端完全不知道这个过程，只看到了代理服务器的响应。</li></ul><h5 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h5><p>在 Node. js 中设置代理服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">&#x27;https://api.example.com&#x27;</span> + req.<span class="property">url</span>;</span><br><span class="line">  req.<span class="title function_">pipe</span>(<span class="title function_">request</span>(url)).<span class="title function_">pipe</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>在开发过程中，像 Vue. js、React 这样的框架也支持配置开发服务器代理。例如，在 Vue 项目中可以在 <code>vue.config.js</code> 中配置代理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.example.com&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-Nginx-反向代理"><a href="#4-Nginx-反向代理" class="headerlink" title="4. Nginx 反向代理"></a>4. <strong>Nginx 反向代理</strong></h4><p>如果项目部署在 Nginx 服务器上，可以通过 Nginx 的反向代理功能来处理跨域问题。通过配置 Nginx，将前端请求代理到后端服务器。</p><h5 id="Nginx-配置示例："><a href="#Nginx-配置示例：" class="headerlink" title="Nginx 配置示例："></a>Nginx 配置示例：</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://api.example.com/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-PostMessage"><a href="#5-PostMessage" class="headerlink" title="5. PostMessage"></a>5. <strong>PostMessage</strong></h4><p><strong>PostMessage</strong> 是一种用于跨窗口或跨域消息传递的 API。它允许不同窗口之间（包括 <code>iframe</code>）传递消息，从而可以通过中间的窗口进行数据传递。</p><h5 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h5><p>父窗口发送消息给 <code>iframe</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myIframe&#x27;</span>);</span><br><span class="line">iframe.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;Hello from parent&#x27;</span>, <span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>iframe</code> 接收消息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">origin</span> === <span class="string">&#x27;https://parent.com&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);  <span class="comment">// 处理来自父窗口的消息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="6-WebSockets"><a href="#6-WebSockets" class="headerlink" title="6. WebSockets"></a>6. <strong>WebSockets</strong></h4><p>WebSocket 是一种双向通信协议，客户端和服务器可以实时进行通信。WebSocket 并不受同源策略的限制，因此在跨域场景中可以作为一种替代方案。</p><h5 id="WebSocket-跨域示例："><a href="#WebSocket-跨域示例：" class="headerlink" title="WebSocket 跨域示例："></a>WebSocket 跨域示例：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个WebSocket连接</span></span><br><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;wss://api.example.com/socket&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket connection opened&#x27;</span>);</span><br><span class="line">  socket.<span class="property">send</span></span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;Hello Server&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message from server:&#x27;</span>, event.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><p><strong>前后端分离</strong>是一种软件架构设计模式，将 Web 应用程序的前端和后端分开，前端主要负责用户界面和用户体验，后端则负责业务逻辑、数据存储和服务器端的处理。前后端通过 API 接口进行通信。</p><h3 id="一、前后端分离的定义"><a href="#一、前后端分离的定义" class="headerlink" title="一、前后端分离的定义"></a>一、前后端分离的定义</h3><p>在前后端分离的架构中，前端和后端相互独立开发、部署，前端通过 API（通常是 REST 或 GraphQL）向后端发送请求，后端返回数据给前端，前端根据返回的数据进行渲染和处理。</p><ul><li><strong>前端</strong>：通常由 HTML、CSS 和 JavaScript 组成，通过框架（如 React、Vue、Angular 等）来构建动态的单页应用程序（SPA，Single Page Application）。</li><li><strong>后端</strong>：通常由服务器、数据库和应用程序逻辑组成，通过不同的语言或框架（如 Java、Node. js、Python、PHP、Go 等）来处理业务逻辑和数据存储。</li></ul><h3 id="二、前后端分离的优势"><a href="#二、前后端分离的优势" class="headerlink" title="二、前后端分离的优势"></a>二、前后端分离的优势</h3><ol><li><strong>开发效率提升</strong>：前后端可以并行开发，互不干扰。前端开发人员专注于界面、用户体验和客户端逻辑，后端开发人员专注于业务逻辑、数据处理和性能优化。</li><li><strong>技术栈独立</strong>：前端和后端可以使用不同的技术栈。例如，前端可以使用现代的 JavaScript 框架（如 React、Vue），后端可以使用 Python、Java、Node. js 等不同的技术来构建服务。</li><li><strong>提高可维护性</strong>：由于前端和后端是分离的，代码更加模块化，更容易维护和更新，减少耦合性。</li><li><strong>前后端分离的团队协作</strong>：在分离架构下，前端和后端团队有更清晰的职责分工，便于并行开发，减少了相互依赖的阻碍。</li><li><strong>灵活的部署策略</strong>：前后端分离后，前端应用可以独立部署在内容分发网络（CDN）上，而后端服务可以通过云服务或服务器集群部署。这样可以提升用户访问的速度和可靠性。</li></ol><h3 id="三、前后端分离的实现方式"><a href="#三、前后端分离的实现方式" class="headerlink" title="三、前后端分离的实现方式"></a>三、前后端分离的实现方式</h3><p>前后端分离的关键是<strong>API 接口的定义和通信</strong>。目前主流的通信方式有两种：</p><ol><li><p><strong>RESTful API</strong>：</p><ul><li><strong>定义</strong>：基于 HTTP 协议的一种架构风格，使用标准的 HTTP 方法（GET、POST、PUT、DELETE 等）来操作资源。API 通常返回 JSON 格式的数据。</li><li><strong>优点</strong>：轻量级、容易理解和实现，广泛应用于前后端分离的系统中。</li><li><strong>缺点</strong>：对于复杂的查询可能需要多次 API 调用，效率较低。</li></ul><p><strong>示例</strong>：</p><ul><li>前端请求：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/users&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure></li><li>后端响应：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;john.doe@example.com&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>GraphQL</strong>：</p><ul><li><strong>定义</strong>：一种查询语言，允许客户端指定需要的具体数据结构，避免了冗余数据的传输。</li><li><strong>优点</strong>：灵活、减少网络请求次数，客户端可以按需获取数据。</li><li><strong>缺点</strong>：较为复杂，特别是对于小型项目，学习和实现成本较高。</li></ul><p><strong>示例</strong>：</p><ul><li>前端请求：<figure class="highlight graphql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  user<span class="punctuation">(</span><span class="symbol">id</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">)</span> <span class="punctuation">&#123;</span></span><br><span class="line">    name</span><br><span class="line">    email</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>后端响应：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;john.doe@example.com&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="四、前后端分离的架构模式"><a href="#四、前后端分离的架构模式" class="headerlink" title="四、前后端分离的架构模式"></a>四、前后端分离的架构模式</h3><ol><li><p><strong>单页应用程序（SPA）</strong>：</p><ul><li><strong>定义</strong>：SPA 是一种通过 JavaScript 加载页面内容的 Web 应用程序，只需要加载一次 HTML 框架，后续的数据都通过 API 请求加载，不再刷新整个页面。</li><li><strong>优点</strong>：用户体验更流畅、响应速度快。</li><li><strong>缺点</strong>：初次加载时间较长，搜索引擎优化（SEO）相对较难。</li></ul><p>常见的 SPA 框架有：</p><ul><li><strong>React</strong>：由 Facebook 开发的组件化框架，使用虚拟 DOM 来提升性能。</li><li><strong>Vue. js</strong>：一个渐进式 JavaScript 框架，易于上手且灵活性高。</li><li><strong>Angular</strong>：由 Google 开发的前端框架，提供了完整的解决方案，包括路由、状态管理等。</li></ul></li><li><p><strong>多页应用程序（MPA）</strong>：</p><ul><li><strong>定义</strong>：传统的 Web 开发模式，每次请求都会加载一个新的 HTML 页面。</li><li><strong>优点</strong>：适合 SEO 和页面较为独立的应用。</li><li><strong>缺点</strong>：页面间的切换速度较慢，用户体验稍差。</li></ul></li><li><p><strong>后端渲染与前端交互的结合</strong>：</p><ul><li>有些项目会选择结合前后端渲染的方式，即后端负责初次页面的渲染，前端负责交互和后续的数据加载。这种模式可以兼顾 SEO 和用户体验。</li></ul></li></ol><h3 id="五、前后端分离的挑战"><a href="#五、前后端分离的挑战" class="headerlink" title="五、前后端分离的挑战"></a>五、前后端分离的挑战</h3><ol><li><p><strong>接口设计与文档管理</strong>：前后端分离后，接口成为了关键的沟通桥梁，如何设计清晰、易于理解和扩展的 API 接口以及完善的接口文档是一个重要的挑战。</p><ul><li>可以使用工具如 Swagger 或 Postman 来生成和管理 API 文档。</li></ul></li><li><p><strong>跨域问题</strong>：由于前后端可能运行在不同的域名或端口下，跨域请求会成为一个问题。通常使用 CORS（跨域资源共享）来解决。</p></li><li><p><strong>安全问题</strong>：前后端分离后，前端的代码可能会在客户端暴露出来，如何保护 API 接口的安全性（如认证、加密等）是一个需要重点考虑的问题。</p></li><li><p><strong>性能优化</strong>：前后端分离的架构下，前端和后端的交互会增加网络请求次数，因此需要考虑如何减少请求、使用缓存机制等优化性能。</p></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>前后端分离是一种提升开发效率、灵活性和可维护性的架构设计模式。通过明确的 API 接口，前后端开发可以并行进行，并且可以灵活选择技术栈和部署方式。在实现前后端分离时，开发团队需要关注接口设计、跨域、安全和性能等问题，以确保系统的稳定性和用户体验。</p><h1 id="node-js"><a href="#node-js" class="headerlink" title="node. js"></a>node. js</h1><p>Node. js 是一个基于 Chrome V 8 JavaScript 引擎的 JavaScript 运行时环境。它最初由 Ryan Dahl 于 2009 年创建，用于在服务器端运行 JavaScript，摆脱了 JavaScript 只能在浏览器中执行的局限。以下是 Node. js 的一些基础知识和关键概念：</p><h3 id="1-非阻塞-I-O-和事件驱动"><a href="#1-非阻塞-I-O-和事件驱动" class="headerlink" title="1. 非阻塞 I&#x2F;O 和事件驱动"></a>1. <strong>非阻塞 I&#x2F;O 和事件驱动</strong></h3><p>Node. js 最核心的概念之一是其非阻塞、事件驱动的架构。传统的服务器模型通常是同步的，当一个请求进来时，服务器会等待数据处理完成后才能继续处理下一个请求。而在 Node. js 中，使用异步非阻塞 I&#x2F;O（输入输出）操作，服务器可以处理多个请求，而不必等待每一个请求处理完成。这大大提高了并发处理能力。</p><ul><li><strong>非阻塞 I&#x2F;O</strong>：当 Node. js 执行 I&#x2F;O 操作（如文件读写、网络请求）时，不会阻塞主线程等待结果，而是通过回调函数处理操作完成后的结果。</li><li><strong>事件驱动</strong>：Node. js 使用事件循环来处理回调函数。事件循环是一个无限循环，等待事件触发并执行相应的回调函数。</li></ul><h3 id="2-单线程模型"><a href="#2-单线程模型" class="headerlink" title="2. 单线程模型"></a>2. <strong>单线程模型</strong></h3><p>尽管 Node. js 是单线程的，它可以通过事件循环和回调机制处理大量并发任务。其单线程模型与浏览器的 JavaScript 运行时环境相似，但与浏览器不同的是，Node. js 提供了服务器端的 I&#x2F;O API 来处理文件、网络请求等。</p><h3 id="3-NPM（Node-Package-Manager）"><a href="#3-NPM（Node-Package-Manager）" class="headerlink" title="3. NPM（Node Package Manager）"></a>3. <strong>NPM（Node Package Manager）</strong></h3><p>NPM 是 Node. js 的包管理器，允许开发者安装、共享、使用其他开发者创建的库和工具包。它是世界上最大的开源库之一。</p><ul><li><strong>安装包</strong>：使用 <code>npm install &lt;package_name&gt;</code> 命令可以安装依赖包。</li><li><strong>管理依赖</strong>：<code>package.json</code> 文件用于记录项目的依赖项和其他项目元信息，开发者可以在其中定义项目所需的包、脚本、版本等。</li></ul><h3 id="4-模块化系统"><a href="#4-模块化系统" class="headerlink" title="4. 模块化系统"></a>4. <strong>模块化系统</strong></h3><p>Node. js 使用 CommonJS 模块系统，允许开发者将代码分割成多个独立的模块。每个文件都是一个模块，通过 <code>require()</code> 函数可以引入其他模块。</p><ul><li><strong>导出模块</strong>：使用 <code>module.exports</code> 或 <code>exports</code> 来导出一个模块。</li><li><strong>导入模块</strong>：使用 <code>require()</code> 来导入其他模块。</li></ul><h3 id="5-内置模块"><a href="#5-内置模块" class="headerlink" title="5. 内置模块"></a>5. <strong>内置模块</strong></h3><p>Node. js 提供了一些强大的内置模块，用于处理文件系统、网络、HTTP、加密等操作。常见的内置模块有：</p><ul><li><code>fs</code>：文件系统模块，用于处理文件读写。</li><li><code>http</code>：用于创建 HTTP 服务器和处理 HTTP 请求。</li><li><code>path</code>：处理文件和目录路径的实用工具。</li><li><code>os</code>：操作系统相关的信息，比如内存、CPU、平台等。</li></ul><h3 id="6-异步编程"><a href="#6-异步编程" class="headerlink" title="6. 异步编程"></a>6. <strong>异步编程</strong></h3><p>Node. js 异步编程的核心是回调函数和基于回调的编程模型。然而，随着 JavaScript 语言的发展，Node. js 也支持了更现代的异步处理方式，比如：</p><ul><li><strong>回调函数</strong>：传统异步模式，常见于早期的 Node. js API。</li><li><strong>Promise</strong>：现代 JavaScript 中的异步模式，使用 <code>.then()</code> 和 <code>.catch()</code> 链式处理异步任务。</li><li><strong>async&#x2F;await</strong>：通过 <code>async</code> 和 <code>await</code> 关键字，允许开发者以更接近同步的方式编写异步代码，提高了可读性。</li></ul><h3 id="7-创建-HTTP-服务器"><a href="#7-创建-HTTP-服务器" class="headerlink" title="7. 创建 HTTP 服务器"></a>7. <strong>创建 HTTP 服务器</strong></h3><p>Node. js 常用于构建 HTTP 服务器。利用 <code>http</code> 模块，可以轻松地创建一个服务器并处理客户端请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">  res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;Hello World\n&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个简单的例子创建了一个 HTTP 服务器，监听端口 3000，并响应 “Hello World”。</p><h3 id="8-Express-框架"><a href="#8-Express-框架" class="headerlink" title="8. Express 框架"></a>8. <strong>Express 框架</strong></h3><p>尽管 Node. js 原生支持创建 HTTP 服务器，很多开发者会选择使用 <code>Express</code> 这样的轻量级框架来简化路由、请求处理等任务。Express 是一个基于 Node. js 的 Web 框架，非常适合用于快速构建 Web 应用和 API。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server running at http://localhost:3000/&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="9-文件系统操作"><a href="#9-文件系统操作" class="headerlink" title="9. 文件系统操作"></a>9. <strong>文件系统操作</strong></h3><p>Node. js 中的 <code>fs</code> 模块用于与文件系统交互，允许你读取、写入、删除文件等。</p><ul><li><strong>读取文件</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>写入文件</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;Hello, Node.js&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File has been written&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="10-环境变量与配置"><a href="#10-环境变量与配置" class="headerlink" title="10. 环境变量与配置"></a>10. <strong>环境变量与配置</strong></h3><p>为了在开发和生产环境中管理不同的配置，Node. js 支持通过环境变量来进行配置。常见的做法是使用 <code>.env</code> 文件存储环境变量，然后通过 <code>process.env</code> 来访问这些变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">env</span>.<span class="property">PORT</span>); <span class="comment">// 打印环境变量 PORT 的值</span></span><br></pre></td></tr></table></figure><h3 id="11-调试与错误处理"><a href="#11-调试与错误处理" class="headerlink" title="11. 调试与错误处理"></a>11. <strong>调试与错误处理</strong></h3><p>Node. js 提供了一些调试和错误处理的工具和方式。开发者可以通过 <code>console.log()</code> 进行简单的日志输出，或者使用内置的调试工具 <code>node inspect</code> 进行代码调试。同时，Node. js 也支持捕获全局未捕获的异常（<code>uncaughtException</code>），但更推荐的做法是使用 <code>try...catch</code> 捕获局部异常。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>Node. js 是一个强大的工具，适合用于构建高并发、I&#x2F;O 密集型的应用程序，如实时聊天、流媒体应用和 API 服务器等。通过其事件驱动、非阻塞 I&#x2F;O 模型，Node. js 可以处理大量的并发连接，同时还提供了丰富的内置模块和包管理器，使开发者能够快速搭建各种类型的应用。</p><h1 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h1><h3 id="1-MyBatis"><a href="#1-MyBatis" class="headerlink" title="1. MyBatis"></a>1. <strong>MyBatis</strong></h3><p><strong>MyBatis</strong> 是一个优秀的持久层框架，简化了 Java 应用程序对数据库的访问。它通过 XML 或注解将 SQL 语句与 Java 对象绑定，提供了灵活的 SQL 执行、参数传递和结果集映射等功能。</p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li><strong>灵活的 SQL 映射</strong>：可以直接编写原生 SQL，因此开发者有完全的控制权，适合复杂查询场景。</li><li><strong>自动映射结果集</strong>：将数据库查询的结果直接映射到 Java 对象，减少手动映射的工作量。</li><li><strong>动态 SQL 支持</strong>：支持通过 XML 配置动态生成 SQL，减少冗余代码。</li><li><strong>轻量级</strong>：相较于 Hibernate 等 ORM 框架，MyBatis 更轻量且灵活。</li></ul><h4 id="工作流程："><a href="#工作流程：" class="headerlink" title="工作流程："></a>工作流程：</h4><ol><li><strong>定义 SQL 映射文件</strong>：编写 SQL 查询语句，并通过映射文件（XML 或注解）将 SQL 与 Java 方法进行绑定。</li><li><strong>调用 SQL</strong>：通过接口或 Mapper 方法调用 SQL 查询，MyBatis 会自动执行并将结果映射到 Java 对象。</li></ol><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SQL映射文件（XML） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM users WHERE id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用Mapper方法</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findUserById(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="2-Lombok"><a href="#2-Lombok" class="headerlink" title="2. Lombok"></a>2. <strong>Lombok</strong></h3><p><strong>Lombok</strong> 是一个 Java 库，通过注解的方式简化了 Java 代码的开发，特别是减少了样板代码（如 getter&#x2F;setter、构造函数、toString 等）的编写。它通过在编译时生成相应的代码，从而使开发者的代码更加简洁和易读。</p><h4 id="常用注解："><a href="#常用注解：" class="headerlink" title="常用注解："></a>常用注解：</h4><ul><li><strong>@Getter &#x2F; @Setter</strong>：自动生成类的 getter 和 setter 方法。</li><li><strong>@ToString</strong>：自动生成 <code>toString()</code> 方法。</li><li><strong>@EqualsAndHashCode</strong>：自动生成 <code>equals()</code> 和 <code>hashCode()</code> 方法。</li><li><strong>@NoArgsConstructor &#x2F; @AllArgsConstructor</strong>：自动生成无参构造函数或全参构造函数。</li><li><strong>@Data</strong>：组合注解，包含了 <code>@Getter</code>、<code>@Setter</code>、<code>@ToString</code>、<code>@EqualsAndHashCode</code> 和 <code>@RequiredArgsConstructor</code>。</li></ul><h4 id="使用示例："><a href="#使用示例：" class="headerlink" title="使用示例："></a>使用示例：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，Lombok 会为 <code>User</code> 类自动生成 <code>getName()</code>、<code>setName()</code>、<code>getAge()</code>、<code>setAge()</code>、<code>toString()</code> 等方法。</p><h3 id="3-Maven"><a href="#3-Maven" class="headerlink" title="3. Maven"></a>3. <strong>Maven</strong></h3><p><strong>Maven</strong> 是一个 Java 项目的构建工具，主要用于项目管理和依赖管理。通过定义项目的 <code>pom.xml</code> 文件，Maven 可以自动下载所需的依赖库、编译代码、运行测试、生成报告、打包和发布项目。</p><h4 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h4><ul><li><strong>项目管理</strong>：Maven 定义了一套标准的项目结构和生命周期，规范了项目的构建过程。</li><li><strong>依赖管理</strong>：通过 <code>pom.xml</code> 文件定义项目所需的依赖，Maven 自动从中央仓库或其他指定仓库下载依赖库并处理版本冲突。</li><li><strong>构建和打包</strong>：Maven 支持将 Java 项目编译、测试并打包为 JAR、WAR 等格式。</li><li><strong>插件机制</strong>：Maven 具有丰富的插件系统，可以扩展其功能（如代码生成、测试覆盖率报告、部署等）。</li></ul><h4 id="Maven-项目结构："><a href="#Maven-项目结构：" class="headerlink" title="Maven 项目结构："></a>Maven 项目结构：</h4><ul><li><strong>src&#x2F;main&#x2F;java</strong>：Java 源代码目录。</li><li><strong>src&#x2F;main&#x2F;resources</strong>：资源文件目录（如配置文件、静态资源）。</li><li><strong>src&#x2F;test&#x2F;java</strong>：测试代码目录。</li><li><strong>pom. xml</strong>：Maven 配置文件，用于定义依赖、插件等。</li></ul><h4 id="示例（pom-xml-文件）："><a href="#示例（pom-xml-文件）：" class="headerlink" title="示例（pom.xml 文件）："></a>示例（<code>pom.xml</code> 文件）：</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个 <code>pom.xml</code> 文件定义了一个 Spring Boot Web 项目，并指定了相应的依赖。</p><h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><p><strong>Axios</strong> 是一个基于 <strong>Promise</strong> 的 <strong>HTTP 客户端</strong>，可以在 <strong>浏览器</strong> 和 <strong>Node. js</strong> 环境中使用。它用于发送 HTTP 请求，比如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等，并处理服务器的响应。Axios 可以简化 HTTP 请求的处理、错误的捕获、请求拦截器和响应拦截器等操作，是前端开发中非常流行的请求库之一。<br>开发者可以轻松地进行 HTTP 请求、处理异步操作、拦截请求和响应以及管理请求的生命周期。它不仅简化了 HTTP 请求的代码，还提供了丰富的配置和功能，广泛应用于 Vue. js、React 等现代 JavaScript 框架中。</p><h3 id="Axios-的特点"><a href="#Axios-的特点" class="headerlink" title="Axios 的特点"></a>Axios 的特点</h3><ol><li><p><strong>支持 Promise</strong>：Axios 是基于 Promise 设计的，所以与现代 JavaScript 中的异步操作非常兼容。</p></li><li><p><strong>支持浏览器和 Node. js 环境</strong>：不仅可以在前端浏览器中使用，也可以在服务端（Node. js）中运行。</p></li><li><p><strong>支持请求和响应拦截器</strong>：可以在请求或响应被处理之前，进行一些自定义逻辑处理，比如在每个请求中自动添加认证 token 或者统一处理错误响应。</p></li><li><p><strong>自动转换 JSON</strong>：Axios 会自动将响应数据解析为 JSON 格式，并且在请求中自动设置合适的请求头（<code>Content-Type: application/json</code>），让你更轻松地处理数据格式。</p></li><li><p><strong>支持取消请求</strong>：通过 <code>CancelToken</code>，你可以取消一个已经发出的请求，常用于防止重复请求或在用户离开页面时中止请求。</p></li><li><p><strong>防止 CSRF</strong>：Axios 提供了很方便的方式来发送跨站点请求伪造（CSRF）防护令牌。</p></li><li><p><strong>支持上传和下载进度事件</strong>：可以监听文件上传或下载的进度，方便文件传输的处理。</p></li></ol><h3 id="使用-Axios"><a href="#使用-Axios" class="headerlink" title="使用 Axios"></a>使用 Axios</h3><ol><li><p><strong>安装 Axios</strong>：</p><p>在项目中安装 Axios，可以通过 npm 或者在 HTML 中通过 CDN 引入。</p><p>使用 npm 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>在 HTML 中通过 CDN 引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>基本用法</strong>：</p><p>发送一个简单的 <code>GET</code> 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求成功的处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 请求失败的处理</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>发送一个 <code>POST</code> 请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p>**使用 <code>async/await</code>**：</p><p>结合现代 JavaScript 的 <code>async/await</code> 语法，代码会更加简洁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getPosts</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getPosts</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>发送带参数的请求</strong>：</p><p>使用 <code>GET</code> 请求带有查询参数的 API 调用，可以通过 <code>params</code> 来传递：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>发送自定义请求</strong>：</p><p>你可以自定义请求的所有参数，包括方法、URL、请求头、数据等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">userId</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><ol><li><p><strong>设置全局配置</strong>：</p><p>可以为 Axios 设置全局默认配置，比如默认的 API 基础 URL 或请求超时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span>;  <span class="comment">// 超时时间设置为 10 秒</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&#x27;Bearer token&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>请求和响应拦截器</strong>：</p><p>拦截器可以在请求发送前或响应返回前进行处理。常见的用法是添加认证 token 或者统一处理错误。</p><ul><li><p>请求拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">  <span class="comment">// 在发送请求之前做一些处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求发送前的处理&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理请求错误</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>响应拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应数据进行处理</span></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 对响应错误做一些处理</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;响应错误处理&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>取消请求</strong>：</p><p>在某些场景下，你可能需要取消已经发出的请求。比如用户切换页面时，你可以中止未完成的请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CancelToken</span> = axios.<span class="property">CancelToken</span>;</span><br><span class="line"><span class="keyword">let</span> cancel;</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/some-endpoint&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    cancel = c;  <span class="comment">// 保存取消函数</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line"><span class="title function_">cancel</span>(<span class="string">&#x27;请求被取消&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>上传和下载进度</strong>：</p><p>监听文件上传或下载的进度，可以使用 <code>onUploadProgress</code> 和 <code>onDownloadProgress</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;/upload&#x27;</span>, formData, &#123;</span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> percentCompleted = <span class="title class_">Math</span>.<span class="title function_">round</span>((progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / progressEvent.<span class="property">total</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(percentCompleted);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h3><ol><li><p><strong>处理 HTTP 错误</strong>：<br>可以在 <code>catch</code> 中捕获服务器返回的 HTTP 错误，并根据 <code>response.status</code> 做不同的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/some-endpoint&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">      <span class="comment">// 服务器返回的错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;服务器返回的错误:&#x27;</span>, error.<span class="property">response</span>.<span class="property">status</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">request</span>) &#123;</span><br><span class="line">      <span class="comment">// 请求已经发送，但是没有响应</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求发送后无响应:&#x27;</span>, error.<span class="property">request</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其它错误</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;其他错误:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong>超时错误</strong>：<br>如果设置了请求超时时间，可以通过 <code>error.code</code> 检测是否发生超时错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/some-endpoint&#x27;</span>, &#123; <span class="attr">timeout</span>: <span class="number">5000</span> &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">code</span> === <span class="string">&#x27;ECONNABORTED&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;请求超时&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;AI生成，很杂。&lt;/p&gt;</summary>
    
    
    
    <category term="web开发" scheme="https://strangersinsist.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="web" scheme="https://strangersinsist.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>web开发</title>
    <link href="https://strangersinsist.github.io/2024/10/06/web%E5%BC%80%E5%8F%91%EF%BC%88%E5%B7%B2%E5%AE%8C%E6%88%90%EF%BC%89/"/>
    <id>https://strangersinsist.github.io/2024/10/06/web%E5%BC%80%E5%8F%91%EF%BC%88%E5%B7%B2%E5%AE%8C%E6%88%90%EF%BC%89/</id>
    <published>2024-10-06T12:58:10.175Z</published>
    <updated>2024-10-06T13:00:51.228Z</updated>
    
    <content type="html"><![CDATA[<p>AI生成，很杂。</p><span id="more"></span><h1 id="vue-js"><a href="#vue-js" class="headerlink" title="vue. js"></a>vue. js</h1><p>Vue. js 是一个用于构建用户界面的渐进式 JavaScript 框架，它非常灵活，既可以用于开发单页面应用（SPA），也可以作为大型应用的组成部分。Vue 通过易于理解的模板语法和双向数据绑定，降低了前端开发的复杂度。以下是 Vue. js 的基础知识讲解：</p><h2 id="1-Vue-的核心概念"><a href="#1-Vue-的核心概念" class="headerlink" title="1. Vue 的核心概念"></a>1. <strong>Vue 的核心概念</strong></h2><h3 id="1-1-数据绑定"><a href="#1-1-数据绑定" class="headerlink" title="1.1 数据绑定"></a>1.1 数据绑定</h3><p>Vue 提供了一个直观的方式将数据绑定到 DOM 中。最常用的绑定方式是通过插值表达式 <code>&#123;&#123;&#125;&#125;</code> 或者 <code>v-bind</code> 指令：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的代码中，<code>message</code> 属性绑定到了 DOM 中的 <code>div</code> 标签，页面渲染时会显示 <code>Hello Vue!</code>。</p><h3 id="1-2-双向数据绑定"><a href="#1-2-双向数据绑定" class="headerlink" title="1.2 双向数据绑定"></a>1.2 双向数据绑定</h3><p>Vue 提供了 <code>v-model</code> 指令来实现表单元素的双向数据绑定。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当用户输入文字时，<code>message</code> 的值会实时更新并反映到页面上。</p><h3 id="1-3-计算属性"><a href="#1-3-计算属性" class="headerlink" title="1.3 计算属性"></a>1.3 计算属性</h3><p>当你需要基于已有数据生成新数据时，可以使用 <code>computed</code> 属性，它具有缓存特性，只有在依赖的数据发生变化时才会重新计算：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-4-事件监听"><a href="#1-4-事件监听" class="headerlink" title="1.4 事件监听"></a>1.4 事件监听</h3><p>使用 <code>v-on</code> 指令或缩写 <code>@</code> 来监听事件，并绑定到 Vue 方法上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHello&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;Hello Vue!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-Vue-的模板语法"><a href="#2-Vue-的模板语法" class="headerlink" title="2. Vue 的模板语法"></a>2. <strong>Vue 的模板语法</strong></h2><h3 id="2-1-条件渲染"><a href="#2-1-条件渲染" class="headerlink" title="2.1 条件渲染"></a>2.1 条件渲染</h3><p>使用 <code>v-if</code>, <code>v-else-if</code> 和 <code>v-else</code> 指令来条件性地渲染元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 <code>seen</code> 为 <code>true</code>，那么该段文字将显示；否则，DOM 中不会存在该元素。</p><h3 id="2-2-列表渲染"><a href="#2-2-列表渲染" class="headerlink" title="2.2 列表渲染"></a>2.2 列表渲染</h3><p>使用 <code>v-for</code> 渲染列表：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.text &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">items</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;Learn JavaScript&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;Learn Vue&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">text</span>: <span class="string">&#x27;Build something awesome&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-属性绑定"><a href="#2-3-属性绑定" class="headerlink" title="2.3 属性绑定"></a>2.3 属性绑定</h3><p>使用 <code>v-bind</code> 指令（或缩写 <code>:</code>）来动态绑定 HTML 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>Visit Vue.js<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>url</code> 的值发生改变时，链接地址会自动更新。</p><h2 id="3-Vue-实例"><a href="#3-Vue-实例" class="headerlink" title="3. Vue 实例"></a>3. <strong>Vue 实例</strong></h2><p>每个 Vue 应用都是通过创建一个新的 <code>Vue</code> 实例来启动的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Vue-实例的属性："><a href="#Vue-实例的属性：" class="headerlink" title="Vue 实例的属性："></a>Vue 实例的属性：</h3><ul><li><code>el</code>: 指定 Vue 实例控制的 DOM 元素。</li><li><code>data</code>: 定义 Vue 实例的数据属性。</li><li><code>methods</code>: 定义 Vue 实例的方法。</li><li><code>computed</code>: 定义 Vue 实例的计算属性。</li></ul><h2 id="4-组件"><a href="#4-组件" class="headerlink" title="4. 组件"></a>4. <strong>组件</strong></h2><p>组件是 Vue 的核心功能，用来构建可复用的 UI 片段。每个组件都是一个独立的 Vue 实例，可以嵌套和组合。</p><h3 id="4-1-创建组件"><a href="#4-1-创建组件" class="headerlink" title="4.1 创建组件"></a>4.1 创建组件</h3><p>使用 <code>Vue.component</code> 创建一个全局组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;todo-item&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;todo&#x27;</span>],</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;li&gt;&#123;&#123; todo.text &#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在模板中可以通过 <code>&lt;todo-item&gt;</code> 标签引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todoList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">:todo</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-组件之间的通信"><a href="#4-2-组件之间的通信" class="headerlink" title="4.2 组件之间的通信"></a>4.2 组件之间的通信</h3><ul><li>父组件通过 <code>props</code> 向子组件传递数据。</li><li>子组件通过 <code>$emit</code> 触发事件通知父组件。</li></ul><h2 id="5-指令"><a href="#5-指令" class="headerlink" title="5. 指令"></a>5. <strong>指令</strong></h2><p>Vue 内置了多个指令，用来处理常见的 DOM 操作：</p><h3 id="常用指令："><a href="#常用指令：" class="headerlink" title="常用指令："></a>常用指令：</h3><ul><li><code>v-if</code> &#x2F; <code>v-else-if</code> &#x2F; <code>v-else</code>: 条件渲染。</li><li><code>v-for</code>: 列表渲染。</li><li><code>v-show</code>: 显示&#x2F;隐藏元素（只是修改 <code>display</code> 属性）。</li><li><code>v-bind</code> (<code>:</code>): 绑定属性或表达式。</li><li><code>v-model</code>: 双向数据绑定。</li><li><code>v-on</code> (<code>@</code>): 事件监听。</li></ul><h2 id="6-Vue-Router"><a href="#6-Vue-Router" class="headerlink" title="6. Vue Router"></a>6. <strong>Vue Router</strong></h2><p>Vue Router 是官方的路由库，用于构建单页面应用（SPA）。它通过映射 URL 到组件，来动态加载和渲染不同的页面内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="7-Vuex"><a href="#7-Vuex" class="headerlink" title="7. Vuex"></a>7. <strong>Vuex</strong></h2><p>Vuex 是用于管理 Vue 应用的状态管理模式，特别适合多组件共享状态的场景：</p><ul><li><code>state</code>: 存放全局状态。</li><li><code>getters</code>: 从 state 中派生出数据。</li><li><code>mutations</code>: 修改 state 的唯一方法。</li><li><code>actions</code>: 类似于 mutation，但包含异步操作。</li></ul><h2 id="8-生命周期钩子"><a href="#8-生命周期钩子" class="headerlink" title="8. 生命周期钩子"></a>8. <strong>生命周期钩子</strong></h2><p>Vue 实例在创建和销毁时，会经历多个生命周期阶段。常用的钩子函数有：</p><ul><li><code>created</code>: 实例创建完成后调用。</li><li><code>mounted</code>: DOM 挂载完成后调用。</li><li><code>updated</code>: 数据更新完成后调用。</li><li><code>destroyed</code>: 实例销毁后调用。</li></ul><p>了解这些生命周期钩子有助于更好地管理 Vue 组件的行为。</p><h2 id="9-单文件组件"><a href="#9-单文件组件" class="headerlink" title="9. 单文件组件"></a>9. <strong>单文件组件</strong></h2><p>单文件组件（<code>.vue</code> 文件）将 HTML、JavaScript 和 CSS 集成到一个文件中，是 Vue 中开发组件的标准方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello Single File Component!&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">div &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><p>Spring Boot 是基于 Spring 框架的简化开发工具，旨在快速构建和部署生产级别的 Spring 应用。它通过简化配置、内嵌服务器和自动化配置机制，让开发者专注于业务逻辑，而不需要关注复杂的 XML 配置。以下是 Spring Boot 的基础知识讲解：</p><h2 id="1-Spring-Boot-的核心概念"><a href="#1-Spring-Boot-的核心概念" class="headerlink" title="1. Spring Boot 的核心概念"></a>1. <strong>Spring Boot 的核心概念</strong></h2><h3 id="1-1-自动配置（Auto-Configuration）"><a href="#1-1-自动配置（Auto-Configuration）" class="headerlink" title="1.1 自动配置（Auto-Configuration）"></a>1.1 自动配置（Auto-Configuration）</h3><p>Spring Boot 的核心理念之一是 <strong>自动配置</strong>，它基于 Spring 框架提供的 <code>@Configuration</code> 注解，并且依赖于条件性注解（如 <code>@Conditional</code>），能够根据项目依赖自动配置合适的 Spring Bean，省去大量的手工配置工作。</p><p>例如，当你在项目中添加 <code>spring-boot-starter-web</code> 依赖时，Spring Boot 会自动配置一个内嵌的 Tomcat 服务器、Spring MVC 组件等。</p><h3 id="1-2-Starter-依赖"><a href="#1-2-Starter-依赖" class="headerlink" title="1.2 Starter 依赖"></a>1.2 Starter 依赖</h3><p>Spring Boot 提供了多种 <strong>Starter 依赖</strong> 来简化项目构建。常见的 Starter 有：</p><ul><li><code>spring-boot-starter-web</code>：用于构建 Web 应用（包含 Tomcat、Spring MVC）</li><li><code>spring-boot-starter-data-jpa</code>：用于集成 JPA 和数据库操作：java 标准的对象-关系映射（ORM）工具</li><li><code>spring-boot-starter-test</code>：包含常用的测试库（JUnit、Mockito）</li></ul><p>通过使用这些 Starter 依赖，开发者可以快速引入 Spring Boot 生态中常用的功能，而不需要一个个手动添加依赖。</p><h3 id="1-3-内嵌服务器"><a href="#1-3-内嵌服务器" class="headerlink" title="1.3 内嵌服务器"></a>1.3 内嵌服务器</h3><p>Spring Boot 内置了多种常见的服务器（如 Tomcat、Jetty 和 Undertow），默认使用 Tomcat。它允许应用打包成 <strong>JAR 文件</strong>（而不是传统的 WAR 文件）并直接运行，极大地简化了部署流程。</p><h3 id="1-4-Spring-Boot-Actuator"><a href="#1-4-Spring-Boot-Actuator" class="headerlink" title="1.4 Spring Boot Actuator"></a>1.4 Spring Boot Actuator</h3><p>Spring Boot 提供了 Actuator 监控工具，可以用来检查和管理应用的健康状况和性能。通过 <code>spring-boot-starter-actuator</code> 依赖，能够查看应用运行时的一些指标（如健康检查、线程状态、环境属性等）。</p><h2 id="2-Spring-Boot-的项目结构"><a href="#2-Spring-Boot-的项目结构" class="headerlink" title="2. Spring Boot 的项目结构"></a>2. <strong>Spring Boot 的项目结构</strong></h2><p>创建的标准 Spring Boot 项目通常具有以下目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my-springboot-project</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── java</span><br><span class="line">│   │   │   └── com.example.demo       # Java 源文件</span><br><span class="line">│   │   │       └── DemoApplication.java</span><br><span class="line">│   │   ├── resources</span><br><span class="line">│   │       ├── application.properties  # Spring Boot 配置文件</span><br><span class="line">│   │       └── static                  # 静态资源（如 HTML, CSS）</span><br><span class="line">│   │       └── templates               # Thymeleaf 模板文件夹</span><br><span class="line">│   └── test                            # 测试文件夹</span><br><span class="line">└── pom.xml                              # Maven 项目配置文件</span><br></pre></td></tr></table></figure><h3 id="2-1-DemoApplication-java"><a href="#2-1-DemoApplication-java" class="headerlink" title="2.1 DemoApplication.java"></a>2.1 <code>DemoApplication.java</code></h3><p>Spring Boot 项目的主类通常放在 <code>src/main/java</code> 目录下，它是 Spring Boot 应用的入口点。常见的主类格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主类使用了 <code>@SpringBootApplication</code> 注解，它是以下三个注解的组合：</p><ul><li><code>@Configuration</code>: 标识该类是一个 Spring 配置类。</li><li><code>@EnableAutoConfiguration</code>: 启用 Spring Boot 的自动配置机制。</li><li><code>@ComponentScan</code>: 启动组件扫描，从而发现和注册 Spring Bean。</li></ul><h2 id="3-创建-Spring-Boot-项目"><a href="#3-创建-Spring-Boot-项目" class="headerlink" title="3. 创建 Spring Boot 项目"></a>3. <strong>创建 Spring Boot 项目</strong></h2><h3 id="3-1-使用-Spring-Initializr-创建项目"><a href="#3-1-使用-Spring-Initializr-创建项目" class="headerlink" title="3.1 使用 Spring Initializr 创建项目"></a>3.1 使用 Spring Initializr 创建项目</h3><p>Spring Initializr 是官方提供的项目生成器工具，访问 <a href="https://start.spring.io/">Spring Initializr</a> 你可以在线生成 Spring Boot 项目。</p><ol><li><p>打开 <a href="https://start.spring.io/">Spring Initializr</a>。</p></li><li><p>配置以下选项：</p><ul><li><strong>Project</strong>: 选择 <code>Maven Project</code> 或 <code>Gradle Project</code>。</li><li><strong>Language</strong>: 选择 <code>Java</code>。</li><li><strong>Spring Boot Version</strong>: 选择 <code>2.x</code> 或 <code>3.x</code> 版本。</li><li><strong>Project Metadata</strong>: 配置项目的基本信息（如 <code>Group</code>、<code>Artifact</code>）。</li><li><strong>Dependencies</strong>: 添加所需的依赖（如 <code>Spring Web</code>、<code>Spring Data JPA</code>、<code>MySQL Driver</code>）。</li></ul></li><li><p>点击 <strong>Generate</strong> 按钮，下载生成的项目 ZIP 文件，解压并导入到 IDE 中。</p></li></ol><h3 id="3-2-使用-IDE-创建-Spring-Boot-项目"><a href="#3-2-使用-IDE-创建-Spring-Boot-项目" class="headerlink" title="3.2 使用 IDE 创建 Spring Boot 项目"></a>3.2 使用 IDE 创建 Spring Boot 项目</h3><p>常用的 IDE（如 IntelliJ IDEA、Eclipse）中都有创建 Spring Boot 项目的集成工具，使用这些工具可以快速创建和配置 Spring Boot 项目。</p><h2 id="4-Spring-Boot-的配置"><a href="#4-Spring-Boot-的配置" class="headerlink" title="4. Spring Boot 的配置"></a>4. <strong>Spring Boot 的配置</strong></h2><p>Spring Boot 使用 <strong><code>application.properties</code></strong> 或 <strong><code>application.yml</code></strong> 文件来进行配置。以下是常见的配置项：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置服务器端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置数据库</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/testdb</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置 JPA</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="attr">logging.level.org.springframework</span>=<span class="string">INFO</span></span><br></pre></td></tr></table></figure><h3 id="application-yml-格式："><a href="#application-yml-格式：" class="headerlink" title="application.yml 格式："></a><code>application.yml</code> 格式：</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/testdb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework:</span> <span class="string">INFO</span></span><br></pre></td></tr></table></figure><h2 id="5-常用注解"><a href="#5-常用注解" class="headerlink" title="5. 常用注解"></a>5. <strong>常用注解</strong></h2><h3 id="5-1-Spring-Boot-核心注解"><a href="#5-1-Spring-Boot-核心注解" class="headerlink" title="5.1 Spring Boot 核心注解"></a>5.1 Spring Boot 核心注解</h3><ul><li><code>@SpringBootApplication</code>：标识 Spring Boot 启动类，是配置和组件扫描的入口。</li><li><code>@RestController</code>：组合了 <code>@Controller</code> 和 <code>@ResponseBody</code>，用于定义 RESTful 控制器。</li><li><code>@RequestMapping</code>：定义请求映射，可以用于类或方法上。</li><li><code>@GetMapping</code> &#x2F; <code>@PostMapping</code>：简化的 GET &#x2F; POST 请求映射注解。</li><li><code>@Autowired</code>：自动注入 Bean。</li></ul><h3 id="5-2-数据访问相关注解"><a href="#5-2-数据访问相关注解" class="headerlink" title="5.2 数据访问相关注解"></a>5.2 数据访问相关注解</h3><ul><li><code>@Entity</code>：标识 JPA 实体类。</li><li><code>@Table</code>：定义数据库表名。</li><li><code>@Id</code>：标识主键。</li><li><code>@Repository</code>：标识数据访问层组件。</li></ul><h3 id="5-3-事务管理注解"><a href="#5-3-事务管理注解" class="headerlink" title="5.3 事务管理注解"></a>5.3 事务管理注解</h3><ul><li><code>@Transactional</code>：定义事务性操作，确保数据一致性。</li></ul><h2 id="6-Spring-Boot-的-Web-开发"><a href="#6-Spring-Boot-的-Web-开发" class="headerlink" title="6. Spring Boot 的 Web 开发"></a>6. <strong>Spring Boot 的 Web 开发</strong></h2><h3 id="6-1-创建一个简单的-RESTful-API"><a href="#6-1-创建一个简单的-RESTful-API" class="headerlink" title="6.1 创建一个简单的 RESTful API"></a>6.1 创建一个简单的 RESTful API</h3><p>使用 Spring Boot 创建一个简单的 RESTful API 只需要几个步骤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动应用后，访问 <code>http://localhost:8080/api/hello</code>，你会看到 <code>Hello Spring Boot!</code> 的返回内容。</p><h3 id="6-2-创建一个简单的服务层（Service）"><a href="#6-2-创建一个简单的服务层（Service）" class="headerlink" title="6.2 创建一个简单的服务层（Service）"></a>6.2 创建一个简单的服务层（Service）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-创建一个简单的控制器层（Controller）调用服务层"><a href="#6-3-创建一个简单的控制器层（Controller）调用服务层" class="headerlink" title="6.3 创建一个简单的控制器层（Controller）调用服务层"></a>6.3 创建一个简单的控制器层（Controller）调用服务层</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUserName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Spring-Boot-数据库操作"><a href="#7-Spring-Boot-数据库操作" class="headerlink" title="7. Spring Boot 数据库操作"></a>7. <strong>Spring Boot 数据库操作</strong></h2><h3 id="7-1-使用-Spring-Data-JPA"><a href="#7-1-使用-Spring-Data-JPA" class="headerlink" title="7.1 使用 Spring Data JPA"></a>7.1 使用 Spring Data JPA</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过简单定义 <code>UserRepository</code> 接口，Spring Data JPA 会自动生成常用的数据操作方法（如 <code>findAll</code>、<code>save</code>、<code>deleteById</code>）。</p><h2 id="8-Spring-Boot-测试"><a href="#8-Spring-Boot-测试" class="headerlink" title="8. Spring Boot 测试"></a>8. <strong>Spring Boot 测试</strong></h2><p>Spring Boot 提供了集成测试功能，使用 <code>@SpringBootTest</code> 注解可以方便地进行单元测试和集成测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 测试 Spring 上下文加载</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-部署-Spring-Boot-应用"><a href="#9-部署-Spring-Boot-应用" class="headerlink" title="9. 部署 Spring Boot 应用"></a>9. <strong>部署 Spring Boot 应用</strong></h2><ul><li><p><strong>打包项目</strong>：</p><p>使用以下命令将项目打包成 JAR 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure></li><li><p><strong>运行 JAR 文件</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/my-springboot-project.jar</span><br></pre></td></tr></table></figure></li></ul><p>希望这些基础内容能帮助你快速理解和上手 Spring Boot！</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p>下面是一个简单的 <code>Vue + Spring Boot</code> 的 Demo，演示前后端分离开发，通过 Vue 作为前端框架和 Spring Boot 作为后端提供 RESTful API，前端请求后端数据并显示在页面上。</p><h3 id="1-创建-Spring-Boot-后端项目"><a href="#1-创建-Spring-Boot-后端项目" class="headerlink" title="1. 创建 Spring Boot 后端项目"></a>1. <strong>创建 Spring Boot 后端项目</strong></h3><h4 id="1-1-创建-Spring-Boot-项目"><a href="#1-1-创建-Spring-Boot-项目" class="headerlink" title="1.1 创建 Spring Boot 项目"></a>1.1 创建 Spring Boot 项目</h4><ol><li><p>访问 <a href="https://start.spring.io/">Spring Initializr</a>，选择以下配置：</p><ul><li><strong>Project</strong>: <code>Maven Project</code></li><li><strong>Language</strong>: <code>Java</code></li><li><strong>Spring Boot Version</strong>: 最新版本（例如 <code>3.x</code> 或 <code>2.7.x</code>）</li><li><strong>Group</strong>: <code>com.example</code></li><li><strong>Artifact</strong>: <code>springboot-vue-demo</code></li><li><strong>Dependencies</strong>:<ul><li><strong>Spring Web</strong>: 提供 RESTful API 支持</li><li><strong>Spring Data JPA</strong>: 数据持久化层支持</li><li><strong>H 2 Database</strong>: 内存数据库（用于开发和测试）</li><li><strong>Lombok</strong>: 简化实体类的开发</li></ul></li></ul></li><li><p>点击 <strong>Generate</strong> 按钮下载项目并解压。</p></li><li><p>在 IDE 中（如 IntelliJ IDEA 或 Eclipse）导入项目。</p></li></ol><h4 id="1-2-配置-Spring-Boot-应用"><a href="#1-2-配置-Spring-Boot-应用" class="headerlink" title="1.2 配置 Spring Boot 应用"></a>1.2 配置 Spring Boot 应用</h4><ol><li>在 <code>src/main/resources/application.properties</code> 中添加以下配置：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 H2 数据库</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:h2:mem:testdb</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">org.h2.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">sa</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">password</span></span><br><span class="line"><span class="attr">spring.h2.console.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># JPA 配置</span></span><br><span class="line"><span class="attr">spring.jpa.show-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.jpa.hibernate.ddl-auto</span>=<span class="string">update</span></span><br></pre></td></tr></table></figure><h4 id="1-3-创建后端实体类、仓库和控制器"><a href="#1-3-创建后端实体类、仓库和控制器" class="headerlink" title="1.3 创建后端实体类、仓库和控制器"></a>1.3 创建后端实体类、仓库和控制器</h4><ol><li><strong>创建实体类 <code>User</code></strong></li></ol><p>在 <code>src/main/java/com/example/springbootvuedemo/entity/User.java</code> 中创建一个简单的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvuedemo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.GeneratedValue;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.GenerationType;</span><br><span class="line"><span class="keyword">import</span> jakarta.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建仓库接口 <code>UserRepository</code></strong></li></ol><p>在 <code>src/main/java/com/example/springbootvuedemo/repository/UserRepository.java</code> 中创建一个 JPA 仓库接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvuedemo.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springbootvuedemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建 RESTful 控制器 <code>UserController</code></strong></li></ol><p>在 <code>src/main/java/com/example/springbootvuedemo/controller/UserController.java</code> 中创建控制器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvuedemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springbootvuedemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootvuedemo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">// 允许跨域请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>初始化数据</strong></li></ol><p>在 <code>src/main/java/com/example/springbootvuedemo/DemoApplication.java</code> 的启动类中添加初始化数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootvuedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springbootvuedemo.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.example.springbootvuedemo.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 初始化一些测试数据</span></span><br><span class="line">        userRepository.save(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;John Doe&quot;</span>, <span class="string">&quot;john.doe@example.com&quot;</span>));</span><br><span class="line">        userRepository.save(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>, <span class="string">&quot;Jane Roe&quot;</span>, <span class="string">&quot;jane.roe@example.com&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-启动后端服务"><a href="#1-4-启动后端服务" class="headerlink" title="1.4 启动后端服务"></a>1.4 启动后端服务</h4><p>启动 Spring Boot 项目（运行 <code>DemoApplication</code>），后端服务会监听在 <code>http://localhost:8080</code>，并且提供以下 RESTful API：</p><ul><li><code>GET http://localhost:8080/api/users</code>：获取所有用户列表</li><li><code>POST http://localhost:8080/api/users</code>：添加新用户</li></ul><h3 id="2-创建-Vue-前端项目"><a href="#2-创建-Vue-前端项目" class="headerlink" title="2. 创建 Vue 前端项目"></a>2. <strong>创建 Vue 前端项目</strong></h3><h4 id="2-1-使用-Vue-CLI-创建项目"><a href="#2-1-使用-Vue-CLI-创建项目" class="headerlink" title="2.1 使用 Vue CLI 创建项目"></a>2.1 使用 Vue CLI 创建项目</h4><ol><li><p>确保已经安装了 Vue CLI（如果没有安装，可以使用 <code>npm install -g @vue/cli</code> 安装）。</p></li><li><p>在终端中执行以下命令创建 Vue 项目：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-frontend</span><br></pre></td></tr></table></figure><ol start="3"><li><p>选择 <code>Default ([Vue 2] babel, eslint)</code> 或 <code>Vue 3</code>，然后等待项目创建完成。</p></li><li><p>进入项目目录并启动 Vue 开发服务器：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-frontend</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="2-2-修改-Vue-项目结构"><a href="#2-2-修改-Vue-项目结构" class="headerlink" title="2.2 修改 Vue 项目结构"></a>2.2 修改 Vue 项目结构</h4><ol><li>在 <code>src</code> 目录中创建一个新的组件文件 <code>UserList.vue</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;User List&lt;/h1&gt;</span><br><span class="line">    &lt;table border=&quot;1&quot;&gt;</span><br><span class="line">      &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">      &lt;tr v-for=&quot;user in users&quot; :key=&quot;user.id&quot;&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;&#123;&#123; user.email &#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      users: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.getUsers();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    async getUsers() &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const response = await axios.get(&#x27;http://localhost:8080/api/users&#x27;);</span><br><span class="line">        this.users = response.data;</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.error(&quot;There was an error!&quot;, error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">table &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  border-collapse: collapse;</span><br><span class="line">&#125;</span><br><span class="line">th, td &#123;</span><br><span class="line">  padding: 8px;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>src/App.vue</code> 文件，将组件引入并使用：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;UserList /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import UserList from &#x27;./components/UserList.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    UserList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 <code>axios</code> 依赖（用于 HTTP 请求）：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><h4 id="2-3-运行并测试前后端"><a href="#2-3-运行并测试前后端" class="headerlink" title="2.3 运行并测试前后端"></a>2.3 运行并测试前后端</h4><ol><li>启动 Vue 开发服务器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><ol start="2"><li>启动 Spring Boot 后端服务器：</li></ol><p>访问 <code>http://localhost:8080/api/users</code> 查看后端数据。</p><ol start="3"><li>在浏览器中访问 <code>http://localhost:8081</code>，前端页面会展示所有用户信息。</li></ol><h3 id="3-实现跨域访问"><a href="#3-实现跨域访问" class="headerlink" title="3. 实现跨域访问"></a>3. <strong>实现跨域访问</strong></h3><p>由于前后端分离，Vue 前端会遇到跨域问题。为了解决跨域问题，可以在 Spring Boot 控制器类上添加 <code>@CrossOrigin</code> 注解，也可以在 <code>application.properties</code> 中添加以下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许所有来源访问后端 API</span></span><br><span class="line"><span class="attr">spring.mvc.cors.allowed-origins</span>=<span class="string">*</span></span><br></pre></td></tr></table></figure><p>这样，Vue 前端和 Spring Boot 后端就可以无障碍地通信了。</p><h3 id="4-项目运行效果"><a href="#4-项目运行效果" class="headerlink" title="4. 项目运行效果"></a>4. <strong>项目运行效果</strong></h3><ul><li>启动后，Vue 前端展示了用户列表，并通过 HTTP 请求实时从 Spring Boot 后端获取数据，达到前后端分离开发的效果。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;AI生成，很杂。&lt;/p&gt;</summary>
    
    
    
    <category term="web开发" scheme="https://strangersinsist.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="springboot" scheme="https://strangersinsist.github.io/tags/springboot/"/>
    
    <category term="web" scheme="https://strangersinsist.github.io/tags/web/"/>
    
    <category term="vue" scheme="https://strangersinsist.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>html+css+js基础</title>
    <link href="https://strangersinsist.github.io/2024/10/05/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/"/>
    <id>https://strangersinsist.github.io/2024/10/05/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/</id>
    <published>2024-10-05T13:54:58.132Z</published>
    <updated>2024-10-05T14:07:25.985Z</updated>
    
    <content type="html"><![CDATA[<p>html+css+js基础</p><span id="more"></span><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--使用 &lt;meta&gt; 元素来描述HTML文档的描述，关键词，作者，字符集等--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(unboob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section2&quot;</span>&gt;</span>跳转到第二部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com/html/html-basic.html&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hr标签在HTML页面中创建水平线<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>浏览器会自动地在段落的前后添加空行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个是<span class="tag">&lt;<span class="name">br</span>&gt;</span>分行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">big</span>&gt;</span>放大<span class="tag">&lt;/<span class="name">big</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span>&gt;</span>缩小<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/images/logo.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;258&quot;</span> <span class="attr">height</span>=<span class="string">&quot;39&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">pre</span>&gt;</span>此例演示如何使用pre标签</span><br><span class="line"></span><br><span class="line">            对空行和    空格</span><br><span class="line"></span><br><span class="line">            进行控制</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 在页面中的某个位置 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个地方是跳转的第二部分<span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;section2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>访问菜鸟教程!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--_self 在本页面打开--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>如果你将 target 属性设置为 <span class="symbol">&amp;quot;</span>blank<span class="symbol">&amp;quot;</span>, 链接将在新窗口打开。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>无边框的图片链接:</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.runoob.com/html/html-tutorial.html&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">src</span>=<span class="string">&quot;smiley.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;HTML 教程&quot;</span> <span class="attr">width</span>=<span class="string">&quot;32&quot;</span> <span class="attr">height</span>=<span class="string">&quot;32&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;test/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">194</span>, <span class="number">194</span>, <span class="number">128</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://csdiy.wiki/images/title.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--带图片的标签--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com/images/&quot;</span> <span class="attr">target</span> =<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> =<span class="string">&quot;logo.png&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;alt&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com/images/&quot;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.runoob.com/&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-decoration:none;&quot;</span>&gt;</span>访问 runoob.com!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--没有下划线的链接--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:rgba(10, 254, 14, 0.221);margin-left:20px;&quot;</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;background-color: rgb(195, 161, 178);&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blueviolet;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;background-color: aquamarine;&quot;</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>居中对齐<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>列标题3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1,列1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1,列2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行1,列3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2,列1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2,列2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>行2,列3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">              <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    每个表格从一个 table 标签开始。</span><br><span class="line"></span><br><span class="line">    每个表格行从 tr 标签开始。</span><br><span class="line"></span><br><span class="line">    每个表格的数据从 td 标签开始。</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>一列:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>一行三列:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>两行三列:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Header 3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>200<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>300<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>400<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>500<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>单元格跨两列:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Telephone<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>Bill Gates<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 854<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>555 77 855<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>测试网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> 生日: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>China<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> &gt;</span>UK</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>China<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span>UK</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> &gt;</span></span><br><span class="line"></span><br><span class="line">心情: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;&quot;</span> <span class="attr">face</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span> <span class="comment">&lt;!-- 字体 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="comment">&lt;!--标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- 段落 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span> <span class="comment">&lt;!--粗体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="comment">&lt;!--斜体--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="comment">&lt;!--下划线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;&quot;</span> <span class="attr">height</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--type属性: circle: 空心圆; square: 实心正方形--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--无序列表标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>b<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--有序列表标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">start:起始索引(默认是1)</span></span><br><span class="line"><span class="comment">type属性:1:阿拉伯数字; a:小写英文字母; A:大写英文字母; i:小写罗马数字; I:大写罗马数字</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">&quot;1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>乔丹<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>詹姆斯<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--超链接标签--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--target属性: 链接打开方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;指定需要跳转的目标路径&quot;</span> <span class="attr">target</span>=<span class="string">&quot;打开的方式&quot;</span>&gt;</span>需要展现给用户查看的内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--假链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>假链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;navajowhite&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--边框、宽度、单元格间距、单元格内边距、背景颜色和对齐方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>22<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>23<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>31<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>32<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>table 中定义 tr, tr 中定义 td, td 中存放内容</p><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2><p>表单标签<br><code>&lt;form&gt;&lt;/form&gt;</code><br>输入类型 <code>&lt;input&gt;</code> 选择菜单 <code>&lt;select&gt;</code> 文本域 <code>&lt;textarea&gt;</code></p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p><code>&lt;input type=&quot;xxx&quot;/&gt;</code></p><ul><li>text（默认） 文本框</li><li>password 密码框</li><li>radio 单选框：同一组单选框 name 属性相同</li><li>checkbox 复选框：同一组多选框 name 属性相同</li><li>file 文件选择框</li><li>date 日期选择框</li><li>hidden 隐藏域：向服务器提交数据，不在页面上展示出来</li><li>submit 提交按钮：内置提交表单的功能</li><li>button 普通按钮：不内置任何功能，需要在学习 js 之后给它绑定点击事件</li><li>reset 重置按钮：内置重置表单的功能</li></ul><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果option没有添加value属性，那么提交数据时就会提交选中的option标签体的内容--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果option添加了value属性，那么提交数据时就会提交选中的option标签体的value值--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--option标签通过selected属性设置默认选中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>显示的内容1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>显示的内容2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><select name="">    <!--如果option没有添加value属性，那么提交数据时就会提交选中的option标签体的内容-->    <!--如果option添加了value属性，那么提交数据时就会提交选中的option标签体的value值-->    <!--option标签通过selected属性设置默认选中-->    <option value="">显示的内容 1</option>    <option value="">显示的内容 2</option></select><h3 id="textarea"><a href="#textarea" class="headerlink" title="textarea"></a>textarea</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea row=&quot;20&quot; cols=&quot;30&quot; name=&quot;introduce&quot;&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><textarea row="20" cols="30" name="introduce"></textarea><p>如果表单项的数据需要提交给服务器，必须具备 name 属性<br>同一组单选、多选框需要具备相同的 name<br>输入框、密码框、文件选择框、日期选择框等等的 value 属性的值，就是你输入的值<br>单选或多选框，默认 value 均为 on，所以我们需要手动给单选框和多选框设置 value</p><p>readonly 属性：表示只读，数据可以向服务器提交<br>disabled 属性：表示不可用, 数据无法向服务器提交<br>placeholder 属性：表示输入提示<br>checked 属性：单选和多选框也可以设置默认选中</p><h2 id="7"><a href="#7" class="headerlink" title="7"></a>7</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;top&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/dog.jpg&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">summary</span>&gt;</span>概要信息<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">    详情信息</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><p>层叠样式表</p><h3 id="1-CSS-语法"><a href="#1-CSS-语法" class="headerlink" title="1. CSS 语法"></a>1. <strong>CSS 语法</strong></h3><p>CSS 规则由选择器和声明块组成。</p><ul><li><strong>选择器</strong>：用于选择页面上的 HTML 元素。</li><li><strong>声明块</strong>：包含多个 CSS 声明，每个声明定义元素的某个样式属性。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    属性名: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>选择器：<code>p</code>（选择所有 <code>&lt;p&gt;</code> 元素）</li><li>声明块：<code>color: red;</code> 和 <code>font-size: 16px;</code>（将段落的文字颜色设为红色，字体大小设为 16 像素）</li></ul><h3 id="2-将-CSS-添加到-HTML-中"><a href="#2-将-CSS-添加到-HTML-中" class="headerlink" title="2. 将 CSS 添加到 HTML 中"></a>2. <strong>将 CSS 添加到 HTML 中</strong></h3><h4 id="1-内联样式（Inline-CSS）"><a href="#1-内联样式（Inline-CSS）" class="headerlink" title="1. 内联样式（Inline CSS）"></a>1. <strong>内联样式（Inline CSS）</strong></h4><p>直接在 HTML 元素的 <code>style</code> 属性中编写 CSS。适用于单个元素的样式定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue; font-size: 20px;&quot;</span>&gt;</span>这是一个内联样式的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-内部样式表（Internal-CSS）"><a href="#2-内部样式表（Internal-CSS）" class="headerlink" title="2. 内部样式表（Internal CSS）"></a>2. <strong>内部样式表（Internal CSS）</strong></h4><p>将 CSS 代码写在 HTML 文档的 <code>&lt;head&gt;</code> 部分的 <code>&lt;style&gt;</code> 标签中。适用于单个页面的样式定义。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个内部样式表的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-外部样式表（External-CSS）"><a href="#3-外部样式表（External-CSS）" class="headerlink" title="3. 外部样式表（External CSS）"></a>3. <strong>外部样式表（External CSS）</strong></h4><p>将 CSS 代码写在独立的 <code>.css</code> 文件中，并通过 <code>&lt;link&gt;</code> 标签引用。适用于多个页面共享样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个外部样式表的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>styles.css</code> 文件中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: purple;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-选择器"><a href="#3-选择器" class="headerlink" title="3. 选择器"></a>3. <strong>选择器</strong></h3><p>CSS 选择器用于选择特定的 HTML 元素，以应用样式。常见的选择器包括：</p><ul><li><p><strong>元素选择器</strong>：选择某种 HTML 元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 选择所有 &lt;p&gt; 元素 */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>类选择器</strong>：选择带有特定类的元素，类选择器以 <code>.</code> 开头。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intro</span> &#123; <span class="attribute">font-weight</span>: bold; &#125; <span class="comment">/* 选择 class=&quot;intro&quot; 的元素 */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ID 选择器</strong>：选择具有特定 ID 的元素，ID 选择器以 <code>#</code> 开头。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main-title</span> &#123; <span class="attribute">color</span>: blue; &#125; <span class="comment">/* 选择 id=&quot;main-title&quot; 的元素 */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通用选择器</strong>：选择页面上的所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125; <span class="comment">/* 清除所有元素的外边距和内边距 */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>后代选择器</strong>：选择嵌套在其他元素内的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; <span class="attribute">color</span>: green; &#125; <span class="comment">/* 选择所有在 &lt;div&gt; 内的 &lt;p&gt; 元素 */</span></span><br></pre></td></tr></table></figure></li><li><p><strong>属性选择器</strong> :根据HTML元素的属性来选择元素，选择所有 <code>type</code> 属性为 <code>text</code> 的 <code>&lt;input&gt;</code> 元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是基本选择器，组合选择器只举一例：</p></li><li><p><strong>后代选择器</strong> : 选择某个元素的所有后代元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-CSS-属性"><a href="#4-CSS-属性" class="headerlink" title="4. CSS 属性"></a>4. <strong>CSS 属性</strong></h3><p>一些常见的 CSS 属性如下：</p><ul><li><p><strong>颜色相关</strong></p><ul><li><code>color</code>: 文本颜色。</li><li><code>background-color</code>: 背景颜色。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>文本和字体</strong></p><ul><li><code>font-size</code>: 字体大小。</li><li><code>font-family</code>: 字体系列。</li><li><code>font-weight</code>: 字体粗细（如 <code>bold</code>、<code>normal</code>）。</li><li><code>text-align</code>: 文本对齐方式（如 <code>left</code>、<code>right</code>、<code>center</code>）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, sans-serif;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>布局相关</strong></p><ul><li><code>margin</code>: 元素外边距。</li><li><code>padding</code>: 元素内边距。</li><li><code>width</code>: 宽度。</li><li><code>height</code>: 高度。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>边框</strong></p><ul><li><code>border</code>: 边框样式，宽度、颜色和类型可以组合。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>显示和定位</strong></p><ul><li><code>display</code>: 定义元素的显示方式，如 <code>block</code>、<code>inline</code>、<code>none</code>。</li><li><code>position</code>: 定义元素的定位方式，如 <code>relative</code>、<code>absolute</code>、<code>fixed</code>。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hidden</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.absolute-box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-层叠与优先级"><a href="#5-层叠与优先级" class="headerlink" title="5. 层叠与优先级"></a>5. <strong>层叠与优先级</strong></h3><p>CSS 的 C（Cascading）代表“层叠”，它表示当多个样式同时作用于一个元素时，浏览器会按以下优先级规则决定使用哪个样式：</p><ol><li><strong>内联样式</strong>：直接写在元素内的样式，优先级最高。</li><li><strong>ID 选择器</strong>：ID 选择器的样式优先级高于类选择器和元素选择器。</li><li><strong>类选择器</strong>：类选择器的优先级高于元素选择器。</li><li><strong>元素选择器</strong>：元素选择器的优先级最低。</li></ol><p>如果多个样式有相同的优先级，后定义的样式会覆盖先定义的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red; <span class="comment">/* 将会被覆盖 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue; <span class="comment">/* 最终生效 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-响应式设计"><a href="#6-响应式设计" class="headerlink" title="6. 响应式设计"></a>6. <strong>响应式设计</strong></h3><p>CSS 可以通过媒体查询来响应不同设备的屏幕大小。这样可以使网站在不同设备上（如手机、平板、桌面）表现良好。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-CSS-框模型（Box-Model）"><a href="#7-CSS-框模型（Box-Model）" class="headerlink" title="7. CSS 框模型（Box Model）"></a>7. <strong>CSS 框模型（Box Model）</strong></h3><p>每个 HTML 元素都被看作一个盒子，CSS 盒模型包含以下几个部分：</p><ul><li><strong>内容（content）</strong>：元素的内容。</li><li><strong>内边距（padding）</strong>：内容周围的空白区域。</li><li><strong>边框（border）</strong>：内边距外的边框。</li><li><strong>外边距（margin）</strong>：边框外的空白区域。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>div</code> 的内容宽度是 200 px，内边距 10 px，边框 5 px，外边距 20 px。</p><h2 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h2><p>div是块级元素，会独占一行；span是行内元素，不会独占一行<br>div中可以嵌套其它的标签，span标签中只能嵌套文本&#x2F;图片&#x2F;超链接</p><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><p>JavaScript 是一种广泛应用于网页开发的编程语言，通常用于增强用户交互、动态更新内容、表单验证、动画以及其他客户端功能。</p><h3 id="1-JavaScript-的用途"><a href="#1-JavaScript-的用途" class="headerlink" title="1. JavaScript 的用途"></a>1. <strong>JavaScript 的用途</strong></h3><p>JavaScript 主要用于以下任务：</p><ul><li><strong>动态内容更新</strong>：可以根据用户交互修改网页内容，无需刷新整个页面。</li><li><strong>表单验证</strong>：在用户提交表单之前，验证输入是否合法。</li><li><strong>浏览器控制</strong>：可以控制浏览器的行为，比如弹出对话框、导航历史等。</li><li><strong>事件驱动编程</strong>：响应用户的鼠标点击、键盘按键等操作。</li><li><strong>动画和图形</strong>：通过 DOM 操作和 CSS 动画，JavaScript 可以实现丰富的视觉效果。</li></ul><h3 id="2-JavaScript-语法"><a href="#2-JavaScript-语法" class="headerlink" title="2. JavaScript 语法"></a>2. <strong>JavaScript 语法</strong></h3><h4 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. <strong>基本语法</strong></h4><p>JavaScript 是一种基于语句的语言，语句以分号 <code>;</code> 结束（虽然不强制要求，但最好使用）。</p><ul><li><strong>变量声明</strong>：通过 <code>var</code>、<code>let</code> 或 <code>const</code> 声明变量。<ul><li><code>var</code>：有函数作用域，较老的变量声明方式。</li><li><code>let</code>：有块作用域，适用于现代 JavaScript。</li><li><code>const</code>：声明不可变的常量。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;John&quot;</span>;   <span class="comment">// 使用 var 声明变量</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>;        <span class="comment">// 使用 let 声明变量</span></span><br><span class="line"><span class="keyword">const</span> city = <span class="string">&quot;Paris&quot;</span>; <span class="comment">// 使用 const 声明常量</span></span><br></pre></td></tr></table></figure><h4 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. <strong>数据类型</strong></h4><p>JavaScript 有六种基本的数据类型：</p><ul><li><strong>数字（Number）</strong>：整数和浮点数。</li><li><strong>字符串（String）</strong>：用双引号或单引号括起来的文本。</li><li><strong>布尔值（Boolean）</strong>：<code>true</code> 或 <code>false</code>。</li><li><strong>未定义（Undefined）</strong>：未定义的变量。</li><li><strong>空（Null）</strong>：表示空值。</li><li><strong>对象（Object）</strong>：<strong>用于存储键值对或复杂数据结构</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">42</span>;              <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;Hello, World!&quot;</span>;   <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> isTrue = <span class="literal">true</span>;            <span class="comment">// 布尔值</span></span><br><span class="line"><span class="keyword">let</span> notDefined;               <span class="comment">// 未定义变量</span></span><br><span class="line"><span class="keyword">let</span> emptyValue = <span class="literal">null</span>;        <span class="comment">// 空值</span></span><br></pre></td></tr></table></figure><h4 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3. 运算符"></a>3. <strong>运算符</strong></h4><p>JavaScript 提供了多种运算符来处理数据。</p><ul><li><strong>算术运算符</strong>：<code>+</code>（加）、<code>-</code>（减）、<code>*</code>（乘）、<code>/</code>（除）、<code>%</code>（取余）。</li><li><strong>赋值运算符</strong>：<code>=</code>（赋值）、<code>+=</code>（加并赋值）、<code>-=</code>（减并赋值）等。</li><li><strong>比较运算符</strong>：<code>==</code>（相等）、<code>===</code>（严格相等）、<code>!=</code>（不相等）、<code>&gt;</code>、<code>&lt;</code> 等。</li><li><strong>逻辑运算符</strong>：<code>&amp;&amp;</code>（与）、<code>||</code>（或）、<code>!</code>（非）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);  <span class="comment">// 输出 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x &gt; y);  <span class="comment">// 输出 true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x == <span class="string">&quot;10&quot;</span>); <span class="comment">// 输出 true (== 不检查类型)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x === <span class="string">&quot;10&quot;</span>); <span class="comment">// 输出 false (=== 检查类型)</span></span><br></pre></td></tr></table></figure><h3 id="3-条件语句"><a href="#3-条件语句" class="headerlink" title="3. 条件语句"></a>3. <strong>条件语句</strong></h3><p>条件语句用于根据条件执行不同的代码。</p><ul><li><strong>if… else 语句</strong>：根据条件执行不同的代码块。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成人&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未成年&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>switch 语句</strong>：用于对多个条件进行比较。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> color = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未知颜色&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-循环"><a href="#4-循环" class="headerlink" title="4. 循环"></a>4. <strong>循环</strong></h3><p>JavaScript 提供了几种循环结构，用于重复执行某些代码。</p><ul><li><strong>for 循环</strong>：用于执行指定次数的循环。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;循环次数: &quot;</span> + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>while 循环</strong>：只要条件为 <code>true</code>，就会不断执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;循环次数: &quot;</span> + i);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>do… while 循环</strong>：至少会执行一次，然后根据条件判断是否继续。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;循环次数: &quot;</span> + i);</span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. <strong>函数</strong></h3><p>函数是用于封装可重复使用代码的块。可以通过定义函数来组织代码，并通过调用函数执行代码。</p><ul><li><strong>函数声明</strong>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = <span class="title function_">greet</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);  <span class="comment">// 输出 &quot;Hello, Alice&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>函数表达式</strong>：可以将函数赋值给变量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sayHello</span>(<span class="string">&quot;Bob&quot;</span>));  <span class="comment">// 输出 &quot;Hello, Bob&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>箭头函数</strong>：ES 6 引入的一种简洁写法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>));  <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数（Arrow Function）是ES6中引入的一种更简洁的书写函数的方法。它使用 <code>=&gt;</code> 语法，通常用于简化匿名函数的书写方式。</p><ul><li><strong>简洁语法</strong>：箭头函数提供了一种更简洁的书写方式，尤其是针对简单函数。</li><li><strong><code>this</code> 绑定</strong>：箭头函数不创建自己的 <code>this</code>，而是**继承封闭上下文中的 <code>this</code>**。</li><li><strong>不适合作为构造函数</strong>：箭头函数不能被用作构造函数，也没有 <code>new</code> 关键字的行为。</li><li><strong>没有 <code>arguments</code> 对象</strong>：箭头函数没有 <code>arguments</code> 对象，但可以使用剩余参数语法来处理参数。<br>箭头函数特别适合需要保留上下文 <code>this</code> 的场景，或需要编写简洁代码时的使用。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统函数表达式</span></span><br><span class="line"><span class="keyword">let</span> traditionalFunction = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunction</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只有一行返回语句，可以省略花括号和`return`</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunctionShort</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><ul><li><p><strong>参数</strong>：<br>如果只有一个参数，参数括号可以省略。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">singleParam</span> = x =&gt; x * <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>没有参数时</strong>：<br>必须使用空括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">noParam</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;No parameters&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><p>箭头函数在处理 <code>this</code> 时有一个重要特性：它不会创建自己的 <code>this</code>，而是继承自定义它的上下文。这与传统的函数不同，传统函数的 <code>this</code> 取决于函数是如何调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TraditionalFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// undefined，因为this在此指向全局对象（或undefined，取决于是否使用strict模式）</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ArrowFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 2，因为箭头函数的this是继承自ArrowFunction中的this</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">TraditionalFunction</span>(); <span class="comment">// 输出 NaN 或 undefined</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ArrowFunction</span>();       <span class="comment">// 输出 2</span></span><br></pre></td></tr></table></figure><p>箭头函数与传统函数的另一个不同点是，箭头函数不能作为构造函数（即不能用 <code>new</code> 关键字来调用），而传统函数可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">ArrowFunction</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">TraditionalFunction</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统函数可以用new关键字创建实例</span></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="keyword">new</span> <span class="title class_">TraditionalFunction</span>(); <span class="comment">// 允许</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数不允许使用new</span></span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> <span class="title class_">ArrowFunction</span>(); <span class="comment">// 错误：ArrowFunction is not a constructor</span></span><br></pre></td></tr></table></figure><p>传统函数有一个 <code>arguments</code> 对象，表示传递给函数的所有参数。箭头函数没有自己的 <code>arguments</code>，但可以通过<strong>剩余参数语法</strong>来获取参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> traditionalFunction = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traditionalFunction</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 输出：&#123;0: 1, 1: 2, 2: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">arrowFunction</span> = (<span class="params">...args</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">arrowFunction</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// 输出：[1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h4><p><code>arguments</code> 对象是 JavaScript 中所有非箭头函数内置的一个类数组对象，包含了函数调用时传入的所有参数。它允许你访问传递给函数的参数，而不需要明确在函数声明中定义它们。</p><ul><li><code>arguments</code> 是一个类数组对象，包含了传给函数的所有参数。</li><li>它对处理不确定数量的参数非常有用。</li><li><code>arguments</code> 在 ES 6 中已经被 <code>...</code> 剩余参数语法部分取代，后者更灵活方便。</li><li>它不能在箭头函数中使用，在这种情况下，它会从外层上下文继承。<br><code>arguments</code> 对象虽然经典，但在现代 JavaScript 中，通常更推荐使用 <strong>剩余参数</strong> (<code>...rest</code>) 来处理可变数量的参数，因为它提供了更清晰的语法和更强大的功能。</li></ul><p>特点：</p><ol><li><strong>类数组对象</strong>：<ul><li><code>arguments</code> 是一个类似数组的对象，它有 <code>length</code> 属性，但不是真正的数组，因此没有数组的方法（如 <code>push</code>, <code>forEach</code> 等）。然而，你可以通过索引来访问各个参数。</li></ul></li><li><strong>动态性</strong>：<ul><li>无论函数定义了多少个参数，<code>arguments</code> 对象都会包含函数调用时传入的所有参数（即使传入的参数比函数声明的参数多或少）。</li></ul></li><li><strong>不可用于箭头函数</strong>：<ul><li><code>arguments</code> 对象在箭头函数中不存在。箭头函数不会绑定自己的 <code>arguments</code> 对象，它会从它的封闭上下文中继承 <code>arguments</code>。</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>]); <span class="comment">// 访问第一个参数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>); <span class="comment">// 参数个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">exampleFunction</span>(<span class="number">1</span>, <span class="string">&quot;Hello&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Arguments] &#123; &#x27;0&#x27;: 1, &#x27;1&#x27;: &#x27;Hello&#x27;, &#x27;2&#x27;: true &#125;</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li><p><strong>处理可变参数个数的函数</strong>：<br><code>arguments</code> 对象经常用于函数的参数个数不固定时，特别是在 ES 6 之前没有默认参数和剩余参数的场景下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        total += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：10</span></span><br></pre></td></tr></table></figure></li><li><p><strong>与剩余参数对比</strong>：<br>在 ES 6 引入的剩余参数（Rest Parameters）后，<code>arguments</code> 对象的使用有所减少。<strong>剩余参数可以将传入的参数作为一个真正的数组</strong>，而不是类数组对象，这更加方便。</p><ul><li><p>**使用 <code>arguments</code>**：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        result *= <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：24</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用剩余参数</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args.<span class="title function_">reduce</span>(<span class="function">(<span class="params">product, current</span>) =&gt;</span> product * current, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 输出：24</span></span><br></pre></td></tr></table></figure></li></ul><p>在这个例子中，<code>...args</code> 是一个真正的数组，可以直接使用数组方法如 <code>reduce</code>，而不需要像 <code>arguments</code> 那样手动迭代。</p></li></ol><h3 id="6-事件和-DOM-操作"><a href="#6-事件和-DOM-操作" class="headerlink" title="6. 事件和 DOM 操作"></a>6. <strong>事件和 DOM 操作</strong></h3><p>在 JavaScript 中，<strong>事件</strong> 和 <strong>DOM 操作</strong> 是构建动态网页的核心。事件使网页能够对用户的交互（如点击、键盘输入等）作出响应，而 DOM（Document Object Model） 操作则允许 JavaScript 动态地更改网页的内容和结构。</p><ul><li><strong>事件</strong>：通过事件处理器监听用户行为（如点击、按键等），并通过 <code>addEventListener()</code> 绑定事件。事件对象可以提供详细的事件信息。</li><li><strong>DOM 操作</strong>：允许我们动态地获取、修改、创建、删除页面中的 HTML 元素，进而实现动态的网页交互。</li></ul><h4 id="一、事件"><a href="#一、事件" class="headerlink" title="一、事件"></a>一、事件</h4><p><strong>事件</strong> 是用户或浏览器执行的动作，例如鼠标点击、按键按下、窗口加载等。通过事件，我们可以使网页具有交互性。</p><ol><li><strong>常见事件类型</strong></li></ol><ul><li><p><strong>鼠标事件</strong>：</p><ul><li><code>click</code>：当用户点击元素时触发。</li><li><code>dblclick</code>：当用户双击元素时触发。</li><li><code>mouseover</code>：当鼠标移到元素上时触发。</li><li><code>mouseout</code>：当鼠标移出元素时触发。</li><li><code>mousedown</code> &#x2F; <code>mouseup</code>：鼠标按下和释放时触发。</li></ul></li><li><p><strong>键盘事件</strong>：</p><ul><li><code>keydown</code>：按下键盘按键时触发。</li><li><code>keyup</code>：释放按键时触发。</li></ul></li><li><p><strong>表单事件</strong>：</p><ul><li><code>submit</code>：表单提交时触发。</li><li><code>change</code>：表单元素的值发生变化时触发（如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>）。</li></ul></li><li><p><strong>窗口事件</strong>：</p><ul><li><code>load</code>：页面加载完成时触发。</li><li><code>resize</code>：浏览器窗口大小发生变化时触发。</li><li><code>scroll</code>：当页面或元素滚动时触发。</li></ul></li></ul><ol start="2"><li><strong>事件处理器（Event Handlers）</strong></li></ol><p>事件处理器（或事件监听器）是指在特定事件发生时执行的函数。有三种常见的方式来添加事件处理器：</p><p>方法 1：HTML 内联事件处理</p><p>将 JavaScript 直接写在 HTML 元素的事件属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;你点击了按钮!&#x27;)&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法 2：DOM 的 <code>onEvent</code> 属性</p><p>通过 JavaScript 设置元素的 <code>onEvent</code> 属性（例如 <code>onclick</code>）来添加事件处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 方法 3：<code>addEventListener()</code> 方法</p><p>这是推荐的方式，<strong>允许我们为同一事件添加多个事件处理器</strong>，并能更好地控制事件（如移除事件处理器等）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;按钮被点击了&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>addEventListener()</code> 的好处：</p><ul><li>可以为同一个元素添加多个事件监听器。</li><li>可以在需要时轻松移除事件处理器。</li><li>支持事件冒泡和捕获。</li></ul><ol start="3"><li><strong>事件对象（Event Object）</strong></li></ol><p>当事件被触发时，浏览器会生成一个事件对象，该对象包含了与事件相关的详细信息，例如触发事件的元素、鼠标的坐标、按键状态等。</p><ul><li>常用属性：<ul><li><code>target</code>：事件触发的元素。</li><li><code>type</code>：事件类型，如 <code>click</code>、<code>keydown</code>。</li><li><code>key</code>：当处理键盘事件时，表示按下的键。</li><li><code>clientX</code> &#x2F; <code>clientY</code>：鼠标事件中，表示鼠标点击时的 X 和 Y 坐标。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;点击位置 X: &quot;</span> + event.<span class="property">clientX</span> + <span class="string">&quot;，Y: &quot;</span> + event.<span class="property">clientY</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>事件传播模型</strong></li></ol><p>事件传播是指事件从触发源开始如何传播到其他相关元素。JavaScript 中有三种传播阶段：</p><ul><li><strong>捕获阶段</strong>：事件从文档的根元素向事件目标传播。</li><li><strong>目标阶段</strong>：事件到达目标元素（触发事件的元素）。</li><li><strong>冒泡阶段</strong>：事件从目标元素向上冒泡，经过其祖先元素。</li></ul><p>事件监听器默认在<strong>冒泡阶段</strong>执行，但可以通过 <code>addEventListener</code> 的第三个参数将监听器绑定在捕获阶段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DIV 捕获阶段&quot;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>); <span class="comment">// 第三个参数为 true，表示在捕获阶段执行</span></span><br></pre></td></tr></table></figure><h4 id="二、DOM-操作"><a href="#二、DOM-操作" class="headerlink" title="二、DOM 操作"></a>二、DOM 操作</h4><p><strong>DOM（Document Object Model）</strong> 是网页的编程接口，表示页面的结构。通过 DOM，我们可以动态地修改、创建、删除页面中的元素，改变样式，响应用户交互等。</p><ol><li><strong>获取 DOM 元素</strong><br>获取元素:</li></ol><ul><li><p>**<code>getElementById()</code>**：通过元素的 ID 获取元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>**<code>getElementsByClassName()</code>**：通过类名获取元素集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;myClass&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>**<code>getElementsByTagName()</code>**：通过标签名获取元素集合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;p&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>**<code>querySelector()</code>**：通过 CSS 选择器获取第一个匹配的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.myClass&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>**<code>querySelectorAll()</code>**：通过 CSS 选择器获取所有匹配的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.myClass&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>修改 DOM 元素</strong></li></ol><p>修改内容</p><ul><li><p>**<code>innerHTML</code>**：更改元素的 HTML 内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line">div.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;p&gt;新内容&lt;/p&gt;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>**<code>textContent</code>**：更改元素的纯文本内容（不会解析 HTML）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line">div.<span class="property">textContent</span> = <span class="string">&quot;新文本内容&quot;</span>;</span><br></pre></td></tr></table></figure><p> 修改属性</p></li><li><p>**<code>setAttribute()</code>**：设置元素的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="title function_">setAttribute</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;newImage.jpg&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>**<code>removeAttribute()</code>**：移除元素的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="title function_">removeAttribute</span>(<span class="string">&quot;alt&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>直接修改属性</strong>：可以通过点语法直接修改元素的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">input.<span class="property">type</span> = <span class="string">&quot;password&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><p> 修改样式</p><p>可以通过 <code>style</code> 属性直接修改元素的内联样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line">div.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;yellow&quot;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建和删除元素</strong></li></ol><p>创建新元素</p><ul><li>**<code>createElement()</code>**：创建一个新的 DOM 元素。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">newElement.<span class="property">textContent</span> = <span class="string">&quot;这是一个新元素&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><p> 插入元素</p><ul><li><p>**<code>appendChild()</code>**：将新元素添加为某个元素的子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parentElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">parentElement.<span class="title function_">appendChild</span>(newElement);</span><br></pre></td></tr></table></figure></li><li><p>**<code>insertBefore()</code>**：在指定子元素前插入新元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstChild = parentElement.<span class="property">firstChild</span>;</span><br><span class="line">parentElement.<span class="title function_">insertBefore</span>(newElement, firstChild);</span><br></pre></td></tr></table></figure></li></ul><p>删除元素</p><ul><li><p>**<code>removeChild()</code>**：从父元素中删除子元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> parentElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> child = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;child&quot;</span>);</span><br><span class="line">parentElement.<span class="title function_">removeChild</span>(child);</span><br></pre></td></tr></table></figure></li><li><p>**<code>remove()</code>**：直接删除当前元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myElement&quot;</span>);</span><br><span class="line">element.<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><strong>事件与 DOM 操作结合</strong></li></ol><p>通过事件处理和 DOM 操作的结合，我们可以构建动态交互的网页。例如，点击按钮后动态生成一个新的段落：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;addParagraph&quot;</span>&gt;</span>添加段落<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;addParagraph&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> newParagraph = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      newParagraph.<span class="property">textContent</span> = <span class="string">&quot;这是一个新段落&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;content&quot;</span>).<span class="title function_">appendChild</span>(newParagraph);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个示例中，点击按钮时，新的段落会动态添加到 <code>div</code> 中。</p><h3 id="7-数组和对象"><a href="#7-数组和对象" class="headerlink" title="7. 数组和对象"></a>7. <strong>数组和对象</strong></h3><h4 id="1-数组：JavaScript-数组用于存储多个值。"><a href="#1-数组：JavaScript-数组用于存储多个值。" class="headerlink" title="1. 数组：JavaScript 数组用于存储多个值。"></a>1. <strong>数组</strong>：JavaScript 数组用于存储多个值。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits[<span class="number">1</span>]);  <span class="comment">// 输出 &quot;banana&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>push()</code>：在数组末尾添加元素。</li><li><code>pop()</code>：移除数组末尾的元素。</li><li><code>length</code>：获取数组长度。</li></ul><h4 id="2-对象：对象用于存储键值对，可以表示一个实体及其属性。"><a href="#2-对象：对象用于存储键值对，可以表示一个实体及其属性。" class="headerlink" title="2. 对象：对象用于存储键值对，可以表示一个实体及其属性。"></a>2. <strong>对象</strong>：对象用于存储键值对，可以表示一个实体及其属性。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);  <span class="comment">// 输出 &quot;John&quot;</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">31</span>;  <span class="comment">// 修改对象属性</span></span><br></pre></td></tr></table></figure><h3 id="8-异步编程"><a href="#8-异步编程" class="headerlink" title="8. 异步编程"></a>8. <strong>异步编程</strong></h3><p>JavaScript 提供了一些工具来处理异步操作，如请求数据或处理定时任务。<br>它允许程序在等待较长时间的操作（如文件读取、网络请求）完成时，继续执行其他任务，而不必阻塞程序的执行流。</p><h4 id="回调函数：函数可以作为参数传递到另一个函数中，在异步操作完成后执行。"><a href="#回调函数：函数可以作为参数传递到另一个函数中，在异步操作完成后执行。" class="headerlink" title="回调函数：函数可以作为参数传递到另一个函数中，在异步操作完成后执行。"></a><strong>回调函数</strong>：函数可以作为参数传递到另一个函数中，在异步操作完成后执行。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1秒后执行&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;数据加载完成&quot;</span>;</span><br><span class="line">        <span class="title function_">callback</span>(data); <span class="comment">// 异步任务完成后调用回调函数</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 &quot;数据加载完成&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但它存在一个问题，即<strong>回调地狱</strong>（Callback Hell）：当多个异步任务依赖于彼此时，回调函数会不断嵌套，代码难以维护和阅读。</p><h4 id="Promise：用于处理异步操作的对象。"><a href="#Promise：用于处理异步操作的对象。" class="headerlink" title="Promise：用于处理异步操作的对象。"></a><strong>Promise</strong>：用于处理异步操作的对象。</h4><ol><li><strong>解决回调地狱</strong>：<code>Promise</code> 提供了链式调用 <code>. then ()</code> 的方式，避免了多层嵌套的回调函数。</li><li><strong>增强可读性</strong>：通过链式调用，代码逻辑更加线性和直观，易于理解。</li><li><strong>错误处理机制</strong>：通过 <code>. catch ()</code> 统一处理异步操作中的错误。</li><li><strong>更灵活的异步控制</strong>：通过 <code>Promise.all ()</code>、<code>Promise.race ()</code> 等方法，控制多个异步任务的执行方式。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> success = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;操作成功！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;操作失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出 &quot;操作成功！&quot;</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise</strong> 是 JavaScript 中用于处理异步操作的对象，它提供了一种更优雅、简洁的方式来处理异步任务，避免了传统的回调函数（callback）方式容易导致的“回调地狱”（callback hell）问题。Promise 可以通过 <code>.then()</code> 和 <code>.catch()</code> 方法进行链式调用，并提供了错误处理机制。</p><p>Promise 是一个代表异步操作最终完成或失败的对象。它有三种状态：</p><ul><li><strong>待定（Pending）</strong>：异步操作尚未完成，Promise 还没有被解决或拒绝。</li><li><strong>已解决（Fulfilled）</strong>：异步操作成功完成，Promise 被解决，返回结果。</li><li><strong>已拒绝（Rejected）</strong>：异步操作失败，Promise 被拒绝，返回错误。</li></ul><p><strong>Promise 的基本语法</strong></p><ul><li>**<code>resolve</code>**：表示异步操作成功时调用，通常会传递成功的结果。</li><li>**<code>reject</code>**：表示异步操作失败时调用，通常会传递失败的原因或错误信息。</li></ul><p>下面是一个使用 Promise 的简单示例，模拟一个异步任务（例如，从服务器获取数据）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟一个耗时的异步操作，使用 setTimeout</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> success = <span class="literal">true</span>;  <span class="comment">// 模拟成功或失败的条件</span></span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&quot;数据获取成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;数据获取失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 .then() 处理成功的结果，使用 .catch() 处理失败</span></span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出: &quot;数据获取成功&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);  <span class="comment">// 输出: &quot;数据获取失败&quot;（如果失败）</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>myPromise</code> 是一个 Promise 对象，它表示一个异步操作，模拟了 2 秒后异步任务的完成。根据 <code>success</code> 的值决定是否调用 <code>resolve</code>（成功）或 <code>reject</code>（失败）。我们可以使用 <code>.then()</code> 来处理成功的结果，使用 <code>.catch()</code> 来处理失败的情况。</p><p> <strong>Promise 状态转换</strong><br>Promise 的状态一旦从“待定”变为“已解决”或“已拒绝”，就不能再变更。这意味着：</p><ul><li>如果 Promise 被解决（<code>resolve</code>），它的结果值就固定下来了，不会再变化。</li><li>如果 Promise 被拒绝（<code>reject</code>），它的错误信息也固定了。</li></ul><p>无论 Promise 成功还是失败，它只会改变一次。</p><p><strong>链式调用 .then()</strong></p><p>Promise 的一个强大特性是 <code>.then()</code> 方法可以链式调用。当一个异步操作成功完成并返回结果时，可以通过 <code>.then()</code> 来处理这个结果。如果 <code>.then()</code> 方法返回一个新的 Promise，那么可以继续链式调用后续的 <code>.then()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">10</span>), <span class="number">1000</span>);  <span class="comment">// 1 秒后返回结果 10</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出: 10</span></span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">2</span>;    <span class="comment">// 返回新的值 20</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出: 20</span></span><br><span class="line">        <span class="keyword">return</span> result * <span class="number">3</span>;    <span class="comment">// 返回新的值 60</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出: 60</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，每个 <code>.then()</code> 的返回值会传递给下一个 <code>.then()</code>，形成链式结构，依次处理结果。这种链式调用机制让异步操作之间的依赖关系更加清晰。</p><p> <strong>错误处理：.catch() 和 .finally()</strong></p><ol><li><strong>.catch()</strong> 方法<br><code>.catch()</code> 用于捕获 Promise 链中的错误。如果 Promise 被拒绝，或者在 <code>.then()</code> 中发生了错误，<code>.catch()</code> 都会捕获到这些错误。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&quot;网络请求失败&quot;</span>), <span class="number">1000</span>);  <span class="comment">// 模拟异步操作失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 不会被执行</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生错误: &quot;</span> + error);  <span class="comment">// 输出: &quot;发生错误: 网络请求失败&quot;</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>.finally()</strong> 方法<br><code>.finally()</code> <strong>无论 Promise 成功或失败，都会执行</strong>。它用于编写在 Promise 结束后都需要执行的逻辑，比如关闭加载动画或清理资源。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span> (<span class="function">() =&gt;</span> resolve (<span class="string">&quot;操作成功&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .<span class="property">then</span> (<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (result);  <span class="comment">// 输出: 操作成功</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="property">catch</span> (<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (error);   <span class="comment">// 不会被执行</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="property">finally</span> (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;操作结束&quot;</span>);  <span class="comment">// 无论成功或失败，都会执行</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise.all () 并行执行多个异步操作</strong></p><p><code>Promise.all ()</code> 用于并行执行多个 Promise，等待所有 Promise 都成功后再返回。如果其中一个 Promise 被拒绝，整个 <code>Promise.all ()</code> 都会被拒绝。</p><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> ([promise <span class="number">1</span>, promise <span class="number">2</span>, promise <span class="number">3</span>])</span><br><span class="line">    .<span class="property">then</span> (<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line">        <span class="comment">// 所有 Promise 都成功时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (results);  <span class="comment">// 是一个包含每个 Promise 结果的数组</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="property">catch</span> (<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="comment">// 只要有一个 Promise 被拒绝，执行此处</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p> <strong>Promise.race ()：竞争模式</strong></p><p><code>Promise.race ()</code> 类似于比赛，它会返回第一个解决或拒绝的 Promise，无论是成功还是失败。也就是说，它会返回最快执行的那个 Promise 的结果或错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise <span class="number">1</span> = <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span> (<span class="function">() =&gt;</span> resolve (<span class="string">&quot;结果 1&quot;</span>), <span class="number">1000</span>));</span><br><span class="line"><span class="keyword">let</span> promise <span class="number">2</span> = <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span> (<span class="function">() =&gt;</span> resolve (<span class="string">&quot;结果 2&quot;</span>), <span class="number">500</span>));</span><br><span class="line"><span class="keyword">let</span> promise <span class="number">3</span> = <span class="keyword">new</span> <span class="title class_">Promise</span> (<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span> (<span class="function">() =&gt;</span> resolve (<span class="string">&quot;结果 3&quot;</span>), <span class="number">1500</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> ([promise <span class="number">1</span>, promise <span class="number">2</span>, promise <span class="number">3</span>])</span><br><span class="line">    .<span class="property">then</span> (<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (result);  <span class="comment">// 输出: &quot;结果 2&quot; （因为它最快完成）</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="property">catch</span> (<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="property">log</span> (<span class="string">&quot;某个 Promise 失败&quot;</span>, error);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise.resolve () 和 Promise.reject ()</strong></p><ol><li><strong>Promise.resolve ()</strong><br><code>Promise.resolve ()</code> 方法返回一个已解决的 Promise，可以快速返回一个成功的结果。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="property">resolve</span> (<span class="string">&quot;快速成功的结果&quot;</span>);</span><br><span class="line"></span><br><span class="line">promise.<span class="property">then</span> (<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span> (result);  <span class="comment">// 输出: 快速成功的结果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Promise.reject ()</strong><br><code>Promise.reject ()</code> 方法返回一个已拒绝的 Promise，用于快速返回一个失败的结果。</li></ol><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="property">reject</span> (<span class="string">&quot;快速失败的原因&quot;</span>);</span><br><span class="line"></span><br><span class="line">promise.<span class="property">catch</span> (<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="property">log</span> (error);  <span class="comment">// 输出: 快速失败的原因</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="async-await：基于-Promise的语法糖，使异步代码更加直观。"><a href="#async-await：基于-Promise的语法糖，使异步代码更加直观。" class="headerlink" title="async&#x2F;await：基于 Promise的语法糖，使异步代码更加直观。"></a><strong>async&#x2F;await</strong>：基于 Promise的语法糖，使异步代码更加直观。</h4><p><code>async</code> 用于声明一个异步函数，而 <code>await</code> 用于等待一个异步操作完成。使用 <code>await</code> 可以让代码看起来像是同步执行的，避免了复杂的 <code>then</code> 链式调用，提升了代码的可读性。</p><ul><li><code>async</code> 函数会返回一个 <code>Promise</code> 对象。</li><li><code>await</code> 只能在 <code>async</code> 函数中使用，它会暂停函数的执行，等待 <code>Promise</code> 完成。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="keyword">let</span> result1=<span class="keyword">await</span> <span class="title function_">asyncTask1</span>();</span><br><span class="line"> <span class="keyword">let</span> result2=<span class="keyword">await</span> <span class="title function_">asyncTask2</span>(result1);</span><br><span class="line"> <span class="keyword">let</span> result3=<span class="keyword">await</span> <span class="title function_">asyncTask3</span>(result2);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;所有任务完成&quot;</span>,result3);</span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;任务失败&quot;</span>,error);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> promise=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">resolve</span>(<span class="string">&quot;数据已获取&quot;</span>),<span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> result =<span class="keyword">await</span> promise;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br></pre></td></tr></table></figure><h4 id="常见的异步操作"><a href="#常见的异步操作" class="headerlink" title="常见的异步操作"></a><strong>常见的异步操作</strong></h4><ul><li><strong>定时器</strong>：如 <code>setTimeout</code> 和 <code>setInterval</code>，用于延时和周期性任务。</li><li><strong>网络请求</strong>：如 <code>fetch</code> 或 <code>XMLHttpRequest</code>，用于异步数据加载。</li><li><strong>文件操作</strong>：在Node.js中，文件系统操作通常是异步的。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;html+css+js基础&lt;/p&gt;</summary>
    
    
    
    <category term="web开发" scheme="https://strangersinsist.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="web" scheme="https://strangersinsist.github.io/tags/web/"/>
    
    <category term="前端三件套" scheme="https://strangersinsist.github.io/tags/%E5%89%8D%E7%AB%AF%E4%B8%89%E4%BB%B6%E5%A5%97/"/>
    
  </entry>
  
  <entry>
    <title>CPP-STL</title>
    <link href="https://strangersinsist.github.io/2024/10/03/STL/"/>
    <id>https://strangersinsist.github.io/2024/10/03/STL/</id>
    <published>2024-10-03T14:36:04.828Z</published>
    <updated>2024-10-03T14:38:06.908Z</updated>
    
    <content type="html"><![CDATA[<p>参考教程： <a href="https://blog.algorithmpark.xyz/2023/06/08/language/cpp-STL/#9-STL%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95">cpp-STL - AlgorithmPark</a><br>基本上是转载，跟着写了一遍理思路。</p><span id="more"></span><h1 id="1-vector-容器"><a href="#1-vector-容器" class="headerlink" title="1. vector 容器"></a>1. vector 容器</h1><p>头文件 <code>#include&lt;vector&gt;</code></p><h2 id="1-构造"><a href="#1-构造" class="headerlink" title="(1)构造"></a>(1)构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;b;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(<span class="number">10</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(<span class="number">10</span>,<span class="number">1</span>);<span class="comment">//10个整型元素的向量，每个值为1</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(b);<span class="comment">//用向量b给a赋值</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(b.<span class="built_in">begin</span>(),b.<span class="built_in">begin</span>()+<span class="number">3</span>);<span class="comment">//将b中0-2个元素赋值给a</span></span><br><span class="line"><span class="type">int</span> c[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">a</span>(c,c+<span class="number">7</span>);</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="(2)基本操作"></a>(2)基本操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span><span class="comment">//基本操作  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a, b;  </span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;  </span><br><span class="line"><span class="comment">//b为向量，将b的0-2个元素赋值给向量a  </span></span><br><span class="line">a.<span class="built_in">assign</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">begin</span>() + <span class="number">3</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//a含有4个值为2的元素  </span></span><br><span class="line">a.<span class="built_in">assign</span>(<span class="number">4</span>, <span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//返回a的最后一个元素  </span></span><br><span class="line">a.<span class="built_in">back</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//返回a的第一个元素  </span></span><br><span class="line">a.<span class="built_in">front</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//返回a的第i元素,当且仅当a存在  </span></span><br><span class="line">a[i];  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//清空a中的元素  </span></span><br><span class="line">a.<span class="built_in">clear</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//判断a是否为空，空则返回true，非空则返回false  </span></span><br><span class="line">a.<span class="built_in">empty</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除a向量的最后一个元素  </span></span><br><span class="line">a.<span class="built_in">pop_back</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除a中第一个（从第0个算起）到第二个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）结束  </span></span><br><span class="line">a.<span class="built_in">erase</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, a.<span class="built_in">begin</span>() + <span class="number">3</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//在a的最后一个向量后插入一个元素，其值为5  </span></span><br><span class="line">a.<span class="built_in">push_back</span>(<span class="number">5</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置(前面)插入数值5,  </span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">5</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//在a的第一个元素（从第0个算起）位置（前面）插入3个数，其值都为5  </span></span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//d为数组，在a的第一个元素（从第0个元素算起）的位置（前面）插入b的第三个元素到第5个元素（不包括b+6）  </span></span><br><span class="line"><span class="type">int</span> d[<span class="number">8</span>];  </span><br><span class="line">a.<span class="built_in">insert</span>(a.<span class="built_in">begin</span>() + <span class="number">1</span>, d + <span class="number">3</span>, d + <span class="number">6</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//返回a中元素的个数  </span></span><br><span class="line">a.<span class="built_in">size</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//返回a在内存中总共可以容纳的元素个数  </span></span><br><span class="line">a.<span class="built_in">capacity</span>();  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值随机  </span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//将a的现有元素个数调整至10个，多则删，少则补，其值为2  </span></span><br><span class="line">a.<span class="built_in">resize</span>(<span class="number">10</span>, <span class="number">2</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//将a的容量扩充至100，  </span></span><br><span class="line">a.<span class="built_in">reserve</span>(<span class="number">100</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//b为向量，将a中的元素和b中的元素整体交换  </span></span><br><span class="line">a.<span class="built_in">swap</span>(b);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//b为向量，向量的比较操作还有 != &gt;= &gt; &lt;= &lt;  </span></span><br><span class="line">a == b;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>assign</th><th>赋值</th></tr></thead><tbody><tr><td>insert</td><td>插入</td></tr><tr><td>resize</td><td>调整</td></tr><tr><td>reserve</td><td>扩充</td></tr></tbody></table><h2 id="3-反向迭代"><a href="#3-反向迭代" class="headerlink" title="(3)反向迭代"></a>(3)反向迭代</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::reverse_iterator iter=a.<span class="built_in">rbegin</span>();iter!=a.<span class="built_in">rend</span>();iter++)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;*iter&lt;&lt;endl;<span class="comment">//10 9 8 7 6 5 4 3 2 1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-插入"><a href="#4-插入" class="headerlink" title="(4)插入"></a>(4)插入</h2><table><thead><tr><th>描述</th><th>函数签名</th></tr></thead><tbody><tr><td>插入位置都在 <code>pos</code> 迭代器之前一个位置，返回的迭代器指向插入的第一个元素</td><td></td></tr><tr><td>在迭代器 <code>pos</code> 指定的位置之前插入一个新元素 <code>elem</code>，并返回表示新插入元素位置的迭代器</td><td><code>iterator insert(pos, elem)</code></td></tr><tr><td>在迭代器 <code>pos</code> 指定的位置之前插入 <code>n</code> 个元素 <code>elem</code>，并返回表示第一个新插入元素位置的迭代器</td><td><code>iterator insert(pos, n, elem)</code></td></tr><tr><td>在迭代器 <code>pos</code> 指定的位置之前，插入其他容器中位于 <code>[first, last)</code> 区域的所有元素，并返回表示第一个新插入元素位置的迭代器</td><td><code>iterator insert(pos, first, last)</code></td></tr><tr><td>在迭代器 <code>pos</code> 指定的位置之前，插入初始化列表（用大括号 {} 括起来的多个元素），中间有逗号隔开）中的所有的元素，并返回表示第一个新插入元素位置的迭代器</td><td><code>iterator insert(pos, initlist)</code></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;::iterator it1=a.<span class="built_in">begin</span>()+<span class="number">4</span>;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;::iterator it2=a.<span class="built_in">insert</span>(it1,&#123;<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-3</span>&#125;);</span><br><span class="line">        cout&lt;&lt;*it2&lt;&lt;endl;<span class="comment">//-1,并返回表示第一个新插入元素位置的迭代器</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> k:a)</span><br><span class="line">        &#123;</span><br><span class="line">                cout&lt;&lt;k&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//1 2 3 4 -1 -2 -3 5 6 7 8 9 10</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5"><a href="#5" class="headerlink" title="(5)"></a>(5)</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>pop_back()</td><td>删除 vector 容器中最后一个元素，该容器的大小（size）会减 1，但容量 (capacity) 不会发生改变。</td></tr><tr><td>erase(pos)</td><td>删除 vector 容器中 pos 迭代器指定位置处的元素，并返回指向被删除元素下一个位置的迭代器。该容器的大小 (size) 会减 1，但容量 (capacity) 不会发生改变。</td></tr><tr><td>???swap(beg)、pop_back ()</td><td>先调用 swap() 函数交换要删除的目标元素和容器最后一个元素的位置，然后使用 pop_back () 删除该目标元素。</td></tr><tr><td>erase(beg,end)</td><td>删除 vector 容器中位于迭代器 [beg, end) 指定区域内的所有元素，并返回指向被删除区域下一个位置元素的迭代器。该容器的大小 (size) 会减小，但容量 (capacity) 不会发生改变。</td></tr><tr><td>remove()</td><td>删除容器中所有和指定元素值相等的元素，并返回指向最后一个元素下一个位置的迭代器。值得一提的是，调用该函数不会改变容器的大小和容量。</td></tr><tr><td>clear()</td><td>删除 vector 容器中所有的元素，使其变成空的 vector 容器。该函数会改变 vector 的大小 (变为 0)，但不是改变其容量。</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test04</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;a = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">        <span class="type">int</span> size = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">ptrdiff_t</span> cnt = <span class="built_in">count</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">6</span>);<span class="comment">//ptrdiff==long long，用于计算6出现的次数</span></span><br><span class="line">        <span class="keyword">auto</span> it = <span class="built_in">remove</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">6</span>);<span class="comment">//移除所有的6，不会改变容器的大小和容量，只是覆盖</span></span><br><span class="line">        cout &lt;&lt; *it &lt;&lt; endl;<span class="comment">//7，remove 返回的迭代器 it 指向 7，也就是第一个不为 6 的元素之后的新尾部。</span></span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; endl;<span class="comment">//4</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> k : a)</span><br><span class="line">        &#123;</span><br><span class="line">                cout &lt;&lt; k &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//1 2 3 4 5 7 8 9 10 7 8 9 10</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        a.<span class="built_in">resize</span>(size - cnt);<span class="comment">//调整向量大小，除去末尾的6</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> k : a)</span><br><span class="line">        &#123;</span><br><span class="line">                cout &lt;&lt; k &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//1 2 3 4 5 7 8 9 10</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-deque-容器"><a href="#2-deque-容器" class="headerlink" title="2.deque 容器"></a>2.deque 容器</h1><p>头文件 <code>#include&lt;deque</code></p><h2 id="1-遍历容器"><a href="#1-遍历容器" class="headerlink" title="(1)遍历容器"></a>(1)遍历容器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">printdeque</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(deque&lt;<span class="type">int</span>&gt;::const_iterator it=d.<span class="built_in">begin</span>();it!=d.<span class="built_in">end</span>();it++)</span><br><span class="line">        <span class="comment">//注意迭代器也要换成带const的</span></span><br><span class="line">        &#123;</span><br><span class="line">                cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                <span class="comment">//加const后容器中数据不可修改</span></span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-构造容器"><a href="#2-构造容器" class="headerlink" title="(2)构造容器"></a>(2)构造容器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;d1;  </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">    d1.<span class="built_in">push_front</span>(i+<span class="number">1</span>);  </span><br><span class="line">  <span class="built_in">printdeque</span>(d1);  </span><br><span class="line">  <span class="comment">//区间赋值  </span></span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d2</span>(d1.<span class="built_in">begin</span>(), d1.<span class="built_in">end</span>());  </span><br><span class="line">  <span class="built_in">printdeque</span>(d2);  </span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d3</span>(<span class="number">10</span>, <span class="number">100</span>);  </span><br><span class="line">  <span class="built_in">printdeque</span>(d3);  </span><br><span class="line">  deque&lt;<span class="type">int</span>&gt;<span class="built_in">d4</span>(d3);  </span><br><span class="line">  <span class="built_in">printdeque</span>(d4);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 9 8 7 6 5 4 3 2 1  </span><br><span class="line">10 9 8 7 6 5 4 3 2 1  </span><br><span class="line">100 100 100 100 100 100 100 100 100 100  </span><br><span class="line">100 100 100 100 100 100 100 100 100 100</span><br></pre></td></tr></table></figure><h2 id="3-赋值操作"><a href="#3-赋值操作" class="headerlink" title="(3)赋值操作"></a>(3)赋值操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d1;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  d1.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printdeque</span>(d1);</span><br><span class="line"><span class="comment">//operator=赋值</span></span><br><span class="line">deuqe&lt;<span class="type">int</span>&gt;d2;</span><br><span class="line">d2=d1;</span><br><span class="line"><span class="built_in">printdeque</span>(d2);</span><br><span class="line"><span class="comment">//assign赋值</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d3;</span><br><span class="line">d3.<span class="built_in">assgin</span>(d1.<span class="built_in">begin</span>(),d1.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">printdeque</span>(d3);</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;d4;</span><br><span class="line">d4.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">printdeque</span>(d4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 2 3 4 5 6 7 8 9 10  </span><br><span class="line">1 2 3 4 5 6 7 8 9 10  </span><br><span class="line">1 2 3 4 5 6 7 8 9 10  </span><br><span class="line">100 100 100 100 100 100 100 100 100 100</span><br></pre></td></tr></table></figure><h2 id="4-插入和删除"><a href="#4-插入和删除" class="headerlink" title="(4)插入和删除"></a>(4)插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 deque 的内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printDeque</span><span class="params">(<span class="type">const</span> deque&lt;<span class="type">int</span>&gt;&amp; d)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> elem : d) &#123;</span><br><span class="line">        cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (d.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;(empty)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testDequeOperations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 头部插入</span></span><br><span class="line">    d.<span class="built_in">push_front</span>(<span class="number">10</span>);   <span class="comment">// 在头部插入 10</span></span><br><span class="line">    d.<span class="built_in">push_front</span>(<span class="number">20</span>);   <span class="comment">// 在头部插入 20</span></span><br><span class="line">    d.<span class="built_in">push_front</span>(<span class="number">30</span>);   <span class="comment">// 在头部插入 30</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 30 20 10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 尾部插入</span></span><br><span class="line">    d.<span class="built_in">push_back</span>(<span class="number">40</span>);    <span class="comment">// 在尾部插入 40</span></span><br><span class="line">    d.<span class="built_in">push_back</span>(<span class="number">50</span>);    <span class="comment">// 在尾部插入 50</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 30 20 10 40 50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 任意位置插入</span></span><br><span class="line">    d.<span class="built_in">insert</span>(d.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">100</span>);        <span class="comment">// 在第三个位置插入 100</span></span><br><span class="line">    d.<span class="built_in">insert</span>(d.<span class="built_in">end</span>() - <span class="number">1</span>, <span class="number">2</span>, <span class="number">200</span>);       <span class="comment">// 在倒数第二个位置插入两个 200</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 30 20 100 10 40 200 200 50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 头部删除</span></span><br><span class="line">    d.<span class="built_in">pop_front</span>();      <span class="comment">// 删除头部元素</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 20 100 10 40 200 200 50</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 尾部删除</span></span><br><span class="line">    d.<span class="built_in">pop_back</span>();       <span class="comment">// 删除尾部元素</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 20 100 10 40 200 200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 任意位置删除</span></span><br><span class="line">    d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>() + <span class="number">1</span>);   <span class="comment">// 删除第二个位置上的元素</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 20 10 40 200 200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除一个范围内的元素</span></span><br><span class="line">    d.<span class="built_in">erase</span>(d.<span class="built_in">begin</span>() + <span class="number">2</span>, d.<span class="built_in">end</span>() - <span class="number">1</span>); <span class="comment">// 删除第三个到倒数第二个元素</span></span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: 20 10 200</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空整个 deque</span></span><br><span class="line">    d.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">printDeque</span>(d);      <span class="comment">// 输出: (empty)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">testDequeOperations</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-数据存取"><a href="#5-数据存取" class="headerlink" title="(5)数据存取"></a>(5)数据存取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">deque d1;</span><br><span class="line">d1[<span class="number">2</span>];</span><br><span class="line">d1.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//d1的第二个元素</span></span><br><span class="line">d1.<span class="built_in">front</span>();</span><br><span class="line">d1.<span class="built_in">back</span>();</span><br><span class="line"><span class="comment">//访问d1的首尾元素</span></span><br></pre></td></tr></table></figure><h1 id="3-stack-容器"><a href="#3-stack-容器" class="headerlink" title="3. stack 容器"></a>3. stack 容器</h1><p>头文件 <code>#include&lt;stack&gt;</code><br>后进先出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">  s.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">  <span class="type">int</span> n=s.<span class="built_in">size</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;s.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//40 30 20 10</span></span><br><span class="line">    s.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="comment">//访问top后出栈</span></span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-queue-容器"><a href="#4-queue-容器" class="headerlink" title="4. queue 容器"></a>4. queue 容器</h1><p>头文件 <code>#include&lt;queue&gt;</code><br>先进先出</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">testqueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个temp用于打印元素</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt;temp=q;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;temp.<span class="built_in">front</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//输出队首元素</span></span><br><span class="line">  q.<span class="built_in">pop</span>();<span class="comment">//弹出队首元素</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队首尾元素</span></span><br><span class="line">cout&lt;&lt;q.<span class="built_in">front</span>()&lt;&lt;q.<span class="built_in">back</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;q.<span class="built_in">empty</span>()&lt;&lt;endl;</span><br><span class="line">cout&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">testqueue</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-string-容器"><a href="#5-string-容器" class="headerlink" title="5. string 容器"></a>5. string 容器</h1><h2 id="1-构造-1"><a href="#1-构造-1" class="headerlink" title="(1)构造"></a>(1)构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> test01</span><br><span class="line">&#123;</span><br><span class="line">string s1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s1=&quot;</span>&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* str= <span class="string">&quot;hello world!&quot;</span><span class="comment">//C风格的字符串str初始化为C++的string类型对象s2</span></span><br><span class="line">string <span class="built_in">s2</span>(str);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s2=&quot;</span>&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line"><span class="function">string <span class="title">s3</span><span class="params">(s2)</span></span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s3=&quot;</span>&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line"><span class="function">string <span class="title">s4</span><span class="params">(<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>)</span></span>;<span class="comment">//使用n个字符b初始化</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s4=&quot;</span>&lt;&lt;s4&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s1=  </span><br><span class="line">s2=hello world!  </span><br><span class="line">s3=hello world!  </span><br><span class="line">s4=bbbbbbbbbb</span><br></pre></td></tr></table></figure><h2 id="2-赋值"><a href="#2-赋值" class="headerlink" title="(2)赋值"></a>(2)赋值</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> test01</span><br><span class="line">&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1=<span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str1=&quot;</span>&lt;&lt;str1&lt;&lt;endl;</span><br><span class="line">string str2=str1;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str2=&quot;</span>&lt;&lt;str2&lt;&lt;endl;</span><br><span class="line">string str4;</span><br><span class="line">str4.<span class="built_in">assign</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str4=&quot;</span>&lt;&lt;str4&lt;&lt;endl;</span><br><span class="line">string str5;</span><br><span class="line">str5.<span class="built_in">assign</span>(<span class="string">&quot;hello&quot;</span>,<span class="number">3</span>);<span class="comment">//将前3个字符赋值给str5</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;str5=&quot;</span>&lt;&lt;str5&lt;&lt;endl;</span><br><span class="line">string str6;</span><br><span class="line">str6.<span class="built_in">assign</span>(str5);</span><br><span class="line">string str7;</span><br><span class="line">str7.<span class="built_in">assign</span>(<span class="number">10</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-拼接"><a href="#3-拼接" class="headerlink" title="(3)拼接"></a>(3)拼接</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">string s1=<span class="string">&quot;你&quot;</span>;</span><br><span class="line">s1+=<span class="string">&quot;好&quot;</span>;</span><br><span class="line">string s2=<span class="string">&quot;我也爱C语言&quot;</span>;</span><br><span class="line"><span class="comment">//s1.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//s1.append(&quot;you&quot;,2);</span></span><br><span class="line"><span class="comment">//s1.append(s2); 、</span></span><br><span class="line">s1.<span class="built_in">append</span>(s2,<span class="number">4</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">//从str2的第三个字符开始，截取4个加在末尾，第二个参数为起始字符的位置(位置从0开始计算)，第三个参数为字符的长度  </span></span><br><span class="line"><span class="comment">//中文字符占2个位置，英文字符占1个位置</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s1=&quot;</span>&lt;&lt;s1&lt;&lt;endl;<span class="comment">//你好爱C语言</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>&quot;我&quot;</code>（索引 <code>0</code>，长度 <code>1</code>）占两个字节。</li><li><code>&quot;也&quot;</code>（索引 <code>1</code>，长度 <code>1</code>）占两个字节。</li><li><code>&quot;爱&quot;</code>（索引 <code>2</code>，长度 <code>1</code>）占两个字节。</li><li><code>&quot;C&quot;</code>（索引 <code>3</code>，长度 <code>1</code>）占一个字节。</li><li><code>&quot;语&quot;</code>（索引 <code>4</code>，长度 <code>1</code>）占两个字节。</li><li><code>&quot;言&quot;</code>（索引 <code>5</code>，长度 <code>1</code>）占两个字节。</li></ul><h2 id="4-查找和替换"><a href="#4-查找和替换" class="headerlink" title="(4)查找和替换"></a>(4)查找和替换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string s=<span class="string">&quot;abcdefgdefg&quot;</span>;</span><br><span class="line"><span class="type">int</span> pos1=s.<span class="built_in">find</span>(<span class="string">&quot;de&quot;</span>);</span><br><span class="line"><span class="type">int</span> pos2=s.<span class="built_in">find</span>(<span class="string">&quot;df&quot;</span>);<span class="comment">//-1</span></span><br><span class="line"><span class="type">int</span> pos3=s.<span class="built_in">rfind</span>(<span class="string">&quot;df&quot;</span>);<span class="comment">//rfind是最后一次出现的位置，find是第一次出现的位置</span></span><br><span class="line">s.<span class="built_in">replace</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="string">&quot;1111&quot;</span>);<span class="comment">//从1号位起3个替换为1111</span></span><br><span class="line"><span class="comment">//a1111efgdefg</span></span><br></pre></td></tr></table></figure><h2 id="5-字符串比较"><a href="#5-字符串比较" class="headerlink" title="(5)字符串比较"></a>(5)字符串比较</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">string str1 = <span class="string">&quot;hfllo&quot;</span>;  </span><br><span class="line">string str2 = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line"><span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) == <span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (str1.<span class="built_in">compare</span>(str2) &gt; <span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;<span class="comment">//通过逐字符比较ASCII值，大于为1，小于为-1，等于为0,以第一个不一样的字符为准</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1大于str2</span><br></pre></td></tr></table></figure><ul><li><strong>数字 0-9</strong>：<code>48-57</code></li><li><strong>大写字母 A-Z</strong>：<code>65-90</code> </li><li><strong>小写字母 a-z</strong>：<code>97-122</code></li></ul><h2 id="6-字符提取"><a href="#6-字符提取" class="headerlink" title="(6)字符提取"></a>(6)字符提取</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">string str = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)  </span><br><span class="line">cout &lt;&lt; str[i] &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)  </span><br><span class="line">cout &lt;&lt; str.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="7-插入和删除"><a href="#7-插入和删除" class="headerlink" title="(7)插入和删除"></a>(7)插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string s1=<span class="string">&quot;abcdefgh&quot;</span>;</span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="string">&quot;xxx&quot;</span>);<span class="comment">//abxxxcdefgh</span></span><br><span class="line">s1.<span class="built_in">erase</span>(<span class="number">2</span>,<span class="number">3</span>);<span class="comment">//删去从2开始的3个字符</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;x&#x27;</span>);<span class="comment">//abcdefgh</span></span><br><span class="line">s1.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;x&#x27;</span>);<span class="comment">//abxxxcdefgh</span></span><br></pre></td></tr></table></figure><h2 id="8-子串"><a href="#8-子串" class="headerlink" title="(8)子串"></a>(8)子串</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s1=<span class="string">&quot;abd*cdf&quot;</span>;</span><br><span class="line"><span class="type">int</span> pos=s1.<span class="built_in">find</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">string s2=s1.<span class="built_in">substr</span>(<span class="number">0</span>,pos);<span class="comment">//abd</span></span><br></pre></td></tr></table></figure><h2 id="9-其他"><a href="#9-其他" class="headerlink" title="(9)其他"></a>(9)其他</h2><ol><li>string s; &#x2F;&#x2F; 生成一个空字符串s</li><li>string s(str); &#x2F;&#x2F; 拷贝构造函数生成str的复制品</li><li>string s(str, stridx); &#x2F;&#x2F; 将字符串str内”始于位置stridx”的部分当作字符串的初值</li><li>string s(str, stridx, strlen); &#x2F;&#x2F; 将字符串str内”始于stridx且长度顶多strlen”的部分作为字符串的初值</li><li>string s(cstr); &#x2F;&#x2F; 将C字符串（以NULL结束）作为s的初值</li><li>string s(chars, chars_len); &#x2F;&#x2F; 将C字符串前chars_len个字符作为字符串s的初值。</li><li>string s(num, ‘c’); &#x2F;&#x2F; 生成一个字符串，包含num个c字符</li><li>string s(“value”); string s &#x3D; “value”; &#x2F;&#x2F; 将s初始化为一个字符串字面值副本</li><li>string s(begin, end); &#x2F;&#x2F; 以区间begin&#x2F;end(不包含end)内的字符作为字符串s的初值</li><li>s.~string(); &#x2F;&#x2F;销毁所有字符，释放内存</li></ol><p>string s;</p><ol><li>s.empty(); &#x2F;&#x2F; s为空串 返回true</li><li>s.size(); &#x2F;&#x2F; 返回s中字符个数 类型应为：string::size_type</li><li>s[n]; &#x2F;&#x2F; 从0开始相当于下标访问</li><li>s1+s2; &#x2F;&#x2F; 把s1和s2连接成新串 返回新串</li><li>s1&#x3D;s2; &#x2F;&#x2F; 把s1替换为s2的副本</li><li><code>v1 == v2</code>; &#x2F;&#x2F; 比较，相等返回true</li><li><code>!=, &lt;, &lt;=, &gt;, &gt;=</code> 惯有操作 任何一个大写字母都小于任意的小写字母</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="string">&quot;abc&quot;</span>)</span></span>;</span><br><span class="line">s.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">strlen</span>(s.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把string字符串转化为C风格的字符串  </span></span><br><span class="line">string s = <span class="string">&quot;abcdefg&quot;</span>;  </span><br><span class="line"><span class="type">char</span> str[<span class="number">1000</span>];  </span><br><span class="line"><span class="built_in">strcpy</span>(str, s.<span class="built_in">c_str</span>());  </span><br><span class="line">str[<span class="number">0</span>] = <span class="string">&#x27;p&#x27;</span>;  </span><br><span class="line">str[<span class="number">5</span>] = <span class="string">&#x27;u&#x27;</span>;  <span class="comment">//pbcdeug</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-set-容器和-multiset-容器"><a href="#6-set-容器和-multiset-容器" class="headerlink" title="6. set 容器和 multiset 容器"></a>6. set 容器和 multiset 容器</h1><p><code>#include&lt;set&gt;</code><br><strong>set不允许容器中有重复的元素</strong><br><strong>multiset允许容器中有重复的元素</strong><br>其他操作基本一致</p><h2 id="1-遍历容器-1"><a href="#1-遍历容器-1" class="headerlink" title="(1)遍历容器"></a>(1)遍历容器</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printset</span><span class="params">(<span class="type">const</span> set&lt;<span class="type">int</span>&gt;&amp;s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;set数组为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::const_iterator it=s.<span class="built_in">begin</span>();it!=s.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmultiset</span><span class="params">(<span class="type">const</span> multiset&lt;<span class="type">int</span>&gt;&amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;multiset数组为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(multiset&lt;<span class="type">int</span>&gt;::const_iterator it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-插入和删除"><a href="#2-插入和删除" class="headerlink" title="(2)插入和删除"></a>(2)插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">30</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">40</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">50</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">60</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">70</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">80</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">90</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">100</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">110</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">120</span>);</span><br><span class="line"><span class="built_in">printset</span>(s);<span class="comment">//10 20 30 40 50 60 70 80 90 100 110 120</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it=s.<span class="built_in">begin</span>();</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it2;</span><br><span class="line">it2=s.<span class="built_in">erase</span>(++++it);<span class="comment">//删除30.删除迭代器所指元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">printset</span>(s);<span class="comment">//10 20 40 50 60 70 80 90 100 110 120</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it1=s.<span class="built_in">end</span>();</span><br><span class="line">s.<span class="built_in">erase</span>(it2,----it1);<span class="comment">//删除区间[it2,----it1)的所有元素，返回下一个元素的迭代器</span></span><br><span class="line"><span class="built_in">printset</span>(s);</span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">110</span>);</span><br><span class="line"><span class="built_in">printset</span>(s);<span class="comment">//10 20 120</span></span><br><span class="line">s.<span class="built_in">clear</span>();<span class="comment">//清空set容器</span></span><br><span class="line"><span class="built_in">printset</span>(s);<span class="comment">//set数组为空</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-查找和统计"><a href="#2-查找和统计" class="headerlink" title="(2)查找和统计"></a>(2)查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">10</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">20</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">30</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">40</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">30</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">60</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">70</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">80</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">70</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">100</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">110</span>);  </span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">120</span>);  </span><br><span class="line"><span class="built_in">printset</span>(s);</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::()iterator it1;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">it1=s.<span class="built_in">find</span>(<span class="number">70</span>);<span class="comment">//若存在，返回该键的元素的迭代器，若不存在，返回set.end()</span></span><br><span class="line"><span class="keyword">if</span>(it1!=s.<span class="built_in">end</span>()) cout&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;未找到元素&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="comment">//统计</span></span><br><span class="line"><span class="type">int</span> num=s.<span class="built_in">count</span>(<span class="number">30</span>);</span><br><span class="line">cout&lt;&lt;num&lt;&lt;endl;<span class="comment">//对于set而言，统计结果只有0和1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10 20 30 40 60 70 80 100 110 120  </span><br><span class="line">70  </span><br><span class="line">1</span><br></pre></td></tr></table></figure><h2 id="4-set-与-multiset"><a href="#4-set-与-multiset" class="headerlink" title="(4)set 与 multiset"></a>(4)set 与 multiset</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;s;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">20</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">40</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">30</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">60</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">80</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">70</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">100</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">110</span>);</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">120</span>);</span><br><span class="line"><span class="built_in">printset</span>(s);</span><br><span class="line">pair&lt;set&lt;<span class="type">int</span>&gt;::iterator,<span class="type">bool</span>&gt;ret =s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//insert()方法返回一个pair类型，pair&lt;set&lt;int&gt;::iterator,bool&gt;ret，这个first是迭代器，指向插入元素的位置,second是布尔值，表示是否插入成功</span></span><br><span class="line"><span class="keyword">if</span>(ret.second) cout&lt;&lt;<span class="string">&quot;第一次插入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;第一次插入失败&quot;</span>&lt;&lt;endl;</span><br><span class="line">pair&lt;set&lt;<span class="type">int</span>&gt;::iterator,<span class="type">bool</span>&gt;ret1 =s.<span class="built_in">insert</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(ret1.second) cout&lt;&lt;<span class="string">&quot;第二次插入成功&quot;</span>&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;第二次插入失败&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20 30 40 60 70 80 100 110 120  </span><br><span class="line">第一次插入成功  </span><br><span class="line">第二次插入失败</span><br></pre></td></tr></table></figure><h1 id="7-map-和-multimap-容器"><a href="#7-map-和-multimap-容器" class="headerlink" title="7. map 和 multimap 容器"></a>7. map 和 multimap 容器</h1><p>头文件 <code>#include&lt;map&gt;</code><br>map 中所有元素都是 pair, 第一个元素为 key (键值), 起到索引作用, 第二个元素为 value（实值）<br>所有元素都有根据元素键值自动排序</p><p>map&#x2F;multimap属于关联式容器，底层结构是用二叉树实现<br>优点：可以根据key值快速找到value值<br>map和multimap区别:<br>map不允许容器中有重复key值元素<br>multimap允许容器中有重复key值元素</p><h2 id="1-遍历"><a href="#1-遍历" class="headerlink" title="(1)遍历"></a>(1)遍历</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printmap</span><span class="params">(<span class="type">const</span> map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(m.<span class="built_in">empty</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;map容器为空&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::const_iterator it=m.<span class="built_in">begin</span>();it!=m.<span class="built_in">end</span>();it++)</span><br><span class="line">  &#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;学号:&quot;</span>&lt;&lt;(*it).first&lt;&lt;<span class="string">&quot;  分数:&quot;</span>&lt;&lt;(*it).second&lt;&lt;endl;</span><br><span class="line">  &#125;  </span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">1</span>,<span class="number">60</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">2</span>,<span class="number">95</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">4</span>,<span class="number">73</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">3</span>,<span class="number">81</span>));</span><br><span class="line"><span class="built_in">printmap</span>(m);<span class="comment">//按照key值自动排序</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;<span class="built_in">m2</span>(m);<span class="comment">//拷贝构造</span></span><br><span class="line"><span class="built_in">printmap</span>(m2);</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m3;</span><br><span class="line">m3=m2;</span><br><span class="line"><span class="built_in">printmap</span>(m3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-大小和转换"><a href="#2-大小和转换" class="headerlink" title="(2)大小和转换"></a>(2)大小和转换</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ma;</span><br><span class="line">ma.<span class="built_in">size</span>();<span class="comment">//size()大小</span></span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;ma1;</span><br><span class="line">ma.<span class="built_in">swap</span>(ma1);<span class="comment">//swap()转换</span></span><br></pre></td></tr></table></figure><h2 id="3-插入和删除"><a href="#3-插入和删除" class="headerlink" title="(3)插入和删除"></a>(3)插入和删除</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">1</span>,<span class="number">60</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">3</span>,<span class="number">95</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">4</span>,<span class="number">73</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>,<span class="type">int</span>&gt;(<span class="number">5</span>,<span class="number">81</span>));</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="number">2</span>,<span class="number">10</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::<span class="built_in">value_type</span>(<span class="number">6</span>,<span class="number">30</span>));</span><br><span class="line">m[<span class="number">7</span>]=<span class="number">40</span>;<span class="comment">//这种插数方法和其他的不同在于可以修改已经插入的key对应的value</span></span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line"></span><br><span class="line">m.<span class="built_in">erase</span>(m.<span class="built_in">begin</span>(),++++m.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">m.<span class="built_in">erase</span>(<span class="number">4</span>);<span class="comment">//按照key删除</span></span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line">m.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">printmap</span>(m);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">学号：1 分数：60  </span><br><span class="line">学号：2 分数：10  </span><br><span class="line">学号：3 分数：95  </span><br><span class="line">学号：4 分数：73  </span><br><span class="line">学号：5 分数：81  </span><br><span class="line">学号：6 分数：30  </span><br><span class="line">学号：7 分数：40  </span><br><span class="line">  </span><br><span class="line">学号：3 分数：95  </span><br><span class="line">学号：4 分数：73  </span><br><span class="line">学号：5 分数：81  </span><br><span class="line">学号：6 分数：30  </span><br><span class="line">学号：7 分数：40  </span><br><span class="line">  </span><br><span class="line">学号：3 分数：95  </span><br><span class="line">学号：5 分数：81  </span><br><span class="line">学号：6 分数：30  </span><br><span class="line">学号：7 分数：40</span><br></pre></td></tr></table></figure><h2 id="4-查找和统计"><a href="#4-查找和统计" class="headerlink" title="(4)查找和统计"></a>(4)查找和统计</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">1</span>,<span class="number">60</span>));</span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">3</span>, <span class="number">95</span>));  </span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">4</span>, <span class="number">73</span>));  </span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">5</span>, <span class="number">81</span>));  </span><br><span class="line">m.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;<span class="type">int</span>, <span class="type">int</span>&gt;(<span class="number">2</span>, <span class="number">84</span>));</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;::iterator it;</span><br><span class="line">it=m.<span class="built_in">find</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(it!=m.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;it-&gt;second&lt;&lt;endl;<span class="comment">//73</span></span><br><span class="line">  <span class="comment">//与cout &lt;&lt; (*it).second &lt;&lt; endl;等价</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;编号不存在&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;m.<span class="built_in">count</span>(<span class="number">4</span>)&lt;&lt;endl;<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h1 id="8-priority-queue"><a href="#8-priority-queue" class="headerlink" title="8. priority_queue"></a>8. priority_queue</h1><p>头文件 <code>#include&lt;queue&gt;</code></p><p><code>priority_queue</code> 是一个元素有序排列的队列，默认队列头部元素优先级最高。因为是一个队列，只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。它能够实现常数时间的（默认）最大元素查找，对数代价的插入与释出</p><h2 id="1-构造-2"><a href="#1-构造-2" class="headerlink" title="(1)构造"></a>(1)构造</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="type">int</span>&gt;pq1;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,greater&lt;<span class="type">int</span>&gt;&gt;pq2;</span><br></pre></td></tr></table></figure><ul><li><code>priority_queue</code> 有三个模板参数：元素类型（<code>T</code>），底层容器类型（<code>Container</code>，默认为 <code>vector&lt;T&gt;</code>），以及比较方式（<code>Compare</code>，默认为 <code>std::less&lt;T&gt;</code>）。</li><li>默认构造的 <code>priority_queue</code> (<code>priority_queue&lt;int&gt;</code>) 是一个<strong>最大堆</strong>，其中最大的元素在堆顶。</li><li>通过使用 <code>std::greater&lt;int&gt;</code> 作为比较对象 (<code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;</code>)，你可以创建一个<strong>最小堆</strong>，其中最小的元素在堆顶。</li></ul><h2 id="2-元素访问"><a href="#2-元素访问" class="headerlink" title="(2)元素访问"></a>(2)元素访问</h2><p>top () 访问栈顶元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt;,less&lt;<span class="type">int</span>&gt;&gt;pq1;</span><br><span class="line">pq1.<span class="built_in">push</span>(<span class="number">10</span>);</span><br><span class="line">pq1.<span class="built_in">push</span>(<span class="number">40</span>);</span><br><span class="line">pq1.<span class="built_in">push</span>(<span class="number">20</span>);</span><br><span class="line">cout&lt;&lt;pq1.<span class="built_in">top</span>()&lt;&lt;endl;<span class="comment">//40</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-容量"><a href="#3-容量" class="headerlink" title="(3)容量"></a>(3)容量</h2><p>empty ()<br>size ()</p><h2 id="4-修改器"><a href="#4-修改器" class="headerlink" title="(4)修改器"></a>(4)修改器</h2><p>push 插入元素并排序<br>pop 删除队首元素并排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt;pq1;</span><br><span class="line">pq1.<span class="built_in">push</span>(<span class="number">10</span>);  </span><br><span class="line">    pq1.<span class="built_in">push</span>(<span class="number">40</span>);  </span><br><span class="line">    pq1.<span class="built_in">push</span>(<span class="number">20</span>);  </span><br><span class="line">    pq1.<span class="built_in">push</span>(<span class="number">30</span>);</span><br><span class="line">    <span class="keyword">while</span>(!pq1.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">      cout&lt;&lt;pq1.<span class="built_in">top</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">      pq1.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;<span class="comment">//40 30 20 10</span></span><br><span class="line">    <span class="comment">//如果是priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;pq1;则10 20 30 40</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-STL-常用算法"><a href="#9-STL-常用算法" class="headerlink" title="9. STL 常用算法"></a>9. STL 常用算法</h1><p>下面基本上都需要 <code>#include&lt;algorithm&gt;</code> 头文件</p><h2 id="1-for-each-和-transform"><a href="#1-for-each-和-transform" class="headerlink" title="(1)for_each 和 transform"></a>(1)for_each 和 transform</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  v.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vtarget;</span><br><span class="line">vtarget.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line"><span class="built_in">transform</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), vtarget.<span class="built_in">begin</span>(), <span class="built_in">Transform</span>());</span><br><span class="line">for_each(vtarget.<span class="built_in">begin</span>(), vtarget.<span class="built_in">end</span>(), <span class="built_in">myprint</span>());</span><br><span class="line"><span class="comment">//101 102 103 104 105 106 107 108 109 110</span></span><br></pre></td></tr></table></figure><ul><li><code>v.begin(), v.end()</code>：表示要转换的输入范围是 <code>v</code> 的起始到末尾。</li><li><code>vtarget.begin()</code>：表示转换后的结果要放到 <code>vtarget</code> 中，从其开始位置存储。</li><li><code>Transform()</code>：这是一个<strong>函数对象</strong>或<strong>仿函数</strong>，用于指定要对输入范围的每个元素执行的操作。<br><strong>假定的 <code>Transform</code> 类</strong></li></ul><p><code>Transform</code> 需要是一个函数对象，类似于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Transform</span> &#123;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">  </span>&#123;         </span><br><span class="line">    <span class="keyword">return</span> val + <span class="number">100</span>;     </span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>该类重载了 <code>operator()</code>，使得 <code>Transform</code> 类的对象能够像函数一样被调用。</li><li>在 <code>transform</code> 函数中，每次调用 <code>Transform()</code> 时，都会对输入的元素执行 <code>val + 100</code> 的操作。</li><li>因此，<code>v</code> 中的每个元素 <code>1, 2, ..., 10</code> 将被转换为 <code>101, 102, ..., 110</code>，并存储在 <code>vtarget</code> 中。</li><li><code>for_each</code> 是 C++ 标准库中的另一个算法，用于对范围内的每个元素执行某个操作。</li><li>这行代码的参数：<ul><li><code>vtarget.begin(), vtarget.end()</code>：表示对 <code>vtarget</code> 的所有元素执行操作。</li><li><code>myprint()</code>：这是另一个函数对象，用于指定对每个元素要执行的操作。<br><strong>假定的 <code>myprint</code> 类</strong></li></ul></li></ul><p><code>myprint</code> 需要是一个函数对象，类似于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">myprint</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> val)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>该类重载了 <code>operator()</code>，使得 <code>myprint</code> 类的对象可以像函数一样被调用。</li></ul><table><thead><tr><th>函数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>find</td><td>查找元素</td><td></td></tr><tr><td>find_if</td><td>按条件查找元素</td><td></td></tr><tr><td>adjacent_find</td><td>查找相邻重复元素</td><td></td></tr><tr><td>binary_search</td><td>二分查找法</td><td></td></tr><tr><td>count</td><td>统计元素个数</td><td></td></tr><tr><td>count_if</td><td>按条件统计元素个数</td><td></td></tr></tbody></table><h2 id="2-find"><a href="#2-find" class="headerlink" title="(2)find"></a>(2)find</h2><ul><li><code>find</code> 用于<strong>查找指定元素</strong>。</li><li>如果在指定的范围内找到了目标元素，它会<strong>返回指向该元素的迭代器</strong>。</li><li>如果找不到目标元素，则返回一个**结束迭代器 (<code>end()</code>)**，表示目标元素不在该范围内。<br>函数原型<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">find</span><span class="params">(iterator beg, iterator end, <span class="type">const</span> T&amp; value)</span></span>;</span><br></pre></td></tr></table></figure></li><li><strong><code>iterator beg</code></strong>: 开始迭代器，表示查找范围的起点（包括 <code>beg</code>）。</li><li><strong><code>iterator end</code></strong>: 结束迭代器，表示查找范围的终点（不包括 <code>end</code> 本身）。</li><li><strong><code>value</code></strong>: 要查找的目标值，函数将在 <code>[beg, end)</code> 范围内寻找该值。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">  v.<span class="built_in">push_back</span>(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it=<span class="built_in">find</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),<span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span>(it==v.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;未找到&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  cout&lt;&lt;<span class="string">&quot;找到:&quot;</span>&lt;&lt;*it&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-find-if"><a href="#3-find-if" class="headerlink" title="(3)find_if"></a>(3)find_if</h2><p>功能描述:<br>按条件查找元素<br>函数原型: <code>find_if(iterator beg, iterator end, _Pred); </code><br>按值查找元素,找到返回指定位置选代器,找不到返回结束选代器位置<br>beg开始迭代器<br>end结束迭代器<br><code>_Pred</code> 函数或者谓词(返回bool类型的仿函数)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">mycompare</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> a &gt; <span class="number">5</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">v.<span class="built_in">push_back</span>(i + <span class="number">1</span>);  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it = <span class="built_in">find_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">mycompare</span>());  </span><br><span class="line"><span class="keyword">if</span> (it == v.<span class="built_in">end</span>())  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到&quot;</span> &lt;&lt; *it &lt;&lt; endl;<span class="comment">//找到6  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-binary-search"><a href="#4-binary-search" class="headerlink" title="(4)binary_search"></a>(4)binary_search</h2><p>查找指定的元素，查到返回true，否则返回false<br>注意：在无序序列中不可用,因为结果会出错<br>降序也不行，只能用于<strong>升序</strong>序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;  </span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">binary_search</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">6</span>))  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;找到了&quot;</span> &lt;&lt; endl;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="5-adjacent-find"><a href="#5-adjacent-find" class="headerlink" title="(5)adjacent_find"></a>(5)adjacent_find</h2><p>查找相邻重复元素，返回相邻元素的第一个位置的迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>&#125;;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator pos = <span class="built_in">adjacent_find</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());  </span><br><span class="line"><span class="keyword">if</span> (pos == v.<span class="built_in">end</span>())  </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;未找到&quot;</span> &lt;&lt; endl;  </span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">cout &lt;&lt; *pos &lt;&lt; endl;<span class="comment">//输出3</span></span><br></pre></td></tr></table></figure><h2 id="6-count"><a href="#6-count" class="headerlink" title="(6)count"></a>(6)count</h2><p>统计元素个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;  </span><br><span class="line"><span class="type">int</span> cou = <span class="built_in">count</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">3</span>);  </span><br><span class="line">cout &lt;&lt; cou &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="7-count-if"><a href="#7-count-if" class="headerlink" title="(7)count_if"></a>(7)count_if</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">greaterfive</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> a &gt; <span class="number">5</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;  </span><br><span class="line"><span class="type">int</span> cou = <span class="built_in">count_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greaterfive</span>());  </span><br><span class="line">cout &lt;&lt; cou &lt;&lt; endl;  <span class="comment">//4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-sort-排序算法"><a href="#8-sort-排序算法" class="headerlink" title="(8)sort 排序算法"></a>(8)sort 排序算法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">90</span>&#125;;  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//10 30 50 20 40 90</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//10 20 30 40 50 90</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());  <span class="comment">//greater&lt;int&gt;() 表示 &quot;大于&quot;，因此 sort 函数会将较大的元素排在前面，形成降序排列。</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//90 50 40 30 20 10</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-random-shuffle"><a href="#9-random-shuffle" class="headerlink" title="(9)random_shuffle"></a>(9)random_shuffle</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">srand</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));  <span class="comment">//设置随机数种子</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;  </span><br><span class="line"><span class="built_in">random_shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());<span class="comment">//随机打乱v的排序</span></span><br></pre></td></tr></table></figure><p>在 C++11 及更高版本中，推荐使用 <code>std::shuffle</code> 替代 <code>random_shuffle</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// for std::shuffle</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span>    <span class="comment">// for std::default_random_engine</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; v = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    std::random_device rd;  <span class="comment">// 用于获取随机种子</span></span><br><span class="line">    <span class="function">std::default_random_engine <span class="title">rng</span><span class="params">(rd())</span></span>;  <span class="comment">// 随机数生成器</span></span><br><span class="line">    std::<span class="built_in">shuffle</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), rng);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-merge"><a href="#10-merge" class="headerlink" title="(10)merge"></a>(10)merge</h2><p>可以把两个有序序列合在一起，形成一个新的有序序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v2;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line">v1.<span class="built_in">push_back</span>(i);  </span><br><span class="line">v2.<span class="built_in">push_back</span>(i + <span class="number">1</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vTarget;<span class="comment">//目标容器  </span></span><br><span class="line">vTarget.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>());  </span><br><span class="line"><span class="built_in">merge</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), vTarget.<span class="built_in">begin</span>());  </span><br><span class="line">for_each(vTarget.<span class="built_in">begin</span>(), vTarget.<span class="built_in">end</span>(), myprint);  <span class="comment">//0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-reverse"><a href="#11-reverse" class="headerlink" title="(11)reverse"></a>(11)reverse</h2><p>逆序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">20</span>&#125;;</span><br><span class="line">  for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myprint);<span class="comment">//10 30 40 50 20</span></span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  <span class="built_in">reverse</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br><span class="line">  for_each(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),myprint);<span class="comment">//20 50 40 30 10</span></span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-copy"><a href="#12-copy" class="headerlink" title="(12)copy"></a>(12)copy</h2><p>将容器内指定范围的元素拷贝到另一容器中<br>注意：<strong>新容器需要预留空间</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">mypriny</span><span class="params">(<span class="type">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  cout&lt;&lt;val&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">20</span>&#125;;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;v2;</span><br><span class="line">  v2.<span class="built_in">resize</span>(v.<span class="built_in">size</span>());</span><br><span class="line">  <span class="built_in">copy</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>(),v2.<span class="built_in">begin</span>());</span><br><span class="line">  for_each(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),myprint);<span class="comment">//10 30 40 50 20</span></span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-replace-和-replace-if"><a href="#13-replace-和-replace-if" class="headerlink" title="(13)replace 和 replace_if"></a>(13)replace 和 replace_if</h2><p>replace将容器内指定范围的旧元素修改为新元素<br>replace_if将区间内满足条件替换成指定元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//compare是一个仿函数（函数对象）。通过重载 operator()，使得 compare 类的对象可以像函数一样被调用。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">compare</span>  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">return</span> a &gt;= <span class="number">40</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">20</span>&#125;;  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//10 30 40 30 20 10 30 40 50 20</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="built_in">replace</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + <span class="number">4</span>, <span class="number">30</span>, <span class="number">300</span>);  <span class="comment">//[v.begin(), v.begin() + 4)所有值为 30 的元素替换为 300</span></span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//10 300 40 300 20 10 30 40 50 20</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="built_in">replace_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="built_in">compare</span>(), <span class="number">66</span>);  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  <span class="comment">//10 66 66 66 20 10 30 66 66 20</span></span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-swap"><a href="#14-swap" class="headerlink" title="(14)swap"></a>(14)swap</h2><p>交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;v=&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">20</span>&#125;;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v1;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)  v1.<span class="built_in">push_back</span>(i + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">swap</span>(v, v1);  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  </span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><h2 id="15-accumulate-和-fill"><a href="#15-accumulate-和-fill" class="headerlink" title="(15)accumulate 和 fill"></a>(15)accumulate 和 fill</h2><p><code>#include&lt;numeric&gt;</code></p><p>accumulate计算容器元素累计总和<br>fill向容器中添加元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">myprint</span><span class="params">(<span class="type">int</span> val)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v&#123;<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">20</span>&#125;;  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="type">int</span> total=<span class="built_in">accumulate</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), <span class="number">0</span>);  </span><br><span class="line"><span class="comment">//第三个参数表示起始累加值，0表示最后结果加0  </span></span><br><span class="line">cout &lt;&lt; total &lt;&lt; endl;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test02</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;  </span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">10</span>);  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="built_in">fill</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>() - <span class="number">2</span>, <span class="number">6</span>);  </span><br><span class="line">for_each(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), myprint);  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10 30 40 30 20 10 30 40 50 20  </span><br><span class="line">2800  </span><br><span class="line">0 0 0 0 0 0 0 0 0  </span><br><span class="line">6 6 6 6 6 6 6 6 0 0</span><br></pre></td></tr></table></figure><h2 id="16-交集，并集，差集"><a href="#16-交集，并集，差集" class="headerlink" title="(16)交集，并集，差集"></a>(16)交集，并集，差集</h2><p>set_intersection求两个容器的交集<br>set_union并集<br>set_difference差集</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// for set_intersection, set_union, set_difference</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printVector</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> val : v) &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 两个有序的 vector 容器</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v2 = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; result; <span class="comment">// 用于存储结果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求交集</span></span><br><span class="line">    result.<span class="built_in">resize</span>(<span class="built_in">min</span>(v1.<span class="built_in">size</span>(), v2.<span class="built_in">size</span>())); <span class="comment">// 交集的最大可能大小为两个容器的最小值</span></span><br><span class="line">    <span class="keyword">auto</span> it = <span class="built_in">set_intersection</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), result.<span class="built_in">begin</span>());</span><br><span class="line">    result.<span class="built_in">resize</span>(it - result.<span class="built_in">begin</span>()); <span class="comment">// 调整结果大小为实际交集元素的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Intersection of v1 and v2: &quot;</span>;</span><br><span class="line">    <span class="built_in">printVector</span>(result); <span class="comment">// 输出交集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求并集</span></span><br><span class="line">    result.<span class="built_in">clear</span>();</span><br><span class="line">    result.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>() + v2.<span class="built_in">size</span>()); <span class="comment">// 并集的最大可能大小为两个容器的和</span></span><br><span class="line">    it = <span class="built_in">set_union</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), result.<span class="built_in">begin</span>());</span><br><span class="line">    result.<span class="built_in">resize</span>(it - result.<span class="built_in">begin</span>()); <span class="comment">// 调整结果大小为实际并集元素的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Union of v1 and v2: &quot;</span>;</span><br><span class="line">    <span class="built_in">printVector</span>(result); <span class="comment">// 输出并集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求差集 v1 - v2</span></span><br><span class="line">    result.<span class="built_in">clear</span>();</span><br><span class="line">    result.<span class="built_in">resize</span>(v1.<span class="built_in">size</span>()); <span class="comment">// 差集的最大可能大小为第一个容器的大小</span></span><br><span class="line">    it = <span class="built_in">set_difference</span>(v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), result.<span class="built_in">begin</span>());</span><br><span class="line">    result.<span class="built_in">resize</span>(it - result.<span class="built_in">begin</span>()); <span class="comment">// 调整结果大小为实际差集元素的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Difference of v1 and v2 (v1 - v2): &quot;</span>;</span><br><span class="line">    <span class="built_in">printVector</span>(result); <span class="comment">// 输出差集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求差集 v2 - v1</span></span><br><span class="line">    result.<span class="built_in">clear</span>();</span><br><span class="line">    result.<span class="built_in">resize</span>(v2.<span class="built_in">size</span>()); <span class="comment">// 差集的最大可能大小为第二个容器的大小</span></span><br><span class="line">    it = <span class="built_in">set_difference</span>(v2.<span class="built_in">begin</span>(), v2.<span class="built_in">end</span>(), v1.<span class="built_in">begin</span>(), v1.<span class="built_in">end</span>(), result.<span class="built_in">begin</span>());</span><br><span class="line">    result.<span class="built_in">resize</span>(it - result.<span class="built_in">begin</span>()); <span class="comment">// 调整结果大小为实际差集元素的大小</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Difference of v2 and v1 (v2 - v1): &quot;</span>;</span><br><span class="line">    <span class="built_in">printVector</span>(result); <span class="comment">// 输出差集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17-next-premutation"><a href="#17-next-premutation" class="headerlink" title="(17)next_premutation"></a>(17)next_premutation</h2><p>全排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;vec;  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)  </span><br><span class="line">&#123;  </span><br><span class="line">vec.<span class="built_in">emplace_back</span>(i + <span class="number">1</span>);  <span class="comment">//emplace_back(i + 1)是一个更有效的插入方式（类似于 push_back），用来在容器末尾直接构造元素。</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> k : vec)  </span><br><span class="line">cout &lt;&lt; k &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">next_permutation</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()))  </span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> k : vec)  </span><br><span class="line">cout &lt;&lt; k &lt;&lt; <span class="string">&quot; &quot;</span>;  </span><br><span class="line">cout &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>next_permutation</code> 是 C++ <code>&lt;algorithm&gt;</code> 头文件中的一个函数，用于生成从当前排列组合的下一个字典序排列。</li><li>如果当前的排列组合已经是最大的排列组合，则 <code>next_permutation</code> 会返回 <code>false</code>，否则返回 <code>true</code>。</li><li>需要注意，<code>next_permutation</code> 只能在<strong>有序</strong>的容器上工作，因此 <code>vec</code> 必须按升序（或其他顺序）排列才能生成所有排列组合。<br>输出：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 2 3  </span><br><span class="line">1 3 2  </span><br><span class="line">2 1 3  </span><br><span class="line">2 3 1  </span><br><span class="line">3 1 2  </span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure></li></ul><h2 id="18-lower-bound-和-upper-bound"><a href="#18-lower-bound-和-upper-bound" class="headerlink" title="(18)lower_bound 和 upper_bound"></a>(18)lower_bound 和 upper_bound</h2><p>lower_bound( )和upper_bound( )都是利用二分查找的方法在一个排好序的数组中进行查找的。</p><p>在从小到大的排序数组中，lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>也可以用于vector容器，返回值是迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">6</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">34</span> &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 默认的排序是从小到大，因此这里其实是多余的操作</span></span><br><span class="line">    <span class="built_in">sort</span>(num, num + <span class="number">6</span>);  <span class="comment">// 按从小到大排序 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 lower_bound 查找第一个大于或等于 7 的位置</span></span><br><span class="line">    <span class="type">int</span> pos1 = <span class="built_in">lower_bound</span>(num, num + <span class="number">6</span>, <span class="number">7</span>) - num;  </span><br><span class="line">    <span class="comment">// lower_bound 返回的迭代器减去 num 的起始地址，得到相应的位置索引。</span></span><br><span class="line">    cout &lt;&lt; pos1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num[pos1] &lt;&lt; endl;  <span class="comment">// 输出：3 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 upper_bound 查找第一个大于 7 的位置</span></span><br><span class="line">    <span class="type">int</span> pos2 = <span class="built_in">upper_bound</span>(num, num + <span class="number">6</span>, <span class="number">7</span>) - num; </span><br><span class="line">    cout &lt;&lt; pos2 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num[pos2] &lt;&lt; endl;  <span class="comment">// 输出：4 15</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按从大到小排序</span></span><br><span class="line">    <span class="built_in">sort</span>(num, num + <span class="number">6</span>, cmd);  <span class="comment">// cmd 定义为从大到小排序</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 lower_bound 查找第一个小于或等于 7 的位置</span></span><br><span class="line">    <span class="type">int</span> pos3 = <span class="built_in">lower_bound</span>(num, num + <span class="number">6</span>, <span class="number">7</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()) - num; </span><br><span class="line">    cout &lt;&lt; pos3 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num[pos3] &lt;&lt; endl;  <span class="comment">// 输出：2 7</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 upper_bound 查找第一个小于 7 的位置</span></span><br><span class="line">    <span class="type">int</span> pos4 = <span class="built_in">upper_bound</span>(num, num + <span class="number">6</span>, <span class="number">7</span>, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()) - num; </span><br><span class="line">    cout &lt;&lt; pos4 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; num[pos4] &lt;&lt; endl;  <span class="comment">// 输出：3 4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考教程： &lt;a href=&quot;https://blog.algorithmpark.xyz/2023/06/08/language/cpp-STL/#9-STL%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95&quot;&gt;cpp-STL - AlgorithmPark&lt;/a&gt;&lt;br&gt;基本上是转载，跟着写了一遍理思路。&lt;/p&gt;</summary>
    
    
    
    <category term="STL" scheme="https://strangersinsist.github.io/categories/STL/"/>
    
    
    <category term="cpp" scheme="https://strangersinsist.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="https://strangersinsist.github.io/2024/09/25/docker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://strangersinsist.github.io/2024/09/25/docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-09-24T16:49:41.491Z</published>
    <updated>2024-09-25T13:55:24.985Z</updated>
    
    <content type="html"><![CDATA[<p>小白的docker学习全过程</p><span id="more"></span><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1HP4118797/">黑马程序员Docker快速入门到项目部署，MySQL部署+Nginx部署+docker自定义镜像+DockerCompose项目实战一套搞定_哔哩哔哩_bilibili</a></li><li><a href="https://docker-practice.github.io/zh-cn/install/ubuntu.html">Ubuntu · Docker – 从入门到实践 (docker-practice.github.io)</a></li><li><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程 (runoob.com)</a></li></ol><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li>开源的应用容器引擎，基于 GO 语言</li><li>可以让开发者打包应用以及依赖报到一个轻量级可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</li></ol><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ul><li>镜像 image ，相当于一个 root 文件系统</li><li>容器 container ,镜像是静态的定义，容器是镜像运行时的实体，容器可以被创建，启动，停止，删除，暂停等等。</li><li>仓库 respository，一个代码控制中心，用来保存镜像,目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/">Docker Hub</a>。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</li><li>Dockerfile ,一个文本文件，包含了构建 Docker 镜像的所有指令。<a href="https://www.runoob.com/docker/docker-dockerfile.html">Docker Dockerfile | 菜鸟教程 (runoob.com)</a></li><li>Docker Compose, Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过Compose，可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。<a href="https://www.runoob.com/docker/docker-compose.html">Docker Compose | 菜鸟教程 (runoob.com)</a></li><li>Swarm 集群管理，<a href="https://www.runoob.com/docker/docker-swarm.html">Swarm 集群管理 | 菜鸟教程 (runoob.com)</a></li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\zhuyu&gt; wsl --list --verbose</span><br><span class="line">  NAME      STATE           VERSION</span><br><span class="line">* Ubuntu    Running         2</span><br><span class="line">PS C:\Users\zhuyu&gt; wsl</span><br><span class="line">Welcome to fish, the friendly interactive shell</span><br><span class="line">Type help for instructions on how to use fish</span><br><span class="line">zyh@QAQ /m/c/U/zhuyu&gt; neofetch</span><br><span class="line">            .-/+oossssoo+/-.               zyh@QAQ</span><br><span class="line">        `:+ssssssssssssssssss+:`           -------</span><br><span class="line">      -+ssssssssssssssssssyyssss+-         OS: Ubuntu 22.04.3 LTS on Windows 10 x86_64</span><br><span class="line">    .ossssssssssssssssssdMMMNysssso.       Kernel: 5.15.153.1-microsoft-standard-WSL2</span><br><span class="line">   /ssssssssssshdmmNNmmyNMMMMhssssss/      Uptime: 5 mins</span><br><span class="line">  +ssssssssshmydMMMMMMMNddddyssssssss+     Packages: 521 (dpkg), 6 (snap)</span><br><span class="line"> /sssssssshNMMMyhhyyyyhmNMMMNhssssssss/    Shell: fish 3.3.1</span><br><span class="line">.ssssssssdMMMNhsssssssssshNMMMdssssssss.   Terminal: Windows Terminal</span><br><span class="line">+sssshhhyNMMNyssssssssssssyNMMMysssssss+   CPU: 11th Gen Intel i5-1135G7 (8) @ 2.419GHz</span><br><span class="line">ossyNMMMNyMMhsssssssssssssshmmmhssssssso   GPU: 613e:00:00.0 Microsoft Corporation Device 008e</span><br><span class="line">ossyNMMMNyMMhsssssssssssssshmmmhssssssso   Memory: 525MiB / 7808MiB</span><br><span class="line">+sssshhhyNMMNyssssssssssssyNMMMysssssss+</span><br><span class="line">.ssssssssdMMMNhsssssssssshNMMMdssssssss.</span><br><span class="line"> /sssssssshNMMMyhhyyyyhdNMMMNhssssssss/</span><br><span class="line">  +sssssssssdmydMMMMMMMMddddyssssssss+</span><br><span class="line">   /ssssssssssshdmNNNNmyNMMMMhssssss/</span><br><span class="line">    .ossssssssssssssssssdMMMNysssso.</span><br><span class="line">      -+sssssssssssssssssyyyssss+-</span><br><span class="line">        `:+ssssssssssssssssss+:`</span><br><span class="line">            .-/+oossssoo+/-.</span><br><span class="line"></span><br><span class="line">zyh@QAQ /m/c/U/zhuyu&gt;                 </span><br></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p><strong>检查 WSL 安装状态</strong>：<code>wsl --list --verbose</code><br><strong>进入 WSL</strong>：<code>wsl</code><br><strong>展示系统信息</strong>： <code>neofetch</code> 是一个命令行工具，用于显示系统信息和操作系统的 ASCII 艺术图案。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我按照这个教程来的：<a href="https://docker-practice.github.io/zh-cn/install/ubuntu.html">Ubuntu · Docker – 从入门到实践 (docker-practice.github.io)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line">Welcome to fish, the friendly interactive shell</span><br><span class="line">Type help for instructions on how to use fish</span><br><span class="line">zyh@QAQ ~&gt; $ sudo apt-get update</span><br><span class="line">fish: Expected a variable name after this $.</span><br><span class="line">zyh@QAQ ~&gt; $ sudo apt-get update</span><br><span class="line">fish: Expected a variable name after this $.</span><br><span class="line">zyh@QAQ ~&gt; sudo apt-get update</span><br><span class="line">[sudo] password for zyh:</span><br><span class="line">Hit:1 http://mirrors.matrix.moe/ubuntu jammy InRelease</span><br><span class="line">Get:2 http://mirrors.matrix.moe/ubuntu jammy-updates InRelease [128 kB]</span><br><span class="line">Get:3 http://mirrors.matrix.moe/ubuntu jammy-backports InRelease [127 kB]</span><br><span class="line">Get:4 http://mirrors.matrix.moe/ubuntu jammy-security InRelease [129 kB]</span><br><span class="line">Get:5 http://mirrors.matrix.moe/ubuntu jammy-updates/main amd64 Packages [2058 kB]</span><br><span class="line">Get:6 http://mirrors.matrix.moe/ubuntu jammy-updates/main Translation-en [355 kB]</span><br><span class="line">Get:7 http://mirrors.matrix.moe/ubuntu jammy-updates/main amd64 c-n-f Metadata [17.8 kB]</span><br><span class="line">Get:8 http://mirrors.matrix.moe/ubuntu jammy-updates/restricted amd64 Packages [2495 kB]</span><br><span class="line">Get:9 http://mirrors.matrix.moe/ubuntu jammy-updates/restricted Translation-en [429 kB]</span><br><span class="line">Get:10 http://mirrors.matrix.moe/ubuntu jammy-updates/universe amd64 Packages [1124 kB]</span><br><span class="line">Get:11 http://mirrors.matrix.moe/ubuntu jammy-updates/universe Translation-en [261 kB]</span><br><span class="line">Get:12 http://mirrors.matrix.moe/ubuntu jammy-updates/universe amd64 c-n-f Metadata [26.1 kB]</span><br><span class="line">Get:13 http://mirrors.matrix.moe/ubuntu jammy-backports/universe amd64 Packages [28.8 kB]</span><br><span class="line">Get:14 http://mirrors.matrix.moe/ubuntu jammy-backports/universe amd64 c-n-f Metadata [672 B]</span><br><span class="line">Get:15 http://mirrors.matrix.moe/ubuntu jammy-security/main amd64 Packages [1839 kB]</span><br><span class="line">Get:16 http://mirrors.matrix.moe/ubuntu jammy-security/main Translation-en [298 kB]</span><br><span class="line">Get:17 http://mirrors.matrix.moe/ubuntu jammy-security/main amd64 c-n-f Metadata [13.3 kB]</span><br><span class="line">Get:18 http://mirrors.matrix.moe/ubuntu jammy-security/restricted amd64 Packages [2431 kB]</span><br><span class="line">Get:19 http://mirrors.matrix.moe/ubuntu jammy-security/restricted Translation-en [418 kB]</span><br><span class="line">Get:20 http://mirrors.matrix.moe/ubuntu jammy-security/universe amd64 Packages [903 kB]</span><br><span class="line">Get:21 http://mirrors.matrix.moe/ubuntu jammy-security/universe Translation-en [177 kB]</span><br><span class="line">Get:22 http://mirrors.matrix.moe/ubuntu jammy-security/universe amd64 c-n-f Metadata [19.3 kB]</span><br><span class="line">Fetched 13.3 MB in 5s (2688 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">zyh@QAQ ~&gt; sudo apt-get install \</span><br><span class="line">                   apt-transport-https \</span><br><span class="line">                   ca-certificates \</span><br><span class="line">                   curl \</span><br><span class="line">                   gnupg \</span><br><span class="line">                   lsb-release</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">lsb-release is already the newest version (11.1.0ubuntu4).</span><br><span class="line">lsb-release set to manually installed.</span><br><span class="line">ca-certificates is already the newest version (20230311ubuntu0.22.04.1).</span><br><span class="line">ca-certificates set to manually installed.</span><br><span class="line">gnupg is already the newest version (2.2.27-3ubuntu2.1).</span><br><span class="line">gnupg set to manually installed.</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  libcurl4</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  apt-transport-https</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">  curl libcurl4</span><br><span class="line">2 upgraded, 1 newly installed, 0 to remove and 144 not upgraded.</span><br><span class="line">Need to get 485 kB of archives.</span><br><span class="line">After this operation, 172 kB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n] y</span><br><span class="line">Get:1 http://mirrors.matrix.moe/ubuntu jammy-updates/universe amd64 apt-transport-https all 2.4.13 [1510 B]</span><br><span class="line">Get:2 http://mirrors.matrix.moe/ubuntu jammy-updates/main amd64 curl amd64 7.81.0-1ubuntu1.18 [194 kB]</span><br><span class="line">Get:3 http://mirrors.matrix.moe/ubuntu jammy-updates/main amd64 libcurl4 amd64 7.81.0-1ubuntu1.18 [289 kB]</span><br><span class="line">Fetched 485 kB in 0s (1154 kB/s)</span><br><span class="line">Selecting previously unselected package apt-transport-https.</span><br><span class="line">(Reading database ... 28748 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../apt-transport-https_2.4.13_all.deb ...</span><br><span class="line">Unpacking apt-transport-https (2.4.13) ...</span><br><span class="line">Preparing to unpack .../curl_7.81.0-1ubuntu1.18_amd64.deb ...</span><br><span class="line">Unpacking curl (7.81.0-1ubuntu1.18) over (7.81.0-1ubuntu1.14) ...</span><br><span class="line">Preparing to unpack .../libcurl4_7.81.0-1ubuntu1.18_amd64.deb ...</span><br><span class="line">Unpacking libcurl4:amd64 (7.81.0-1ubuntu1.18) over (7.81.0-1ubuntu1.14) ...</span><br><span class="line">Setting up apt-transport-https (2.4.13) ...</span><br><span class="line">Setting up libcurl4:amd64 (7.81.0-1ubuntu1.18) ...</span><br><span class="line">Setting up curl (7.81.0-1ubuntu1.18) ...</span><br><span class="line">Processing triggers for man-db (2.10.2-1) ...</span><br><span class="line">Processing triggers for libc-bin (2.35-0ubuntu3.4) ...</span><br><span class="line">zyh@QAQ ~&gt; curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/</span><br><span class="line">docker-archive-keyring.gpg</span><br><span class="line">zyh@QAQ ~&gt; echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line">             $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">fish: $(...) is not supported. In fish, please use &#x27;(lsb_release)&#x27;.</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br><span class="line">^</span><br><span class="line">zyh@QAQ ~&gt; echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">fish: $(...) is not supported. In fish, please use &#x27;(lsb_release)&#x27;.</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash"><span class="string">(lsb_release -cs) stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span><br><span class="line">^</span><br><span class="line">zyh@QAQ ~&gt; echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">           echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             (lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">fish: $(...) is not supported. In fish, please use &#x27;(lsb_release)&#x27;.</span><br><span class="line"><span class="meta prompt_">  $</span><span class="language-bash">(lsb_release -cs) stable<span class="string">&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span></span></span><br><span class="line">^</span><br><span class="line">zyh@QAQ ~&gt; echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">           echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             (lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">           ^C</span><br><span class="line">zyh@QAQ ~&gt; echo \</span><br><span class="line">                 &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/d</span><br><span class="line">ocker-ce/linux/ubuntu \</span><br><span class="line">             (lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">zyh@QAQ ~&gt; sudo apt-get update</span><br><span class="line">Hit:1 http://mirrors.matrix.moe/ubuntu jammy InRelease</span><br><span class="line">Hit:2 http://mirrors.matrix.moe/ubuntu jammy-updates InRelease</span><br><span class="line">Hit:3 http://mirrors.matrix.moe/ubuntu jammy-backports InRelease</span><br><span class="line">Hit:4 http://mirrors.matrix.moe/ubuntu jammy-security InRelease</span><br><span class="line">Ign:5 https://mirrors.aliyun.com/docker-ce/linux/ubuntu (lsb_release InRelease</span><br><span class="line">Err:6 https://mirrors.aliyun.com/docker-ce/linux/ubuntu (lsb_release Release</span><br><span class="line">  404  Not Found [IP: 36.250.255.105 443]</span><br><span class="line">Reading package lists... Done</span><br><span class="line">E: The repository &#x27;https://mirrors.aliyun.com/docker-ce/linux/ubuntu (lsb_release Release&#x27; does not have a Release file.</span><br><span class="line">N: Updating from such a repository can&#x27;t be done securely, and is therefore disabled by default.</span><br><span class="line">N: See apt-secure(8) manpage for repository creation and user configuration details.</span><br><span class="line">zyh@QAQ ~ [100]&gt; lsb_release -cs</span><br><span class="line">jammy</span><br><span class="line">zyh@QAQ ~&gt; deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-c</span><br><span class="line">e/linux/ubuntu jammy stable</span><br><span class="line">Command &#x27;deb&#x27; not found, did you mean:</span><br><span class="line">  command &#x27;dub&#x27; from snap dub (1.19.0)</span><br><span class="line">  command &#x27;den&#x27; from snap den (1.2.0-0)</span><br><span class="line">  command &#x27;dub&#x27; from deb dub (1.27.0-2)</span><br><span class="line">  command &#x27;dcb&#x27; from deb iproute2 (5.15.0-1ubuntu2)</span><br><span class="line">  command &#x27;dab&#x27; from deb bsdgames (2.17-29)</span><br><span class="line">  command &#x27;dex&#x27; from deb dex (0.9.0-1)</span><br><span class="line">  command &#x27;debc&#x27; from deb devscripts (2.22.1ubuntu1)</span><br><span class="line">  command &#x27;edb&#x27; from deb edb-debugger (1.3.0-1)</span><br><span class="line">  command &#x27;deb3&#x27; from deb quilt (0.66-2.1)</span><br><span class="line">  command &#x27;debi&#x27; from deb devscripts (2.22.1ubuntu1)</span><br><span class="line">  command &#x27;derb&#x27; from deb icu-devtools (70.1-2)</span><br><span class="line">See &#x27;snap info &lt;snapname&gt;&#x27; for additional versions.</span><br><span class="line">zyh@QAQ ~ [127]&gt; echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.</span><br><span class="line">com/docker-ce/linux/ubuntu jammy stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line">zyh@QAQ ~&gt; sudo apt-get update</span><br><span class="line">Hit:1 http://mirrors.matrix.moe/ubuntu jammy InRelease</span><br><span class="line">Hit:2 http://mirrors.matrix.moe/ubuntu jammy-updates InRelease</span><br><span class="line">Hit:3 http://mirrors.matrix.moe/ubuntu jammy-backports InRelease</span><br><span class="line">Hit:4 http://mirrors.matrix.moe/ubuntu jammy-security InRelease</span><br><span class="line">Get:5 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy InRelease [48.8 kB]</span><br><span class="line">Get:6 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 Packages [39.3 kB]</span><br><span class="line">Fetched 88.2 kB in 1s (122 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">zyh@QAQ ~&gt; sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree... Done</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following additional packages will be installed:</span><br><span class="line">  dbus-user-session docker-buildx-plugin docker-ce-rootless-extras libslirp0 pigz slirp4netns</span><br><span class="line">Suggested packages:</span><br><span class="line">  aufs-tools cgroupfs-mount | cgroup-lite</span><br><span class="line">The following NEW packages will be installed:</span><br><span class="line">  containerd.io dbus-user-session docker-buildx-plugin docker-ce docker-ce-cli docker-ce-rootless-extras</span><br><span class="line">  docker-compose-plugin libslirp0 pigz slirp4netns</span><br><span class="line">0 upgraded, 10 newly installed, 0 to remove and 144 not upgraded.</span><br><span class="line">Need to get 122 MB of archives.</span><br><span class="line">After this operation, 440 MB of additional disk space will be used.</span><br><span class="line">Do you want to continue? [Y/n] y</span><br><span class="line">Get:1 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 containerd.io amd64 1.7.22-1 [29.5 MB]</span><br><span class="line">Get:2 http://mirrors.matrix.moe/ubuntu jammy/universe amd64 pigz amd64 2.6-1 [63.6 kB]</span><br><span class="line">Get:3 http://mirrors.matrix.moe/ubuntu jammy-updates/main amd64 dbus-user-session amd64 1.12.20-2ubuntu4.1 [9442 B]</span><br><span class="line">Get:4 http://mirrors.matrix.moe/ubuntu jammy/main amd64 libslirp0 amd64 4.6.1-1build1 [61.5 kB]</span><br><span class="line">Get:5 http://mirrors.matrix.moe/ubuntu jammy/universe amd64 slirp4netns amd64 1.0.1-2 [28.2 kB]</span><br><span class="line">Get:6 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 docker-buildx-plugin amd64 0.16.2-1~ubuntu.22.04~jammy [29.9 MB]</span><br><span class="line">Get:7 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 docker-ce-cli amd64 5:27.2.1-1~ubuntu.22.04~jammy [15.0 MB]</span><br><span class="line">Get:8 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 docker-ce amd64 5:27.2.1-1~ubuntu.22.04~jammy [25.6 MB]</span><br><span class="line">Get:9 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 docker-ce-rootless-extras amd64 5:27.2.1-1~ubuntu.22.04~jammy [9572 kB]</span><br><span class="line">Get:10 https://mirrors.aliyun.com/docker-ce/linux/ubuntu jammy/stable amd64 docker-compose-plugin amd64 2.29.2-1~ubuntu.22.04~jammy [12.5 MB]</span><br><span class="line">Fetched 122 MB in 1min 7s (1832 kB/s)</span><br><span class="line">Selecting previously unselected package pigz.</span><br><span class="line">(Reading database ... 28752 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../0-pigz_2.6-1_amd64.deb ...</span><br><span class="line">Unpacking pigz (2.6-1) ...</span><br><span class="line">Selecting previously unselected package containerd.io.</span><br><span class="line">Preparing to unpack .../1-containerd.io_1.7.22-1_amd64.deb ...</span><br><span class="line">Unpacking containerd.io (1.7.22-1) ...</span><br><span class="line">Selecting previously unselected package dbus-user-session.</span><br><span class="line">Preparing to unpack .../2-dbus-user-session_1.12.20-2ubuntu4.1_amd64.deb ...</span><br><span class="line">Unpacking dbus-user-session (1.12.20-2ubuntu4.1) ...</span><br><span class="line">Selecting previously unselected package docker-buildx-plugin.</span><br><span class="line">Preparing to unpack .../3-docker-buildx-plugin_0.16.2-1~ubuntu.22.04~jammy_amd64.deb ...</span><br><span class="line">Unpacking docker-buildx-plugin (0.16.2-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Selecting previously unselected package docker-ce-cli.</span><br><span class="line">Preparing to unpack .../4-docker-ce-cli_5%3a27.2.1-1~ubuntu.22.04~jammy_amd64.deb ...</span><br><span class="line">Unpacking docker-ce-cli (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Selecting previously unselected package docker-ce.</span><br><span class="line">Preparing to unpack .../5-docker-ce_5%3a27.2.1-1~ubuntu.22.04~jammy_amd64.deb ...</span><br><span class="line">Unpacking docker-ce (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Selecting previously unselected package docker-ce-rootless-extras.</span><br><span class="line">Preparing to unpack .../6-docker-ce-rootless-extras_5%3a27.2.1-1~ubuntu.22.04~jammy_amd64.deb ...</span><br><span class="line">Unpacking docker-ce-rootless-extras (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Selecting previously unselected package docker-compose-plugin.</span><br><span class="line">Preparing to unpack .../7-docker-compose-plugin_2.29.2-1~ubuntu.22.04~jammy_amd64.deb ...</span><br><span class="line">Unpacking docker-compose-plugin (2.29.2-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Selecting previously unselected package libslirp0:amd64.</span><br><span class="line">Preparing to unpack .../8-libslirp0_4.6.1-1build1_amd64.deb ...</span><br><span class="line">Unpacking libslirp0:amd64 (4.6.1-1build1) ...</span><br><span class="line">Selecting previously unselected package slirp4netns.</span><br><span class="line">Preparing to unpack .../9-slirp4netns_1.0.1-2_amd64.deb ...</span><br><span class="line">Unpacking slirp4netns (1.0.1-2) ...</span><br><span class="line">Setting up dbus-user-session (1.12.20-2ubuntu4.1) ...</span><br><span class="line">Setting up docker-buildx-plugin (0.16.2-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Setting up containerd.io (1.7.22-1) ...</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/containerd.service → /lib/systemd/system/containerd.service.</span><br><span class="line">Setting up docker-compose-plugin (2.29.2-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Setting up docker-ce-cli (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Setting up libslirp0:amd64 (4.6.1-1build1) ...</span><br><span class="line">Setting up pigz (2.6-1) ...</span><br><span class="line">Setting up docker-ce-rootless-extras (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Setting up slirp4netns (1.0.1-2) ...</span><br><span class="line">Setting up docker-ce (5:27.2.1-1~ubuntu.22.04~jammy) ...</span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/docker.service → /lib/systemd/system/docker.service.</span><br><span class="line">Created symlink /etc/systemd/system/sockets.target.wants/docker.socket → /lib/systemd/system/docker.socket.</span><br><span class="line">Processing triggers for man-db (2.10.2-1) ...</span><br><span class="line">Processing triggers for libc-bin (2.35-0ubuntu3.4) ...</span><br><span class="line">zyh@QAQ ~&gt; sudo systemctl enable docker</span><br><span class="line">Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.</span><br><span class="line">Executing: /lib/systemd/systemd-sysv-install enable docker</span><br><span class="line">zyh@QAQ ~&gt; sudo systemctl start docker</span><br><span class="line">zyh@QAQ ~&gt; sudo groupadd docker</span><br><span class="line">groupadd: group &#x27;docker&#x27; already exists</span><br><span class="line">zyh@QAQ ~ [9]&gt; docker run --rm hello-world</span><br><span class="line">docker: permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Head &quot;http://%2Fvar%2Frun%2Fdocker.sock/_ping&quot;: dial unix /var/run/docker.sock: connect: permission denied.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line">zyh@QAQ ~ [126]&gt;               </span><br></pre></td></tr></table></figure><p>解决 <code>Unable to find image &#39;hello-world:latest&#39; locally</code> 的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Welcome to fish, the friendly interactive shell</span><br><span class="line">Type help for instructions on how to use fish</span><br><span class="line">zyh@QAQ ~&gt; docker run --rm hello-world</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">docker: Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: context deadline exceeded (Client.Timeout exceeded while awaiting headers).</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line">zyh@QAQ ~ [125]&gt;</span><br><span class="line">                 sudo vim /etc/docker/daemon.json</span><br><span class="line">[sudo] password for zyh:</span><br><span class="line">zyh@QAQ ~&gt;</span><br><span class="line">           sudo systemctl daemon-reload</span><br><span class="line">zyh@QAQ ~&gt; sudo systemctl restart docker</span><br><span class="line">zyh@QAQ ~&gt; docker run --rm hello-world</span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">c1ec31eb5944: Pull complete</span><br><span class="line">Digest: sha256:91fb4b041da273d5a3273b6d587d62d518300a6ad268b28628f74997b93171b2</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br><span class="line"></span><br><span class="line">zyh@QAQ ~&gt;                           </span><br></pre></td></tr></table></figure><p>使用 <code>daocloud</code> 镜像加速：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">    &quot;https://docker.m.daocloud.io&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#96;&#96;</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>查看 docker 版本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure></li><li>启动 docker 服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li>检查 docker 服务状态<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure></li><li>运行第一个容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>或者<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm hello-world</span><br></pre></td></tr></table></figure></li><li>拉取镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>ps: nginx 是一个高性能的 HTTP 和反向代理 web 服务器</li><li>列出 docker 镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li>运行容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure>会将 <code>nginx</code> 容器的端口 80 投射到宿主机的 8080 端口，可以通过 <code>https://localhost:8080</code> 访问 Nginx 服务。</li><li>列出所有容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li>启动容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start XX</span><br></pre></td></tr></table></figure></li><li>停止容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop XX</span><br></pre></td></tr></table></figure></li><li>删除容器<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm XX</span><br></pre></td></tr></table></figure></li><li>删除本地镜像<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi XX</span><br></pre></td></tr></table></figure></li><li>查看容器日志<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs XX</span><br></pre></td></tr></table></figure></li><li>进入容器内部<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it XX /bin/sh</span><br></pre></td></tr></table></figure></li></ol><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker compose"></a>docker compose</h2><p>运行以下命令以下载 Docker Compose 的当前稳定版本：<br>将可执行权限应用于二进制文件：<br>创建软链：<br>测试是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zyh@QAQ ~ [3]&gt; set os (uname -s)</span><br><span class="line">               set arch (uname -m)</span><br><span class="line">               sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-$os-$arch&quot; -o /us</span><br><span class="line">r/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:01 --:--:--     0</span><br><span class="line">100 23.5M  100 23.5M    0     0  55309      0  0:07:25  0:07:25 --:--:-- 47077</span><br><span class="line">zyh@QAQ ~&gt; sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">[sudo] password for zyh:</span><br><span class="line">zyh@QAQ ~&gt; sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">zyh@QAQ ~&gt; docker-compose --version</span><br><span class="line">Docker Compose version v2.2.2</span><br></pre></td></tr></table></figure><p>测试：<br>使用一个简单的 <code>docker-compose.yml</code> 文件来运行一个 Nginx 容器。测试步骤：</p><ol><li>创建一个测试文件夹，并进入该文件夹：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dockercomposetest</span><br><span class="line"><span class="built_in">cd</span> dockercomposetest</span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个 <code>docker-compose.yml</code> 文件：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano docker-compose.yml</span><br></pre></td></tr></table></figure><p>在文件中粘贴以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span></span><br></pre></td></tr></table></figure><p>这个文件会使用 <code>nginx:alpine</code> 镜像，并将本地的 <code>8080</code> 端口映射到容器的 <code>80</code> 端口。</p><ol start="3"><li>运行 Docker Compose：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose up</span><br></pre></td></tr></table></figure><p>如果 Docker Compose 正常工作，看到下面的输出，表明 Nginx 容器启动成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">zyh@QAQ ~/dockercomposetest&gt; sudo docker-compose up</span><br><span class="line">[+] Running 9/9</span><br><span class="line"> ⠿ web Pulled                                                                                                                                         30.8s</span><br><span class="line">   ⠿ 43c4264eed91 Pull complete                                                                                                                        2.4s</span><br><span class="line">   ⠿ 5b19511a843d Pull complete                                                                                                                        2.6s</span><br><span class="line">   ⠿ 652d69a25e85 Pull complete                                                                                                                        2.6s</span><br><span class="line">   ⠿ 51676974aef5 Pull complete                                                                                                                        2.7s</span><br><span class="line">   ⠿ bb16f69e8876 Pull complete                                                                                                                        2.7s</span><br><span class="line">   ⠿ 6fb07faa0055 Pull complete                                                                                                                        2.7s</span><br><span class="line">   ⠿ c298c5a0cd21 Pull complete                                                                                                                        4.8s</span><br><span class="line">   ⠿ 0c02f601d0ee Pull complete                                                                                                                       12.0s</span><br><span class="line">[+] Running 2/2</span><br><span class="line"> ⠿ Network dockercomposetest_default  Created                                                                                                          0.2s</span><br><span class="line"> ⠿ Container dockercomposetest-web-1  Created                                                                                                          0.2s</span><br><span class="line">Attaching to dockercomposetest-web-1</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh</span><br><span class="line">dockercomposetest-web-1  | 10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf</span><br><span class="line">dockercomposetest-web-1  | 10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Sourcing /docker-entrypoint.d/15-local-resolvers.envsh</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh</span><br><span class="line">dockercomposetest-web-1  | /docker-entrypoint.sh: Configuration complete; ready for start up</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: using the &quot;epoll&quot; event method</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: nginx/1.27.1</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: built by gcc 13.2.1 20240309 (Alpine 13.2.1_git20240309)</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: OS: Linux 5.15.153.1-microsoft-standard-WSL2</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: getrlimit(RLIMIT_NOFILE): 1048576:1048576</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker processes</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 30</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 31</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 32</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 33</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 34</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 35</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 36</span><br><span class="line">dockercomposetest-web-1  | 2024/09/24 16:43:16 [notice] 1#1: start worker process 37</span><br><span class="line">dockercomposetest-web-1  | 172.19.0.1 - - [24/Sep/2024:16:43:39 +0000] &quot;GET / HTTP/1.1&quot; 200 615 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0&quot; &quot;-&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li><p>打开浏览器并访问 <code>http://localhost:8080</code>，看到 Nginx 的欢迎页面，表明 Docker Compose 运行成功。</p></li><li><p>停止容器，按 <code>Ctrl+C</code>，然后运行以下命令来清理环境：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose down</span><br></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>这里以我的项目 <a href="https://gitee.com/AIJavaGroup/project">project: 基于Springboot+Vue的亚健康管理系统 (gitee.com)</a> 为例，将这个 web 项目部署到 docker 中运行。<br>通过Docker容器化的方式，<strong>不需要在本地（Windows或WSL）安装Node.js、MySQL、Java等开发依赖</strong>，这些依赖项完全可以由Docker来管理。Docker容器会为每个服务提供一个独立的运行环境，本地机器不需要直接安装这些服务。只需要安装Docker和Docker Compose工具，剩下的依赖都在Docker中管理。通过Git和Docker Compose，团队成员可以轻松启动、重建和管理开发环境，简化协作流程。</p><h2 id="项目调研"><a href="#项目调研" class="headerlink" title="项目调研"></a>项目调研</h2><h3 id="关键信息"><a href="#关键信息" class="headerlink" title="关键信息"></a>关键信息</h3><p>将一个包含 Vue、Spring Boot 和 MySQL 的项目部署到 Docker 中的过程涉及构建多个 Docker 容器来分别运行前端、后端和数据库。需要考虑以下关键信息：</p><ol><li><p><strong>Vue 项目的打包配置</strong>：</p><ul><li>Vue 项目是否已经通过 <code>npm run build</code> 或者 <code>yarn build</code> 进行生产环境打包？</li><li>是否有 Dockerfile 或现成的部署脚本？</li></ul></li><li><p><strong>Spring Boot 应用的构建方式</strong>：</p><ul><li>Spring Boot 项目是否使用 Maven 或 Gradle 进行构建？</li><li>是否已生成了 <code>.jar</code> 文件，或者是否有 Dockerfile 来构建 Spring Boot 容器？</li></ul></li><li><p><strong>MySQL 配置</strong>：</p><ul><li>MySQL 数据库的版本？</li><li>数据库的初始化脚本（如有的话）？</li><li>MySQL 的数据库配置，是否需要挂载外部数据卷保存数据？</li></ul></li><li><p><strong>应用的连接配置</strong>：</p><ul><li>Vue 前端如何连接到 Spring Boot 后端？（例如，API 地址在开发时是否通过代理，或者已经设置为生产环境的 URL）</li><li>Spring Boot 如何连接 MySQL？是否有外部配置（如 <code>application.properties</code> 或 <code>application.yml</code> 中的数据库连接设置）？</li></ul></li><li><p><strong>其他配置</strong>：</p><ul><li>是否有任何环境变量，配置文件或 secrets 需要传递给容器？</li><li>是否需要使用 Docker Compose 来管理多个容器（例如前端、后端、数据库）？</li></ul></li></ol><h3 id="实际情况-："><a href="#实际情况-：" class="headerlink" title="实际情况 ："></a>实际情况 ：</h3><ol><li>vue项目还没打包，没有dockerfile </li><li>2.springboot采用maven构建，没有.jar文件，没有dockerfile 其中pom.xml为：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--SpringMvc--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.8.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>我不知道mysql的版本；MySQL 的数据库配置需要挂载外部数据卷保存数据 </li><li>vue前端和springboot后端通过跨域配置进行连接 ,vue.config.js内容为:  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 跨域配置</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">devServer</span>: &#123;                <span class="comment">//记住，别写错了devServer//设置本地默认端口  选填</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//port: 9876,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">proxy</span>: &#123;                 <span class="comment">//设置代理，必须填</span></span><br><span class="line"></span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;              <span class="comment">//设置拦截器  拦截器格式   斜杠+拦截器名字，名字可以自己定</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:9091&#x27;</span>,     <span class="comment">//代理的目标地址</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,              <span class="comment">//是否设置同源，输入是的</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;                   <span class="comment">//路径重写</span></span><br><span class="line"></span><br><span class="line">          <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>                     <span class="comment">//选择忽略拦截器里面的内容</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>没有环境变量，配置文件或 secrets 需要传递给容器需要使用 Docker Compose 来管理多个容器，即前端、后端、数据库</li></ol><h3 id="大致的部署流程"><a href="#大致的部署流程" class="headerlink" title="大致的部署流程"></a>大致的部署流程</h3><ol><li><strong>为 Vue 应用创建 Dockerfile</strong>：该 Dockerfile 用于将 Vue 应用打包为静态文件并部署到 Nginx 或其他 web 服务器中。</li><li><strong>为 Spring Boot 应用创建 Dockerfile</strong>：这个 Dockerfile 将包含 Java 环境和 Spring Boot <code>.jar</code> 文件。</li><li><strong>使用 Docker Compose 配置文件</strong>：编写 <code>docker-compose.yml</code> 文件，用于启动 Vue 前端、Spring Boot 后端和 MySQL 数据库的三个服务。</li></ol><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p><strong>注意：下面有两种方案，我采取的是方案二</strong></p><h3 id="方案一：使用Docker-Desktop的WSL集成"><a href="#方案一：使用Docker-Desktop的WSL集成" class="headerlink" title="方案一：使用Docker Desktop的WSL集成"></a>方案一：使用Docker Desktop的WSL集成</h3><p>Docker Desktop，启用WSL 2 集成，这样Docker Desktop会将WSL与Windows的Docker环境整合在一起。</p><ol><li>打开Docker Desktop，在设置中启用 <code>WSL 2 integration</code>，并选择你使用的WSL发行版（如Ubuntu）。</li><li><strong>在Windows PowerShell或WSL中运行Docker</strong>：<br>在Windows的PowerShell中：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd D:\Desktop\project docker-compose up --build</span><br></pre></td></tr></table></figure>在WSL中：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/d/Desktop/project docker-compose up --build</span><br></pre></td></tr></table></figure></li></ol><p>优点：这种方式将WSL与Windows Docker紧密结合，无论你是在Windows还是WSL中操作Docker，都可以使用相同的Docker环境。</p><h3 id="方案二：将项目目录映射到WSL中的文件系统"><a href="#方案二：将项目目录映射到WSL中的文件系统" class="headerlink" title="方案二：将项目目录映射到WSL中的文件系统"></a>方案二：将项目目录映射到WSL中的文件系统</h3><p>如果你想继续使用WSL中的Docker，而不能直接在WSL中访问Windows文件系统，那么可以通过以下方法解决：</p><ol><li><strong>挂载Windows的文件系统到WSL</strong>： 在WSL中，Windows的文件系统已经挂载在<code>/mnt/</code>目录下。例如，<code>C:\</code>盘的文件可以在WSL中通过<code>/mnt/c/</code>访问。</li><li><strong>在WSL中访问Windows上的项目</strong>： 你可以在WSL中通过<code>/mnt/</code>目录访问Windows的文件。例如，如果你的项目在<code>D:\Desktop\project</code>下，你可以在WSL中访问它：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/d/Desktop/project</span><br></pre></td></tr></table></figure></li><li><strong>在WSL中运行Docker命令</strong>： 进入项目目录后，你可以在WSL的fish shell中运行Docker命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>优点： 这种方式允许你使用WSL中的Docker，但仍然能够访问Windows文件系统，避免了项目文件复制的麻烦。</li></ol><h3 id="方案三：将项目文件复制到WSL的文件系统中"><a href="#方案三：将项目文件复制到WSL的文件系统中" class="headerlink" title="方案三：将项目文件复制到WSL的文件系统中"></a>方案三：将项目文件复制到WSL的文件系统中</h3><p>如果你希望项目文件完全在WSL的Linux文件系统中，你可以将项目文件从Windows复制到WSL中，之后再通过WSL的Docker进行操作。</p><ol><li><strong>复制项目到WSL</strong>：<br>在PowerShell中运行以下命令，将项目复制到WSL的文件系统中（例如，复制到<code>/home/your-user/projects</code>目录）：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -r D:\Desktop\project\health_manage_springboot \\wsl$\Ubuntu\home\your-user\projects\</span><br></pre></td></tr></table></figure></li><li><strong>在WSL中进入项目目录</strong>：<br>打开WSL的终端，进入项目目录：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/projects/health_manage_springboot</span><br></pre></td></tr></table></figure></li><li><strong>运行Docker命令</strong>：<br>在项目目录下，运行<code>docker-compose up --build</code>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure></li></ol><p>优点：这种方式将项目文件复制到WSL的Linux文件系统中，确保在WSL环境下操作更加流畅，避免文件系统访问的问题。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>通过创建 Dockerfile、配置 Docker Compose 文件，将前端、后端和数据库拆解为不同的容器。</p><h3 id="1-打包-Vue-项目"><a href="#1-打包-Vue-项目" class="headerlink" title="1. 打包 Vue 项目"></a>1. 打包 Vue 项目</h3><p>在部署到 Docker 之前，Vue 项目需要打包成静态文件。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h4><ol><li>确保你已经安装了 Node. js。</li><li>在项目根目录下，执行以下命令打包 Vue 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure>这将生成一个 <code>dist</code> 目录，里面是打包好的静态资源文件。</li></ol><h3 id="2-创建-Vue-的-Dockerfile"><a href="#2-创建-Vue-的-Dockerfile" class="headerlink" title="2. 创建 Vue 的 Dockerfile"></a>2. 创建 Vue 的 Dockerfile</h3><p>在 Vue 项目的根目录中，创建一个 Dockerfile，用于构建一个运行 Vue 静态文件的 Nginx 容器。</p><h4 id="Dockerfile-Vue"><a href="#Dockerfile-Vue" class="headerlink" title="Dockerfile (Vue)"></a>Dockerfile (Vue)</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择node环境作为构建阶段</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">16</span> AS build-stage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将package.json和package-lock.json复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> package*.json ./</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将项目代码复制到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nginx用于托管打包后的静态文件</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:alpine AS production-stage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将Nginx配置文件替换为自定义配置文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将打包后的静态文件复制到Nginx的html目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=build-stage /app/dist /usr/share/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露80端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Nginx</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="Nginx-配置文件-nginx-conf"><a href="#Nginx-配置文件-nginx-conf" class="headerlink" title="Nginx 配置文件 (nginx. conf)"></a>Nginx 配置文件 (nginx. conf)</h4><p>你需要创建一个 <code>nginx.conf</code> 文件，指定如何处理前端资源：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置server块，处理前端请求和API代理</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">            <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 代理API请求到后端Spring Boot服务</span></span><br><span class="line">        <span class="section">location</span> /api/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend:9091/;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-打包-Spring-Boot-项目"><a href="#3-打包-Spring-Boot-项目" class="headerlink" title="3. 打包 Spring Boot 项目"></a>3. 打包 Spring Boot 项目</h3><p>为了将 Spring Boot 项目部署到 Docker 中，我们需要先生成一个可执行的 JAR 文件。</p><h4 id="使用系统环境中的Maven："><a href="#使用系统环境中的Maven：" class="headerlink" title="使用系统环境中的Maven："></a>使用系统环境中的Maven：</h4><ol><li>在项目根目录下，使用 Maven 打包 Spring Boot 项目：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>这将在 <code>target</code> 目录中生成一个 JAR 文件。</li></ol><h4 id="IDEA的Maven工具："><a href="#IDEA的Maven工具：" class="headerlink" title="IDEA的Maven工具："></a>IDEA的Maven工具：</h4><p>这里由于我开发时使用的 maven 是 idea 自带的，在终端运行时会报错，故使用 IDE 自带的 Maven 项目进行打包。</p><ol><li>打开IntelliJ IDEA，进入Spring Boot项目。</li><li>点击右侧的“Maven”工具窗口（如果看不到，可以通过<code>View -&gt; Tool Windows -&gt; Maven</code>来打开）。</li><li>展开项目中的Maven模块，找到<code>Lifecycle</code>。</li><li>在<code>Lifecycle</code>下，找到<code>clean</code>和<code>package</code>两个任务。</li><li>先双击<code>clean</code>，然后再双击<code>package</code>。</li></ol><p>这样，IntelliJ IDEA会使用自带的Maven来清理项目并打包为JAR文件。打包完成后，生成的JAR文件会在<code>target</code>目录下。</p><h3 id="4-创建-Spring-Boot-的-Dockerfile"><a href="#4-创建-Spring-Boot-的-Dockerfile" class="headerlink" title="4. 创建 Spring Boot 的 Dockerfile"></a>4. 创建 Spring Boot 的 Dockerfile</h3><p>在 Spring Boot 项目的根目录中，创建一个 Dockerfile，用于构建 Spring Boot 容器。</p><h4 id="Dockerfile-Spring-Boot"><a href="#Dockerfile-Spring-Boot" class="headerlink" title="Dockerfile (Spring Boot)"></a>Dockerfile (Spring Boot)</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用openjdk作为基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">17</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制打包好的JAR文件到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/demo-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露9091端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9091</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动Spring Boot应用</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="5-MySQL-容器配置"><a href="#5-MySQL-容器配置" class="headerlink" title="5. MySQL 容器配置"></a>5. MySQL 容器配置</h3><p>为了将 MySQL 运行在 Docker 中，我们可以直接使用官方的 MySQL 镜像，并通过 Docker Compose 配置其数据库、用户和挂载外部数据卷来保存数据。<br>在 6 中可以完成这个需求。</p><h3 id="6-创建-Docker-Compose-文件"><a href="#6-创建-Docker-Compose-文件" class="headerlink" title="6. 创建 Docker Compose 文件"></a>6. 创建 Docker Compose 文件</h3><p>Docker Compose 文件用于管理这三个服务（Vue 前端、Spring Boot 后端、MySQL 数据库）。</p><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose. yml"></a>docker-compose. yml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment"># Vue前端</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./vue-project</span>   <span class="comment"># 指定Vue项目的根目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">dns:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span> <span class="comment">#这里指定使用Google DNS服务器（8.8.8.8和8.8.4.4），因为我在npm install时出现ETIMEOUT，故设置Google的公共DNS服务器解决该问题。也可以通过增加网络超时时间或者本地安装依赖导入node_modules解决</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:80&quot;</span>  <span class="comment"># 将容器的80端口映射到主机的8080端口</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">backend</span>  <span class="comment"># 确保后端先启动</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Spring Boot后端</span></span><br><span class="line">  <span class="attr">backend:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./springboot-project</span>  <span class="comment"># 指定Spring Boot项目的根目录</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9091:9091&quot;</span>  <span class="comment"># 映射后端服务端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_URL:</span> <span class="string">jdbc:mysql://db:3306/health?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_USERNAME:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">SPRING_DATASOURCE_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span>  <span class="comment"># 确保数据库先启动</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># MySQL数据库</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span>  <span class="comment"># MySQL镜像</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span>  <span class="comment"># 设置root密码</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">health</span>  <span class="comment"># 初始化数据库</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span>  <span class="comment"># 挂载卷，用于持久化存储</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/mnt/d/Desktop/project/health_management.sql:/docker-entrypoint-initdb.d/health_management.sql</span> <span class="comment"># 挂载SQL文件</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span>  <span class="comment"># 映射MySQL端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">db_data:</span>  <span class="comment"># 数据卷用于存储MySQL数据</span></span><br></pre></td></tr></table></figure><h3 id="7-使用-Docker-Compose-启动服务"><a href="#7-使用-Docker-Compose-启动服务" class="headerlink" title="7. 使用 Docker Compose 启动服务"></a>7. 使用 Docker Compose 启动服务</h3><ol><li>在 WSL 中导航到项目的根目录<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /mnt/d/Desktop/project</span><br></pre></td></tr></table></figure></li><li>运行 docker compose 命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure></li></ol><p>这个命令会：</p><ol><li>构建 Vue 前端、Spring Boot 后端和 MySQL 的容器镜像。</li><li>使用 Nginx 托管 Vue 前端的静态文件。</li><li>将前端请求代理到后端 Spring Boot 应用。</li><li>启动 MySQL 并将数据保存在本地挂载卷中。</li></ol><h3 id="8-检查服务是否正常运行"><a href="#8-检查服务是否正常运行" class="headerlink" title="8. 检查服务是否正常运行"></a>8. 检查服务是否正常运行</h3><ol><li>访问 <code>http://localhost:8080</code> 来查看 Vue 前端是否正常工作。</li><li>后端 Spring Boot 服务应该在 <code>http://localhost:9091</code> 正常运行。</li><li>通过 <code>docker logs &lt;container_name&gt;</code> 查看各个容器的日志，确保一切正常。</li><li>如果导入 sql 文件出现问题，检查SQL文件是否已经成功导入：<br>进入 mysql 容器：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;container_id&gt; /bin/bash</span><br></pre></td></tr></table></figure>(用 <code>docker ps -a</code> 获取 container_id)<br>登录 mysql:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root t-p</span><br></pre></td></tr></table></figure>检查数据库中是否有你导入的表和数据：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE health; </span><br><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>如果 SQL 文件没有挂载成功的话可以采取手动导入 SQL 文件:<br>注意这里的 sql 表格如果你是从 gitee 上直接 clone 的需要删除 <code>CREATE DATABASE health;</code> 这条语句，因为数据库 <code>health</code> 已经存在。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">zyh@QAQ /m/d/D/project (master)&gt; docker exec -it 649ab335c63b /bin/bash</span><br><span class="line">bash-5.1#  mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 13</span><br><span class="line">Server version: 8.0.39 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2024, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">USE health;</span></span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SHOW TABLES;</span></span><br><span class="line">+------------------+</span><br><span class="line">| Tables_in_health |</span><br><span class="line">+------------------+</span><br><span class="line">| body             |</span><br><span class="line">| user             |</span><br><span class="line">+------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * FROM user;</span></span><br><span class="line">+----+----------+----------+-------------+------+----------------------+--------+</span><br><span class="line">| id | username | password | number      | role | email                | avatar |</span><br><span class="line">+----+----------+----------+-------------+------+----------------------+--------+</span><br><span class="line">|  1 | gss      | 123456   | 13343243242 |    1 | super@aliyun.com     |        |</span><br><span class="line">|  2 | zhangsan | 123456   | NULL        |    1 | zhangsan@gmail.com   |        |</span><br><span class="line">|  3 | lisi     | 123456   | NULL        |    1 | lisi@gmail.com       |        |</span><br><span class="line">|  4 | wangwu   | 123456   | NULL        |    0 | wangwu@gmail.com     |        |</span><br><span class="line">|  5 | zhaoer   | 123456   | NULL        |    0 | zhaoer@gmail.com     |        |</span><br><span class="line">|  6 | songliu  | 123456   | 4322432434  |    0 | songliu@gmail.com    |        |</span><br><span class="line">| 13 | Alice    | 123456   | 234532111   |    0 | alice@example.com    |        |</span><br><span class="line">| 14 | Bob      | 123456   | 13564736363 |    0 | bob@example.com      |        |</span><br><span class="line">| 15 | Charlie  | 123456   | 25323626    |    0 | charlie@example.com  |        |</span><br><span class="line">| 16 | David1   | 123456   | 145256264   |    0 | david@example.com    |        |</span><br><span class="line">| 17 | Emma     | 123456   | 152334445   |    0 | emma@example.com     |        |</span><br><span class="line">| 18 | Frank    | 123456   | 1566543646  |    0 | frank@example.com    |        |</span><br><span class="line">| 19 | Grace    | 123456   | 1435253535  |    0 | grace@example.com    |        |</span><br><span class="line">| 20 | Henry    | 123456   | 15325363463 |    0 | henry@example.com    |        |</span><br><span class="line">| 21 | Isabella | 123456   | 15353435    |    0 | isabella@example.com |        |</span><br><span class="line">| 22 | Jacob    | 123456   | 114523424   |    0 | jacob@example.com    |        |</span><br><span class="line">| 31 | test     | 123456   | NULL        |    0 |                      |        |</span><br><span class="line">+----+----------+----------+-------------+------+----------------------+--------+</span><br><span class="line">17 rows in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt;</span></span><br></pre></td></tr></table></figure>上述信息表示一切功能正常。</li></ol><h4 id="补充-："><a href="#补充-：" class="headerlink" title="补充 ："></a>补充 ：</h4><ol><li>停止正在运行的容器：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>停止并删除所有服务容器、网络和卷（不删除数据卷）<br>再次启动：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure></li><li>停止容器而不删除<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>再次启动：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose start</span><br></pre></td></tr></table></figure></li><li>查看当前运行的容器<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>包含历史：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;小白的docker学习全过程&lt;/p&gt;</summary>
    
    
    
    <category term="打卡" scheme="https://strangersinsist.github.io/categories/%E6%89%93%E5%8D%A1/"/>
    
    
    <category term="docker" scheme="https://strangersinsist.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://strangersinsist.github.io/2024/09/14/%E6%89%93%E5%8D%A1%E8%B4%B4/"/>
    <id>https://strangersinsist.github.io/2024/09/14/%E6%89%93%E5%8D%A1%E8%B4%B4/</id>
    <published>2024-09-14T15:35:33.133Z</published>
    <updated>2024-10-03T14:39:46.738Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/leetbook/detail/top-interview-questions-easy/">初级算法 - LeetBook - 力扣（LeetCode）</a></p><span id="more"></span><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li>删除排序数组中的重复项<br>给你一个非严格递增排列的数组 nums ，请你原地删除重复出现的元素，使每个元素只出现一次，返回删除后数组的新长度。元素的相对顺序应该保持一致。然后返回 nums 中唯一元素的个数。</li></ol><p>考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：</p><p>更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。<br>返回 k 。</p><p>   双指针解题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(n=<span class="number">0</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fast=<span class="number">1</span>,slow=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(fast&lt;n)&#123;</span><br><span class="line">  <span class="keyword">if</span>(nums[fast]!=nums[fast<span class="number">-1</span>])&#123;</span><br><span class="line">     nums[slow]=nums[fast];</span><br><span class="line">     ++slow;</span><br><span class="line">  &#125;</span><br><span class="line">  ++fast;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><ol start="2"><li>买卖股票的最佳时机 II<br>给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。</li></ol><p>在每一天，你可以决定是否购买和&#x2F;或出售股票。你在任何时候最多只能持有一股股票。你也可以先购买，然后在同一天出售。</p><p>返回你能获得的最大利润。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;prices)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(prices[i]&gt;price[i<span class="number">-1</span>])&#123;</span><br><span class="line">        tot+=price[i]-price[i<span class="number">-1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>旋转数组<br> 给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转 <code>k</code> 个位置，其中 <code>k</code> 是非负数。</li></ol><p>  使用一个新的数组<br>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;nums,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len=nums.<span class="built_in">size</span>();</span><br><span class="line">    k=k%len;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">res</span>(len);</span><br><span class="line">    <span class="comment">//将后k个元素移到前面</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">      res[i]=nums[len-k+i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将前len-k个元素移到后面</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len-k;i++)&#123;</span><br><span class="line">      res[k+i]=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将结果复制回nums</span></span><br><span class="line">    nums=res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>也可以这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;nums,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;<span class="built_in">newArr</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      newArr[(i+k)%n]=nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    nums.<span class="built_in">assign</span>(newArr.<span class="built_in">begin</span>(),newArr.<span class="built_in">end</span>());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>存在重复元素<br>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。<br>题解：<strong>考虑排序</strong>，排序后数组的重复元素一定出现在相邻位置中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(nums[i]==nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>只出现一次的数字<br>  给你一个非空整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。<br>  第一次的解法（没有考虑线性时间复杂度）这么写是因为收到前面思路的影响</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果数组只有一个元素，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查第一个元素是否是唯一的</span></span><br><span class="line">        <span class="keyword">if</span> (nums[<span class="number">0</span>] != nums[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查最后一个元素是否是唯一的</span></span><br><span class="line">        <span class="keyword">if</span> (nums[n - <span class="number">1</span>] != nums[n - <span class="number">2</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[n - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从第二个元素到倒数第二个元素进行检查</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != nums[i - <span class="number">1</span>] &amp;&amp; nums[i] != nums[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果要考虑线性时间复杂度 O (n):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line"></span><br><span class="line">            result ^= num;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个异或解法的时间复杂度是 O(n)，空间复杂度是 O(1)<br>考虑线性时间复杂度和常量空间复杂度：异或运算<br>异或运算有以下性质：</p></li><li><p><code>a ^ a = 0</code>（任何数与自己异或的结果是0）</p></li><li><p><code>a ^ 0 = a</code>（任何数与0异或的结果是这个数本身）</p></li><li><p>异或运算满足交换律和结合律。</p></li></ol><p>因此，如果数组中除了一个数以外其他数都出现两次，那么将所有数进行异或运算，结果就是那个只出现一次的数。</p><p>ps: 复习位运算的规律：（相同为０不同为１）<br><code>1^1=0;</code><br><code>1^0=1;</code><br><code>0^1=1;</code><br><code>0^0=0;</code><br>6. 两个数组的交集Ⅱ<br>   给你两个整数数组 nums 1 和 nums 2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。<br>法一：哈希表<br>遍历第一个数组，在哈希表中记录第一个数组中每个数字以及出现的次数，然后遍历第二个数组，如果哈希表中存在这个数字，将这个数字添加到答案，并减少哈希表中该数字出现的次数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;<span class="built_in">intersect</span>(vector&lt;<span class="type">int</span>&gt;&amp;nums1,vector&lt;<span class="type">int</span>&gt;&amp;nums2)&#123;</span><br><span class="line">  <span class="keyword">if</span>(nums1.<span class="built_in">size</span>()&gt;nums2.<span class="built_in">size</span>())&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">intersect</span>(nums2,nums1);</span><br><span class="line">  &#125;</span><br><span class="line">  unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> num:nums1)&#123;</span><br><span class="line">    ++m[num];</span><br><span class="line">  &#125;</span><br><span class="line">  vector&lt;<span class="type">int</span>&gt;intersection;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> num:nums2)&#123;</span><br><span class="line">    <span class="keyword">if</span>(m.<span class="built_in">count</span>(num))&#123;</span><br><span class="line">      intersection.<span class="built_in">push_back</span>(num);</span><br><span class="line">      --m[num];</span><br><span class="line">      <span class="keyword">if</span>(m[num]==<span class="number">0</span>)&#123;</span><br><span class="line">        m.<span class="built_in">erase</span>(num);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> intersection;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://leetcode.cn/leetbook/detail/top-interview-questions-easy/&quot;&gt;初级算法 - LeetBook - 力扣（LeetCode）&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://strangersinsist.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="cpp" scheme="https://strangersinsist.github.io/tags/cpp/"/>
    
    <category term="算法" scheme="https://strangersinsist.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Unity2D小游戏</title>
    <link href="https://strangersinsist.github.io/2024/07/19/Unity2D/"/>
    <id>https://strangersinsist.github.io/2024/07/19/Unity2D/</id>
    <published>2024-07-19T15:03:05.491Z</published>
    <updated>2024-09-18T12:54:33.498Z</updated>
    
    <content type="html"><![CDATA[<p>演示视频</p><span id="more"></span><video width="800" height="500" controls>  <source src="https://github.com/strangersinsist/strangersinsist.github.io/raw/master/source/7.19/1.mp4" type="video/mp4"></video>]]></content>
    
    
    <summary type="html">&lt;p&gt;演示视频&lt;/p&gt;</summary>
    
    
    
    <category term="游戏开发" scheme="https://strangersinsist.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="unity" scheme="https://strangersinsist.github.io/tags/unity/"/>
    
    <category term="c#" scheme="https://strangersinsist.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>基于Springboot+Vue的WebApp开发实验报告</title>
    <link href="https://strangersinsist.github.io/2024/06/18/web%E5%BC%80%E5%8F%91/"/>
    <id>https://strangersinsist.github.io/2024/06/18/web%E5%BC%80%E5%8F%91/</id>
    <published>2024-06-18T13:55:32.940Z</published>
    <updated>2024-09-18T12:54:39.781Z</updated>
    
    <content type="html"><![CDATA[<p>  Java与面向对象设计的大作业，实验报告docx用pandoc转成了md。</p><span id="more"></span><p><strong>【实验目的】</strong></p><ol><li><p>掌握Java与面向对象基本原理和概念。</p></li><li><p>掌握Java与面向对象编程思想和主流技术或框架。</p></li><li><p>掌握基于Java开发完整软件Demo，并能演示。</p></li></ol><p><strong>【实验装备】</strong></p><p>个人笔记本，idea，JDK环境，mysql，navicat, vue，git等。</p><p><strong>【实验内容】</strong></p><p>基于所选择的主题方向，调研、分析和设计3-5个核心场景（模块）作为研究对象，根据掌握的Java和相关知识，实现相对完整的WebApp应用。以Java为基础，可以自由选择搭配其它技术和框架，输出详细的设计文档、项目源代码和可运行的Demo视频。</p><p><strong>【实验要求】</strong></p><ol><li><p>按实验内容输出详细设计、实现、运行关键截图，要求行文整洁、紧凑、顺畅。</p></li><li><p>代码以团队gitee形式提交，视频以百度网盘形式提交，可限时公开访问。</p></li></ol><blockquote><p>团队Gitee: <a href="https://gitee.com/AIJavaGroup">JavaGroup (gitee.com)</a></p><p>本项目代码: <a href="https://gitee.com/AIJavaGroup/project">JavaGroup&#x2F;project<br>(gitee.com)</a></p><p>视频百度网盘：<a href="https://pan.baidu.com/s/1H2LPdaarlfgZMcD_KRa6jg?pwd=2s45">链接</a><br>提取码：2s45</p></blockquote><ol start="3"><li>实验报告需要交代团队成员分工，以及自己承担的任务（要求任务量合理，鼓励交叉参与）；个人报告要求完整，团队成果部分精炼描述，侧重个人为主部分加以详细描述。</li></ol><p><strong>【实验分析】</strong></p><p>输出实验分析总结和心得体会。</p><p><strong>【参考资料】</strong></p><p>参考教程：<a href="https://www.bilibili.com/video/BV14y4y1M7Nc/?vd_source=270ace08b7863e0889a5cb86e5e103ac">带你从0搭建一个Springboot+vue前后端分离项目，真的很简单！_哔哩哔哩_bilibili</a></p><p>参考资料：</p><p>1. <a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus(element-plus.org)</a></p><p>2. <a href="https://cn.vuejs.org/">Vue.js 教程 | Vue.js 中文文档(cn.vuejs.org)</a></p><p>3. <a href="https://www.bilibili.com/video/BV1Xx421Q7df/?vd_source=270ace08b7863e0889a5cb86e5e103ac">SpringBoot+Vue个人健康管理系统Java毕业设计_哔哩哔哩_bilibili</a>(主要参考要实现什么功能)</p><p>这个源代码上传至：<a href="https://gitee.com/AIJavaGroup/health_management">JavaGroup&#x2F;health_management(gitee.com)</a></p><p><strong>【目录】</strong></p><p><strong>一.背景分析</strong></p><p>经过了解和学习，为实现健康管理系统，我们采取了一种现代化的前后端分离架构，以下是我们选用的关键技术和工具：</p><p>1.前端技术</p><p>Vue.js：作为一个渐进式JavaScript框架，Vue.js被用于创建高效、灵活的用户界面。它的组件化架构让我们能够重用代码并加快开发速度。</p><p>Element-Plus：基于Vue3的桌面端组件库，提供了一套丰富的UI组件，帮助我们在保持界面美观的同时，减少了开发和设计的工作量。</p><p>2.后端技术</p><p>SpringBoot：简化了基于Spring的应用开发过程，使得我们能够快速搭建和部署微服务。SpringBoot自动配置的特性大幅度减轻了配置工作，让我们能够专注于业务逻辑的实现。</p><p>MyBatis：它是一个支持定制SQL、存储过程以及高级映射的持久层框架。MyBatis消除了几乎所有的JDBC代码，并手动设置参数以及获取结果集。通过简单的XML或注解，我们能够将接口映射成数据库中的记录。</p><p>Lombok：一个Java库，通过使用注解，能够自动化生成模板代码，如getters、setters、constructors等。Lombok极大地简化了我们的Java代码，使得它更加简洁易读。</p><p>3.数据库管理</p><p>MySQL：我们选择MySQL作为后端数据库，借助其强大和广泛支持的特性来存储应用数据。</p><p>Navicat：作为一款强大的数据库管理工具，Navicat让数据库的管理变得轻松便捷。它不仅支持MySQL，还支持大量其它数据库，提供直观的GUI方便进行数据管理、开发和维护。</p><p><strong>二.需求分析</strong></p><p>我们计划实现3-5个主核心功能，参考<a href="https://www.sghealth.cn/health">健康管理系统|拾果健康(sghealth.cn)</a>及网上找到一些健康管理系统找到大概想实现的功能。在写好vue+springboot基本框架，搭建好跨域配置，写好依赖，写好基本的响应码，数据库配置，引入数据库表格写好mapper,controller,entity等等后，决定按功能分工，各自实现负责的功能的前端+后端。虽然前后端分离，但是功能一个人同时写，不断加功能完善项目，同时锻炼写前端和后端的能力。</p><p><strong>三.系统设计</strong></p><p>下面是我们当时设计的方案：</p><ol><li>系统：管理员、用户</li></ol><p>登录界面参考：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/1.jpg?raw=true"></p><ol start="2"><li>首页</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/2.jpg?raw=true"></p><ol start="3"><li>健康信息上传</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/3.jpg?raw=true"></p><ol start="4"><li>商品推荐</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/4.png?raw=true"></p><ol start="5"><li>运动知识</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/5.png?raw=true"></p><ol start="6"><li>评估与建议</li></ol><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/6.png?raw=true"></p><p>随后进行抽签，选择各自要实现的功能。抽签决定好后先写好头部和侧边栏，新建不同的.vue和路由，之后每个人写自己的.vue并根据需要补充后端.java即可。</p><p><strong>四.系统实现</strong></p><p><strong>团队成果：</strong></p><p>采用前端部分使用Vue.js和Element-Plus来构建用户界面，后端使用SpringBoot和MyBatis进行业务逻辑的处理和数据持久化，同时使用Navicat来管理MySQL数据库，并借助Lombok简化Java代码的开发。</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/7.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/8.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/9.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/10.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/11.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/12.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/13.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/14.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/15.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/16.png?raw=true"></p><p><strong>个人报告：</strong></p><p>我的任务：准备阶段学习git，gitee的使用和navicat，idea的配置并创建gitee团队；正式写项目时负责4个小功能，分别是登录、注册、设置、健康问答。并简单改动一下其他部分的细节。最后整理项目时导出sql文件，写项目README。</p><p>我的gitee：<a href="https://gitee.com/strangersinsist">Zhuyuehan (strangersinsist) -Gitee</a></p><p>1).准备阶段：</p><p>参照<a href="https://gitee.com/AIJavaGroup/health_management">JavaGroup&#x2F;health_management(gitee.com)</a>学会怎么运行前端后端数据库,git的一些操作。</p><!-- ![](https://github.com/strangersinsist/strangersinsist.github.io/blob/source/17.png?raw=true) --><p>2).正式项目：</p><p>1.登录<br>前端<code>Login.vue</code>，并在health_manage_vue\src\router\index.js设置路由，点击按钮触发js,通过post与后端进行交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import request from &quot;@/utils/request&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Login&quot;,</span><br><span class="line">  components: &#123;User,Lock&#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      form:&#123;&#125;,</span><br><span class="line">      rules:&#123;</span><br><span class="line">        username:[</span><br><span class="line">          &#123;required:true,message:&quot;请输入用户名&quot;,trigger:&#x27;blur&#x27;&#125;,</span><br><span class="line">        ],</span><br><span class="line">        password:[</span><br><span class="line">          &#123;required:true,message:&quot;请输入密码&quot;,trigger:&#x27;blur&#x27;&#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    login()&#123;</span><br><span class="line">      request.post(&quot;/api/user/login&quot;,this.form).then(res =&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        if(res.code == &#x27;200&#x27;)&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;success&quot;,</span><br><span class="line">            message:&quot;登录成功&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          //改一下试图存缓存</span><br><span class="line">          sessionStorage.setItem(&quot;user&quot;, JSON.stringify(res.data));</span><br><span class="line"></span><br><span class="line">          this.$router.push(&quot;/&quot;)</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type:&quot;error&quot;,</span><br><span class="line">            message:&quot;用户名或密码错误&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">import &#123;</span><br><span class="line">  User,Lock,</span><br><span class="line">&#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;login-container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;login-card&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h1&gt;</span><br><span class="line">      &lt;el-form :model=&quot;form&quot; :rules=&quot;rules&quot; class=&quot;login-form&quot; ref=&quot;loginForm&quot; size=&quot;large&quot;&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;username&quot; class=&quot;form-item&quot;&gt;</span><br><span class="line">          &lt;el-icon class=&quot;icon&quot;&gt;&lt;User /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.username&quot; placeholder=&quot;用户名：&quot; class=&quot;input-field&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item prop=&quot;password&quot; class=&quot;form-item&quot;&gt;</span><br><span class="line">          &lt;el-icon class=&quot;icon&quot;&gt;&lt;Lock /&gt;&lt;/el-icon&gt;</span><br><span class="line">          &lt;el-input type=&quot;password&quot; v-model=&quot;form.password&quot; placeholder=&quot;密码：&quot; class=&quot;input-field&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;div class=&quot;form-actions&quot;&gt;</span><br><span class="line">          &lt;el-button class=&quot;action-button&quot; @click=&quot;login&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button class=&quot;action-button&quot; @click=&quot;this.$router.push(&#x27;/register&#x27;)&quot;&gt;注册&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">//这部分为了优化界面写的比较多，省略，详细看gitee代码</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>后端和队友共用的Result.java，User.java，UserMapper.java和UserController.java，用于获取数据库信息及返回数据给前端，我在队友写的代码基础上增加了需要的部分<br><code>UserController.java:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.example.demo.controller;</span><br><span class="line">import …</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    @PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result&lt;?&gt; login(@RequestBody User user)&#123;</span><br><span class="line">        User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername()).eq(User::getPassword,user.getPassword()));</span><br><span class="line">        if(res ==null)&#123;</span><br><span class="line">            return Result.fail(&quot;用户名或密码错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return Result.success(res);</span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(&quot;/register&quot;)</span><br><span class="line">    public Result&lt;?&gt; register(@RequestBody User user)&#123;</span><br><span class="line">        User res = userMapper.selectOne(Wrappers.&lt;User&gt;lambdaQuery().eq(User::getUsername,user.getUsername()));</span><br><span class="line">        if(res !=null)&#123;</span><br><span class="line">            return Result.fail(&quot;用户名重复&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if(user.getPassword()==null)&#123;</span><br><span class="line">            user.setPassword(&quot;123456&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        return Result.success(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最初是这样：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/20.png?raw=true"></p><p>经过美化：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/21.png?raw=true"></p><p>2.注册</p><p>与登录基本类似，前端Register.vue，并在index.js设置路由。详细代码可以看gitee。(这个后面和登录用了同样的方式美化了一下)</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/22.png?raw=true"><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/23.png?raw=true"></p><p>3.设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import request from &quot;@/utils/request&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Setting&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      form:&#123;&#125;,</span><br><span class="line">      input:&quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    let str=sessionStorage.getItem(&quot;user&quot;)||&quot;&#123;&#125;&quot;</span><br><span class="line">    this.form=JSON.parse(str)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClose()&#123;</span><br><span class="line">      this.$router.push(&#x27;/home&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    update()&#123;</span><br><span class="line">      request.put(&quot;api/user&quot;,this.form).then(res =&gt;&#123;</span><br><span class="line">        console.log(res);</span><br><span class="line">        if(res.code == &#x27;200&#x27;)&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type: &quot;success&quot;,</span><br><span class="line">            message:&quot;更新成功&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">          sessionStorage.setItem(&quot;user&quot;,JSON.stringify(this.form))</span><br><span class="line">          this.$router.push(&#x27;/home&#x27;);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          this.$message(&#123;</span><br><span class="line">            type:&quot;error&quot;,</span><br><span class="line">            message:&quot;更新失败&quot;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-dialog v-model=&quot;form&quot; title=&quot;个人信息编辑&quot; width=&quot;500&quot; @close=&quot;handleClose&quot;&gt;</span><br><span class="line">      &lt;el-form :model=&quot;form&quot;&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;用户名&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.username&quot; disabled&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;密码&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.password&quot; show-password&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;手机号&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.number&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">        &lt;el-form-item label=&quot;邮箱&quot; :label-width=&quot;formLabelWidth&quot;&gt;</span><br><span class="line">          &lt;el-input v-model=&quot;form.email&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">        &lt;/el-form-item&gt;</span><br><span class="line">      &lt;/el-form&gt;</span><br><span class="line">      &lt;div class=&quot;dialog-footer&quot;&gt;</span><br><span class="line">        &lt;el-button @click=&quot;this.$router.push(&#x27;/home&#x27;)&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;update&quot;&gt;</span><br><span class="line">          确认</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>这个是header.vue部分的设置，写这部分是新增了vue和路由实现的。这部分不难，是在element plus中找了表单，再写好script部分，获取的user信息就好了。后来优化这部分时补充handleClose方法点击叉号跳转&#x2F;home页面，使操作更加流畅。</p><p>4.健康问答</p><p>前端实现：<code>HomeView.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;chatbox&quot;&gt;</span><br><span class="line">      &lt;h2 class=&quot;title&quot;&gt;健康问答&lt;/h2&gt;</span><br><span class="line">      &lt;div class=&quot;messages&quot; ref=&quot;messageBox&quot;&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">            v-for=&quot;(message, index) in messages&quot;</span><br><span class="line">            :key=&quot;index&quot;</span><br><span class="line">            :class=&quot;&#123;&#x27;message-container&#x27;: true, &#x27;user-message&#x27;: message.sender === &#x27;User&#x27;, &#x27;bot-message&#x27;: message.sender !== &#x27;User&#x27;&#125;&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;el-avatar class=&quot;message-avatar&quot; style=&quot;background-color: cornflowerblue;color: black&quot;&gt;&#123;&#123;message.sender === &#x27;User&#x27; ? &#x27;User&#x27; : &#x27;Bot&#x27;&#125;&#125;&lt;/el-avatar&gt;</span><br><span class="line">          &lt;div class=&quot;message-content&quot;&gt;&#123;&#123;message.text&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;input-section&quot;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">            type=&quot;text&quot;</span><br><span class="line">            class=&quot;userinput&quot;</span><br><span class="line">            v-model=&quot;userInput&quot;</span><br><span class="line">            @keyup.enter=&quot;sendMessage&quot;</span><br><span class="line">            placeholder=&quot;输入：&quot;</span><br><span class="line">        /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button</span><br><span class="line">            class=&quot;send&quot;</span><br><span class="line">            @click=&quot;sendMessage&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          发送</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HomeView&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      userInput: &#x27;&#x27;,</span><br><span class="line">      messages: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    async callAPIMethod(input) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">        const response = await axios.post(&#x27;http://localhost:9091/reply&#x27;, &#123; message: input &#125;);</span><br><span class="line">        return response.data;</span><br><span class="line">      &#125; catch (error) &#123;</span><br><span class="line">        console.error(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    async sendMessage() &#123;</span><br><span class="line">      this.messages.push(&#123;</span><br><span class="line">        sender: &#x27;User&#x27;,</span><br><span class="line">        text: this.userInput,</span><br><span class="line">      &#125;);</span><br><span class="line">      console.log(&quot;Ready to send message: &quot; + this.userInput);</span><br><span class="line">      const response = await this.callAPIMethod(this.userInput);</span><br><span class="line">      console.log(&quot;Received message: &quot; + response);</span><br><span class="line">      if(response) &#123;</span><br><span class="line">        this.messages.push(&#123;</span><br><span class="line">          sender: &#x27;Bot&#x27;,</span><br><span class="line">          text: response,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      this.$refs.messageBox.scrollTop = this.$refs.messageBox.scrollHeight;</span><br><span class="line"></span><br><span class="line">      this.userInput = &#x27;&#x27;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">//这部分太长了省略，详细看gitee代码</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>后端实现：<code>MessageController.java</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package com.example.demo.controller;</span><br><span class="line">import …</span><br><span class="line"></span><br><span class="line">class Message &#123;</span><br><span class="line">    private String message;</span><br><span class="line">    // getter</span><br><span class="line">    // setter</span><br><span class="line">&#125;</span><br><span class="line">@CrossOrigin(origins = &quot;http://localhost:8080&quot;)</span><br><span class="line">@RestController</span><br><span class="line">public class MessageController &#123;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/reply&quot;)</span><br><span class="line">    public String reply(@RequestBody Message message) &#123;</span><br><span class="line">        Random rand = new Random();</span><br><span class="line">        String[] responses = &#123;&quot;保持健康~&quot;, &quot;锻炼身体！&quot;, &quot;饮食规律~&quot;&#125;;</span><br><span class="line">        if (&quot;你好&quot;.equals(message.getMessage())) &#123;</span><br><span class="line">            return &quot;你好&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (&quot;什么是亚健康管理系统&quot;.equals(message.getMessage())) &#123;</span><br><span class="line">            return &quot;这个亚健康管理系统是人工智能学院java小组开发的。包括主页，运动知识，健康购物，评估与建议，健康信息上传的功能&quot;;</span><br><span class="line">        &#125; </span><br><span class="line">//省略一些else if</span><br><span class="line">else &#123;</span><br><span class="line">            return responses[rand.nextInt(responses.length)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分本来我想连一个大语言模型的api，但是后来找不到适合的免费api，并且觉得如果是健康管理系统的话可能直接连一个大模型不太合适，要手动个性化设置一下，遂写了一些回复语代替，比较简洁，仅供演示。如果问”你好”和”什么是亚健康管理系统&quot;等会回复特定的话，问其他就在&quot;保持健康~&quot;,&quot;锻炼身体！&quot;, &quot;饮食规律~&quot;中随机回复一个。</p><p>最初是下面左图所示，右图是后来美化了一下。</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/24.png?raw=true"></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/25.png?raw=true"></p><p>5.一些其他的小细节</p><p>1）头部username显示</p><p>最初：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/26.png?raw=true"></p><p>改动后：</p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/27.png?raw=true"><br>显示具体的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template #title&gt;</span><br><span class="line">    &lt;el-avatar style=&quot;background-color: cornflowerblue;color: black&quot;&gt;&#123;&#123; user.username &#125;&#125;&lt;/el-avatar&gt;</span><br><span class="line">  &lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2）管理员和普通用户权限，管理员可以看到用户管理的页面，这里是在数据库增加了role(int类型，1表示管理员0表示普通用户),</p><p>在<code>Aside.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &lt;el-menu-item index=&quot;7&quot; v-if=&quot;user.role===1&quot; @click=&quot;this.$router.push(&#x27;/user_manage&#x27;)&quot;&gt;</span><br><span class="line">  &lt;el-icon&gt;&lt;List /&gt;&lt;/el-icon&gt;</span><br><span class="line">  &lt;span&gt;用户管理&lt;/span&gt;</span><br><span class="line">&lt;/el-menu-item&gt;</span><br></pre></td></tr></table></figure><p><code>v-if=&quot;user.role===1&quot; </code>这样实现的</p><p>在<code>User_manage.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table-column label=&quot;角色&quot;&gt;</span><br><span class="line">    &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">      &lt;span v-if=&quot;scope.row.role===1&quot;&gt;管理员&lt;/span&gt;</span><br><span class="line">      &lt;span v-if=&quot;scope.row.role===0&quot;&gt;普通用户&lt;/span&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/el-table-column&gt;</span><br></pre></td></tr></table></figure><p>实现两者的显示。</p><p>3）未登录状况下强制跳转登录（这里是对我负责的登录功能的优化）</p><p>在<code>index.js</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 添加一个 beforeEach 路由守卫,这里用于实现未登录情况下强制跳转/login</span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  // 检查 sessionStorage 中是否已经有 user</span><br><span class="line">  let user = sessionStorage.getItem(&#x27;user&#x27;);</span><br><span class="line"></span><br><span class="line">  // 如果没有 user 且访问的不是登录界面，那么强制跳转至登录页面</span><br><span class="line">  if (!user &amp;&amp; to.path !== &#x27;/login&#x27;&amp;&amp; to.path !== &#x27;/register&#x27;) &#123;</span><br><span class="line">    return next(&#123; path: &#x27;/login&#x27; &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 否则就继续进行本次路由</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6.sql文件的整理上传，详见gitee<br><a href="https://gitee.com/AIJavaGroup/project/blob/master/health_management.sql">health_management.sql</a></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/28.png?raw=true"></p><p>7.README，详见gitee<br><a href="https://gitee.com/AIJavaGroup/project/blob/master/README.md">README.md</a></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/29.png?raw=true"></p><p><strong>五.总结展望</strong></p><!-- 访问[Activity -Gitee](https://gitee.com/organizations/AIJavaGroup/events)可以看到我们自从创建组织后的各种活动（创建仓库，不断试错，一次次更新修复）。git clone https://gitee.com/AIJavaGroup/project.git后可以在本地IDE上看到更新记录及详细的文件变动信息。![](https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/30.png?raw=true)点击每个文件的git提交人可以看到每行代码的提交人及提交时间。![](https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/6.18/31.png?raw=true) --><p>这次作业前期准备断断续续用了快一个月，后面写项目差不多两周左右。使用多一点框架会在正式开发中快很多，但是想要知道怎么用还是要学不少知识的。我们每个人都写了前端后端，如果你看源码会发现4个人不同的代码风格。总的来说，这次大作业还是学到了很多东西，见证了项目一点点搭建起来，培养团队合作能力，也真的加强了自信”我们可以自己写原创项目”。</p><p>展望的话，我们以后可以实现更完整一点的项目，比如文件上传，更丰富的管理员功能，验证码，服务器部署等等。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;  Java与面向对象设计的大作业，实验报告docx用pandoc转成了md。&lt;/p&gt;</summary>
    
    
    
    <category term="web开发" scheme="https://strangersinsist.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="springboot" scheme="https://strangersinsist.github.io/tags/springboot/"/>
    
    <category term="web" scheme="https://strangersinsist.github.io/tags/web/"/>
    
    <category term="vue" scheme="https://strangersinsist.github.io/tags/vue/"/>
    
    <category term="mysql" scheme="https://strangersinsist.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>W4terCTF2024 writeup</title>
    <link href="https://strangersinsist.github.io/2024/05/03/writeup/"/>
    <id>https://strangersinsist.github.io/2024/05/03/writeup/</id>
    <published>2024-05-03T06:39:16.405Z</published>
    <updated>2024-09-25T13:56:19.800Z</updated>
    
    <content type="html"><![CDATA[<p>纯小白，做出的题很少</p><p><del>图片很糊但就先这样吧</del><br>队友：<a href="https://github.com/kuku172">https://github.com/kuku172</a><br>放个友链<a href="https://lst4r-max.github.io/">Lst4r-max.github.io</a></p><span id="more"></span><h5 id="Spam-2024"><a href="#Spam-2024" class="headerlink" title="Spam 2024"></a>Spam 2024</h5><p>先找垃圾邮件，搜了很多东西后找到<a href="https://www.spammimic.com/encode.cgi">spammimic - encoded</a>，然后第一步解码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a,01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2,0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22</span><br></pre></td></tr></table></figure><p>前后是ACSII，中间是emoji的unicode。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_ascii</span>(<span class="params">hex_string</span>):</span><br><span class="line">    bytes_object = <span class="built_in">bytes</span>.fromhex(hex_string)</span><br><span class="line">    ascii_string = bytes_object.decode(<span class="string">&quot;ASCII&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> ascii_string</span><br><span class="line"></span><br><span class="line">hex_string1 = <span class="string">&quot;59,6f,75,20,6c,69,6b,65,20,65,6d,6f,6a,69,73,2c,20,64,6f,6e,27,74,20,79,6f,75,3f,0a,0a&quot;</span></span><br><span class="line">hex_string1 = hex_string1.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string1)) </span><br><span class="line"></span><br><span class="line">hex_string2 = <span class="string">&quot;0a,0a,42,74,77,2c,20,74,68,65,20,6b,65,79,20,69,73,20,22,4b,45,59,22&quot;</span></span><br><span class="line">hex_string2 = hex_string2.replace(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(hex_to_ascii(hex_string2)) </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unicode_string =<span class="string">&quot;01f643,01f4b5,01f33f,01f3a4,01f6aa,01f30f,01f40e,01f94b,01f6ab,01f606,2705,01f606,01f6b0,01f4c2,01f32a,263a,01f6e9,01f30f,01f4c2,01f579,01f993,01f405,01f375,01f388,01f600,01f504,01f6ab,01f3a4,01f993,2705,01f4ee,01f3a4,01f385,01f34e,01f643,01f309,01f383,01f34d,01f374,01f463,01f6b9,01f923,01f418,01f3f9,263a,01f463,01f4a7,01f463,01f993,01f33f,2328,01f32a,01f30f,01f643,01f375,2753,2602,01f309,01f606,01f3f9,01f375,01f4a7,01f385,01f449,01f30a,01f6b9,01f6aa,01f374,01f60e,01f383,01f32a,01f643,01f441,01f94b,01f451,01f4a7,01f418,01f3a4,01f94b,01f418,01f6e9,01f923,01f309,01f6e9,23e9,01f60d,2753,01f418,01f621,2600,01f60d,01f643,01f601,01f600,01f601,01f6ab,01f4c2,2705,2603,01f6ab,01f60e,01f52a,01f451,01f600,01f579,01f6ab,01f60d,01f32a,01f4c2,01f44c,01f34d,01f44c,01f993,01f590,01f923,01f60e,01f3ce,01f34d,01f3f9,01f34c,01f34d,01f3a4,2600,01f3f9,01f388,01f6b0,01f4a7,2600,2709,01f3f9,01f34d,01f993,01f385,01f374,2602,23e9,01f6aa,01f40d,263a,01f418,01f607,01f621,01f375,01f30f,01f993,01f375,01f6e9,01f4c2,01f44c,01f3f9,01f5d2,01f5d2&quot;</span></span><br><span class="line">unicode_list = unicode_string.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">emoji_string = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="string">&#x27;0x&#x27;</span> + uni, <span class="number">16</span>)) <span class="keyword">for</span> uni <span class="keyword">in</span> unicode_list)</span><br><span class="line"><span class="built_in">print</span>(emoji_string)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">You like emojis, don&#x27;t you?</span><br><span class="line">Btw, the key is &quot;KEY&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😆🚰📂🌪☺🛩🌏📂🕹🦓🐅🍵🎈😀🔄🚫🎤🦓✅📮🎤🎅🍎🙃🌉🎃🍍🍴👣🚹🤣🐘🏹☺👣💧👣🦓🌿⌨🌪🌏🙃🍵❓☂🌉😆🏹🍵💧🎅👉🌊🚹🚪🍴😎🎃🌪🙃👁🥋👑💧🐘🎤🥋🐘🛩🤣🌉🛩⏩😍❓🐘😡☀😍🙃😁😀😁🚫📂✅☃🚫😎🔪👑😀🕹🚫😍🌪📂👌🍍👌🦓🖐🤣😎🏎🍍🏹🍌🍍🎤☀🏹🎈🚰💧☀✉🏹🍍🦓🎅🍴☂⏩🚪🐍☺🐘😇😡🍵🌏🦓🍵🛩📂👌🏹🗒🗒</span><br></pre></td></tr></table></figure><p>找到下面的工具：<br><a href="https://aghorler.github.io/emoji-aes/#decrypt">emoji-aes</a></p><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-3.png?raw=true" alt="alt text"><br>发现密钥的问题，试了KEY的unicode, ascii,等等，🔑的unicode，用KEY生成垃圾邮件，都失败了。<br>找到正确的密钥🔑。<br>解密结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x???? ⊕ dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=</span><br></pre></td></tr></table></figure><p>这个字符串应该是被异或操作过的结果，找到正确的16进制数与其进行异或就能得到原始信息。下面是暴力破解来找出可能的结果。<br>异或运算的一个特点是自反的，就是用同一个键进行两次异或操作就可以恢复原始信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):  <span class="comment"># 试验所有 0x0000 到 0xffff 的可能key</span></span><br><span class="line">    plain_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(b ^ (xor_key &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> cipher_text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;0x<span class="subst">&#123;xor_key:04x&#125;</span>: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>) </span><br></pre></td></tr></table></figure><p>第一次的代码有点问题，遍历输出只发现了一个很像的数据。<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-5.png?raw=true" alt="alt text"><br>分析了下奇数位和偶数位异或的值是不一样的，0x？？？？看得出来是个四位十六进制，这个奇数位看起来基本是对的。<br>改一下代码，然后一样遍历枚举，就找到flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher_text = base64.b64decode(<span class="string">&#x27;dxBUQVJndGJbbGByE3tGUW57VxV0bH9db3FSe2YFUndUexVUYWl/QW1FAW1/bW57EhQSEF0=&#x27;</span>)</span><br><span class="line">xor_key_even = <span class="number">0xfe20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> xor_key_odd <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x10000</span>):    </span><br><span class="line">    plain_text = <span class="string">&quot;&quot;</span>.join(<span class="built_in">chr</span>(cipher_text[i] ^ ((xor_key_odd <span class="keyword">if</span> i % <span class="number">2</span> <span class="keyword">else</span> xor_key_even) &amp; <span class="number">0xff</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher_text)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;key_odd: 0x<span class="subst">&#123;xor_key_odd:04x&#125;</span>, deciphered message: <span class="subst">&#123;plain_text&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-6.png?raw=true" alt="alt text"></p><h5 id="GZ-GPT"><a href="#GZ-GPT" class="headerlink" title="GZ GPT"></a>GZ GPT</h5><p>nc：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-7.png?raw=true" alt="alt text"><br>乱码解决方案：<a href="http://www.mytju.com/classcode/tools/messyCodeRecover.asp">乱码恢复</a><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-8.png?raw=true" alt="alt text"><br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-9.png?raw=true" alt="alt text"></p><p>手动改乱码比较慢，就使用python的pwn库，并导入codecs模块（基础编解码功能）进行无限交互直至远程服务器终止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">conn = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">50338</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = conn.recv().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    gbk_data = data.encode(<span class="string">&#x27;gbk&#x27;</span>)   </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;接收到的数据：<span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    conn.interactive()    </span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><p><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-10.png?raw=true" alt="alt text"></p><p>看提示，应该是每次返回的有隐藏数据（想到去年的shadow，感觉这次输出光标也有奇怪的闪动）。<br>确定了下每次输出后都有隐藏信息，这题是考隐写的。<br>把终端输出复制过来看到vscode的提示：<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-12.png?raw=true" alt="alt text"></p><p>然后去查一下锁定类型：零宽度字符隐写，并找到工具<a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters</a>。<br>用笨蛋方法一句句复制粘贴上去解码的，把每次的Hidden Text粘贴上去就得到完整的flag了。</p><h4 id="broken-mp4"><a href="#broken-mp4" class="headerlink" title="broken.mp4"></a>broken.mp4</h4><p>解压后一个视频是完好的，打开看看，很明显的提示了，明显是在微信打开的嘛，去微信上搜搜标题，很好找到这篇文章<a href="https://mp.weixin.qq.com/s/ODVbDRMhOGvk-dWN09uk1Q">链接</a><br>然后去下载公众号上说的那个软件恢复一下就OK了<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-1.jpg?raw=true" alt="alt text"></p><h4 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h4><p>四道签到题的最后一个（晚上公选课无聊乱翻榜单看到的）<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-2.png?raw=true" alt="alt text"></p><h4 id="Remember-It-0"><a href="#Remember-It-0" class="headerlink" title="Remember It 0"></a>Remember It 0</h4><p>第一次做pwn题，随便试试，签到题的话一般跟着做就行（主要是懒得想其他方法了）<br>看源码，笨蛋方法没问题，就一步步敲的<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-4.png?raw=true" alt="alt text"><br>然后cat flag<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-11.png?raw=true" alt="alt text"></p><h4 id="Shuffle-Puts"><a href="#Shuffle-Puts" class="headerlink" title="Shuffle Puts"></a>Shuffle Puts</h4><p>签到题，嗯，打开IDA直接看strings<br><img src="https://github.com/strangersinsist/strangersinsist.github.io/blob/master/source/5.3/image-13.png?raw=true" alt="alt text"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>小白第一次玩CTF还是挺开心的，感觉算是入了门。（一周前容器实例还不会开netcat还不会用的）。<br>如果这周事情不那么多就好了，这周太忙了有效做题时间不多，很多方向都没学，基本上就是在做Misc了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;纯小白，做出的题很少&lt;/p&gt;
&lt;p&gt;&lt;del&gt;图片很糊但就先这样吧&lt;/del&gt;&lt;br&gt;队友：&lt;a href=&quot;https://github.com/kuku172&quot;&gt;https://github.com/kuku172&lt;/a&gt;&lt;br&gt;放个友链&lt;a href=&quot;https://lst4r-max.github.io/&quot;&gt;Lst4r-max.github.io&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://strangersinsist.github.io/categories/CTF/"/>
    
    
    <category term="ctf" scheme="https://strangersinsist.github.io/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://strangersinsist.github.io/2023/12/13/hello-world/"/>
    <id>https://strangersinsist.github.io/2023/12/13/hello-world/</id>
    <published>2023-12-13T14:04:00.148Z</published>
    <updated>2024-09-18T12:54:08.080Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
